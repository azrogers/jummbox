var jt=Object.defineProperty;var _t=(r,e,t)=>e in r?jt(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var a=(r,e,t)=>(_t(r,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))o(i);new MutationObserver(i=>{for(const c of i)if(c.type==="childList")for(const p of c.addedNodes)p.tagName==="LINK"&&p.rel==="modulepreload"&&o(p)}).observe(document,{childList:!0,subtree:!0});function t(i){const c={};return i.integrity&&(c.integrity=i.integrity),i.referrerPolicy&&(c.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?c.credentials="include":i.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function o(i){if(i.ep)return;i.ep=!0;const c=t(i);fetch(i.href,c)}})();var Pe=(r=>(r[r.lowPass=0]="lowPass",r[r.highPass=1]="highPass",r[r.peak=2]="peak",r[r.length=3]="length",r))(Pe||{}),fe=(r=>(r[r.noteSize=0]="noteSize",r[r.none=1]="none",r[r.punch=2]="punch",r[r.flare=3]="flare",r[r.twang=4]="twang",r[r.swell=5]="swell",r[r.tremolo=6]="tremolo",r[r.tremolo2=7]="tremolo2",r[r.decay=8]="decay",r))(fe||{}),T=(r=>(r[r.chip=0]="chip",r[r.fm=1]="fm",r[r.noise=2]="noise",r[r.spectrum=3]="spectrum",r[r.drumset=4]="drumset",r[r.harmonics=5]="harmonics",r[r.pwm=6]="pwm",r[r.pickedString=7]="pickedString",r[r.customChipWave=8]="customChipWave",r[r.mod=9]="mod",r[r.length=10]="length",r))(T||{}),en=(r=>(r[r.Vibrato=0]="Vibrato",r[r.Pan=1]="Pan",r[r.Chord=2]="Chord",r[r.Transition=3]="Transition",r[r.FM=4]="FM",r))(en||{}),ce=(r=>(r[r.reverb=0]="reverb",r[r.chorus=1]="chorus",r[r.panning=2]="panning",r[r.distortion=3]="distortion",r[r.bitcrusher=4]="bitcrusher",r[r.noteFilter=5]="noteFilter",r[r.echo=6]="echo",r[r.pitchShift=7]="pitchShift",r[r.detune=8]="detune",r[r.vibrato=9]="vibrato",r[r.transition=10]="transition",r[r.chord=11]="chord",r[r.length=12]="length",r))(ce||{}),de=(r=>(r[r.noteVolume=0]="noteVolume",r[r.noteFilterAllFreqs=1]="noteFilterAllFreqs",r[r.pulseWidth=2]="pulseWidth",r[r.stringSustain=3]="stringSustain",r[r.unison=4]="unison",r[r.operatorFrequency0=5]="operatorFrequency0",r[r.operatorFrequency1=6]="operatorFrequency1",r[r.operatorFrequency2=7]="operatorFrequency2",r[r.operatorFrequency3=8]="operatorFrequency3",r[r.operatorAmplitude0=9]="operatorAmplitude0",r[r.operatorAmplitude1=10]="operatorAmplitude1",r[r.operatorAmplitude2=11]="operatorAmplitude2",r[r.operatorAmplitude3=12]="operatorAmplitude3",r[r.feedbackAmplitude=13]="feedbackAmplitude",r[r.pitchShift=14]="pitchShift",r[r.detune=15]="detune",r[r.vibratoDepth=16]="vibratoDepth",r[r.noteFilterFreq0=17]="noteFilterFreq0",r[r.noteFilterFreq1=18]="noteFilterFreq1",r[r.noteFilterFreq2=19]="noteFilterFreq2",r[r.noteFilterFreq3=20]="noteFilterFreq3",r[r.noteFilterFreq4=21]="noteFilterFreq4",r[r.noteFilterFreq5=22]="noteFilterFreq5",r[r.noteFilterFreq6=23]="noteFilterFreq6",r[r.noteFilterFreq7=24]="noteFilterFreq7",r[r.noteFilterGain0=25]="noteFilterGain0",r[r.noteFilterGain1=26]="noteFilterGain1",r[r.noteFilterGain2=27]="noteFilterGain2",r[r.noteFilterGain3=28]="noteFilterGain3",r[r.noteFilterGain4=29]="noteFilterGain4",r[r.noteFilterGain5=30]="noteFilterGain5",r[r.noteFilterGain6=31]="noteFilterGain6",r[r.noteFilterGain7=32]="noteFilterGain7",r[r.length=33]="length",r))(de||{});const b=class b{static generateSineWave(){const e=new Float32Array(b.sineWaveLength+1);for(let t=0;t<b.sineWaveLength+1;t++)e[t]=Math.sin(t*Math.PI*2/b.sineWaveLength);return e}static generateTriWave(){const e=new Float32Array(b.sineWaveLength+1);for(let t=0;t<b.sineWaveLength+1;t++)e[t]=Math.asin(Math.sin(t*Math.PI*2/b.sineWaveLength))/(Math.PI/2);return e}static generateTrapezoidWave(e=2){const t=new Float32Array(b.sineWaveLength+1);for(let o=0;o<b.sineWaveLength+1;o++)t[o]=Math.max(-1,Math.min(1,Math.asin(Math.sin(o*Math.PI*2/b.sineWaveLength))*e));return t}static generateSquareWave(e=0){const t=new Float32Array(b.sineWaveLength+1),o=b.sineWaveLength/4;for(let i=0;i<b.sineWaveLength+1;i++)t[i]=+(Math.abs(i-o)<e*b.sineWaveLength/2||Math.abs(i-b.sineWaveLength-o)<e*b.sineWaveLength/2)*2-1;return t}static generateSawWave(e=!1){const t=new Float32Array(b.sineWaveLength+1);for(let o=0;o<b.sineWaveLength+1;o++)t[o]=(o+b.sineWaveLength/4)*2/b.sineWaveLength%2-1,t[o]=e?-t[o]:t[o];return t}};a(b,"thresholdVal",-10),a(b,"kneeVal",40),a(b,"ratioVal",12),a(b,"attackVal",0),a(b,"releaseVal",.25),a(b,"scales",he([{name:"Free",realName:"chromatic",flags:[!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0]},{name:"Major",realName:"ionian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0]},{name:"Minor",realName:"aeolian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Mixolydian",realName:"mixolydian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!0,!1]},{name:"Lydian",realName:"lydian",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0]},{name:"Dorian",realName:"dorian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!0,!1]},{name:"Phrygian",realName:"phrygian",flags:[!0,!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Locrian",realName:"locrian",flags:[!0,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1]},{name:"Lydian Dominant",realName:"lydian dominant",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!0,!1]},{name:"Phrygian Dominant",realName:"phrygian dominant",flags:[!0,!0,!1,!1,!0,!0,!1,!0,!0,!1,!0,!1]},{name:"Harmonic Major",realName:"harmonic major",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!0,!1,!1,!0]},{name:"Harmonic Minor",realName:"harmonic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!1,!0]},{name:"Melodic Minor",realName:"melodic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1,!0]},{name:"Blues",realName:"blues",flags:[!0,!1,!1,!0,!1,!0,!0,!0,!1,!1,!0,!1]},{name:"Altered",realName:"altered",flags:[!0,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Major Pentatonic",realName:"major pentatonic",flags:[!0,!1,!0,!1,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"Minor Pentatonic",realName:"minor pentatonic",flags:[!0,!1,!1,!0,!1,!0,!1,!0,!1,!1,!0,!1]},{name:"Whole Tone",realName:"whole tone",flags:[!0,!1,!0,!1,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Octatonic",realName:"octatonic",flags:[!0,!1,!0,!0,!1,!0,!0,!1,!0,!0,!1,!0]},{name:"Hexatonic",realName:"hexatonic",flags:[!0,!1,!1,!0,!0,!1,!1,!0,!0,!1,!1,!0]}])),a(b,"keys",he([{name:"C",isWhiteKey:!0,basePitch:12},{name:"C♯",isWhiteKey:!1,basePitch:13},{name:"D",isWhiteKey:!0,basePitch:14},{name:"D♯",isWhiteKey:!1,basePitch:15},{name:"E",isWhiteKey:!0,basePitch:16},{name:"F",isWhiteKey:!0,basePitch:17},{name:"F♯",isWhiteKey:!1,basePitch:18},{name:"G",isWhiteKey:!0,basePitch:19},{name:"G♯",isWhiteKey:!1,basePitch:20},{name:"A",isWhiteKey:!0,basePitch:21},{name:"A♯",isWhiteKey:!1,basePitch:22},{name:"B",isWhiteKey:!0,basePitch:23}])),a(b,"blackKeyNameParents",[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1]),a(b,"tempoMin",30),a(b,"tempoMax",320),a(b,"echoDelayRange",24),a(b,"echoDelayStepTicks",4),a(b,"echoSustainRange",8),a(b,"echoShelfHz",4e3),a(b,"echoShelfGain",Math.pow(2,-.5)),a(b,"reverbShelfHz",8e3),a(b,"reverbShelfGain",Math.pow(2,-1.5)),a(b,"reverbRange",32),a(b,"reverbDelayBufferSize",16384),a(b,"reverbDelayBufferMask",b.reverbDelayBufferSize-1),a(b,"beatsPerBarMin",3),a(b,"beatsPerBarMax",16),a(b,"barCountMin",1),a(b,"barCountMax",256),a(b,"instrumentCountMin",1),a(b,"layeredInstrumentCountMax",4),a(b,"patternInstrumentCountMax",10),a(b,"partsPerBeat",24),a(b,"ticksPerPart",2),a(b,"ticksPerArpeggio",3),a(b,"arpeggioPatterns",[[0],[0,1],[0,1,2,1],[0,1,2,3],[0,1,2,3,4],[0,1,2,3,4,5],[0,1,2,3,4,5,6],[0,1,2,3,4,5,6,7]]),a(b,"rhythms",he([{name:"÷3 (triplets)",stepsPerBeat:3,roundUpThresholds:[5,12,18]},{name:"÷4 (standard)",stepsPerBeat:4,roundUpThresholds:[3,9,17,21]},{name:"÷6",stepsPerBeat:6,roundUpThresholds:null},{name:"÷8",stepsPerBeat:8,roundUpThresholds:null},{name:"freehand",stepsPerBeat:24,roundUpThresholds:null}])),a(b,"instrumentTypeNames",["chip","FM","noise","spectrum","drumset","harmonics","PWM","Picked String","custom chip","mod"]),a(b,"instrumentTypeHasSpecialInterval",[!0,!0,!1,!1,!1,!0,!1,!1,!1]),a(b,"chipBaseExpression",.03375),a(b,"fmBaseExpression",.03),a(b,"noiseBaseExpression",.19),a(b,"spectrumBaseExpression",.3),a(b,"drumsetBaseExpression",.45),a(b,"harmonicsBaseExpression",.025),a(b,"pwmBaseExpression",.04725),a(b,"pickedStringBaseExpression",.025),a(b,"distortionBaseVolume",.011),a(b,"bitcrusherBaseVolume",.01),a(b,"rawChipWaves",he([{name:"rounded",expression:.94,samples:qe([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2])},{name:"triangle",expression:1,samples:qe([1/15,3/15,5/15,7/15,9/15,11/15,13/15,15/15,15/15,13/15,11/15,9/15,7/15,5/15,3/15,1/15,-1/15,-3/15,-5/15,-7/15,-9/15,-11/15,-13/15,-15/15,-15/15,-13/15,-11/15,-9/15,-7/15,-5/15,-3/15,-1/15])},{name:"square",expression:.5,samples:qe([1,-1])},{name:"1/4 pulse",expression:.5,samples:qe([1,-1,-1,-1])},{name:"1/8 pulse",expression:.5,samples:qe([1,-1,-1,-1,-1,-1,-1,-1])},{name:"sawtooth",expression:.65,samples:qe([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,31/31,-31/31,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31])},{name:"double saw",expression:.5,samples:qe([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2])},{name:"double pulse",expression:.4,samples:qe([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1])},{name:"spiky",expression:.4,samples:qe([1,-1,1,-1,1,0])},{name:"sine",expression:.88,samples:Te([8,9,11,12,13,14,15,15,15,15,14,14,13,11,10,9,7,6,4,3,2,1,0,0,0,0,1,1,2,4,5,6])},{name:"flute",expression:.8,samples:Te([3,4,6,8,10,11,13,14,15,15,14,13,11,8,5,3])},{name:"harp",expression:.8,samples:Te([0,3,3,3,4,5,5,6,7,8,9,11,11,13,13,15,15,14,12,11,10,9,8,7,7,5,4,3,2,1,0,0])},{name:"sharp clarinet",expression:.38,samples:Te([0,0,0,1,1,8,8,9,9,9,8,8,8,8,8,9,9,7,9,9,10,4,0,0,0,0,0,0,0,0,0,0])},{name:"soft clarinet",expression:.45,samples:Te([0,1,5,8,9,9,9,9,9,9,9,11,11,12,13,12,10,9,7,6,4,3,3,3,1,1,1,1,1,1,1,1])},{name:"alto sax",expression:.3,samples:Te([5,5,6,4,3,6,8,7,2,1,5,6,5,4,5,7,9,11,13,14,14,14,14,13,10,8,7,7,4,3,4,2])},{name:"bassoon",expression:.35,samples:Te([9,9,7,6,5,4,4,4,4,5,7,8,9,10,11,13,13,11,10,9,7,6,4,2,1,1,1,2,2,5,11,14])},{name:"trumpet",expression:.22,samples:Te([10,11,8,6,5,5,5,6,7,7,7,7,6,6,7,7,7,7,7,6,6,6,6,6,6,6,6,7,8,9,11,14])},{name:"electric guitar",expression:.2,samples:Te([11,12,12,10,6,6,8,0,2,4,8,10,9,10,1,7,11,3,6,6,8,13,14,2,0,12,8,4,13,11,10,13])},{name:"organ",expression:.2,samples:Te([11,10,12,11,14,7,5,5,12,10,10,9,12,6,4,5,13,12,12,10,12,5,2,2,8,6,6,5,8,3,2,1])},{name:"pan flute",expression:.35,samples:Te([1,4,7,6,7,9,7,7,11,12,13,15,13,11,11,12,13,10,7,5,3,6,10,7,3,3,1,0,1,0,1,0])},{name:"glitch",expression:.5,samples:qe}])),a(b,"chipWaves",an(b.rawChipWaves)),a(b,"chipNoises",he([{name:"retro",expression:.25,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"white",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"clang",expression:.4,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"buzz",expression:.3,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"hollow",expression:1.5,basePitch:96,pitchFilterMult:1,isSoft:!0,samples:null},{name:"shine",expression:1,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"deep",expression:1.5,basePitch:120,pitchFilterMult:1024,isSoft:!0,samples:null},{name:"cutter",expression:.005,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"metallic",expression:1,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null}])),a(b,"filterFreqStep",1/4),a(b,"filterFreqRange",34),a(b,"filterFreqReferenceSetting",28),a(b,"filterFreqReferenceHz",8e3),a(b,"filterFreqMaxHz",b.filterFreqReferenceHz*Math.pow(2,b.filterFreqStep*(b.filterFreqRange-1-b.filterFreqReferenceSetting))),a(b,"filterFreqMinHz",8),a(b,"filterGainRange",15),a(b,"filterGainCenter",7),a(b,"filterGainStep",1/2),a(b,"filterMaxPoints",8),a(b,"filterTypeNames",["low-pass","high-pass","peak"]),a(b,"filterMorphCount",10),a(b,"filterSimpleCutRange",11),a(b,"filterSimplePeakRange",8),a(b,"fadeInRange",10),a(b,"fadeOutTicks",[-24,-12,-6,-3,-1,6,12,24,48,72,96]),a(b,"fadeOutNeutral",4),a(b,"drumsetFadeOutTicks",48),a(b,"transitions",he([{name:"normal",isSeamless:!1,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!1},{name:"interrupt",isSeamless:!0,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"continue",isSeamless:!0,continues:!0,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide in pattern",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!1}])),a(b,"vibratos",he([{name:"none",amplitude:0,type:0,delayTicks:0},{name:"light",amplitude:.15,type:0,delayTicks:0},{name:"delayed",amplitude:.3,type:0,delayTicks:37},{name:"heavy",amplitude:.45,type:0,delayTicks:0},{name:"shaky",amplitude:.1,type:1,delayTicks:0}])),a(b,"vibratoTypes",he([{name:"normal",periodsSeconds:[.14],period:.14},{name:"shaky",periodsSeconds:[.11,1.618*.11,3*.11],period:266.97}])),a(b,"arpSpeedScale",[0,.0625,.125,.2,.25,1/3,.4,.5,2/3,.75,.8,.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.15,4.3,4.5,4.8,5,5.5,6,8]),a(b,"unisons",he([{name:"none",voices:1,spread:0,offset:0,expression:1.4,sign:1},{name:"shimmer",voices:2,spread:.018,offset:0,expression:.8,sign:1},{name:"hum",voices:2,spread:.045,offset:0,expression:1,sign:1},{name:"honky tonk",voices:2,spread:.09,offset:0,expression:1,sign:1},{name:"dissonant",voices:2,spread:.25,offset:0,expression:.9,sign:1},{name:"fifth",voices:2,spread:3.5,offset:3.5,expression:.9,sign:1},{name:"octave",voices:2,spread:6,offset:6,expression:.8,sign:1},{name:"bowed",voices:2,spread:.02,offset:0,expression:1,sign:-1},{name:"piano",voices:2,spread:.01,offset:0,expression:1,sign:.7},{name:"warbled",voices:2,spread:.25,offset:.05,expression:.9,sign:-.8}])),a(b,"effectNames",["reverb","chorus","panning","distortion","bitcrusher","note filter","echo","pitch shift","detune","vibrato","transition type","chord type"]),a(b,"effectOrder",[2,10,11,7,8,9,5,3,4,1,6,0]),a(b,"noteSizeMax",6),a(b,"volumeRange",50),a(b,"volumeLogScale",.1428),a(b,"panCenter",50),a(b,"panMax",b.panCenter*2),a(b,"panDelaySecondsMax",.001),a(b,"chorusRange",8),a(b,"chorusPeriodSeconds",2),a(b,"chorusDelayRange",.0034),a(b,"chorusDelayOffsets",[[1.51,2.1,3.35],[1.47,2.15,3.25]]),a(b,"chorusPhaseOffsets",[[0,2.1,4.2],[3.2,5.3,1]]),a(b,"chorusMaxDelay",b.chorusDelayRange*(1+b.chorusDelayOffsets[0].concat(b.chorusDelayOffsets[1]).reduce((e,t)=>Math.max(e,t)))),a(b,"chords",he([{name:"simultaneous",customInterval:!1,arpeggiates:!1,strumParts:0,singleTone:!1},{name:"strum",customInterval:!1,arpeggiates:!1,strumParts:1,singleTone:!1},{name:"arpeggio",customInterval:!1,arpeggiates:!0,strumParts:0,singleTone:!0},{name:"custom interval",customInterval:!0,arpeggiates:!1,strumParts:0,singleTone:!0}])),a(b,"maxChordSize",9),a(b,"operatorCount",4),a(b,"maxPitchOrOperatorCount",Math.max(b.maxChordSize,b.operatorCount)),a(b,"algorithms",he([{name:"1←(2 3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3,4],[],[],[]]},{name:"1←(2 3←4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[],[4],[]]},{name:"1←2←(3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3,4],[],[]]},{name:"1←(2 3)←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[4],[4],[]]},{name:"1←2←3←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3],[4],[]]},{name:"1←3 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[3],[4],[],[]]},{name:"1 2←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3,4],[],[]]},{name:"1 2←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3],[4],[]]},{name:"(1 2)←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3],[3],[4],[]]},{name:"(1 2)←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3,4],[3,4],[],[]]},{name:"1 2 3←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[],[],[4],[]]},{name:"(1 2 3)←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[4],[4],[4],[]]},{name:"1 2 3 4",carrierCount:4,associatedCarrier:[1,2,3,4],modulatedBy:[[],[],[],[]]}])),a(b,"operatorCarrierInterval",[0,.04,-.073,.091]),a(b,"operatorAmplitudeMax",15),a(b,"operatorFrequencies",he([{name:"1×",mult:1,hzOffset:0,amplitudeSign:1},{name:"~1×",mult:1,hzOffset:1.5,amplitudeSign:-1},{name:"2×",mult:2,hzOffset:0,amplitudeSign:1},{name:"~2×",mult:2,hzOffset:-1.3,amplitudeSign:-1},{name:"3×",mult:3,hzOffset:0,amplitudeSign:1},{name:"4×",mult:4,hzOffset:0,amplitudeSign:1},{name:"5×",mult:5,hzOffset:0,amplitudeSign:1},{name:"6×",mult:6,hzOffset:0,amplitudeSign:1},{name:"7×",mult:7,hzOffset:0,amplitudeSign:1},{name:"8×",mult:8,hzOffset:0,amplitudeSign:1},{name:"9×",mult:9,hzOffset:0,amplitudeSign:1},{name:"11×",mult:11,hzOffset:0,amplitudeSign:1},{name:"13×",mult:13,hzOffset:0,amplitudeSign:1},{name:"16×",mult:16,hzOffset:0,amplitudeSign:1},{name:"20×",mult:20,hzOffset:0,amplitudeSign:1}])),a(b,"envelopes",he([{name:"none",type:1,speed:0},{name:"note size",type:0,speed:0},{name:"punch",type:2,speed:0},{name:"flare 1",type:3,speed:32},{name:"flare 2",type:3,speed:8},{name:"flare 3",type:3,speed:2},{name:"twang 1",type:4,speed:32},{name:"twang 2",type:4,speed:8},{name:"twang 3",type:4,speed:2},{name:"swell 1",type:5,speed:32},{name:"swell 2",type:5,speed:8},{name:"swell 3",type:5,speed:2},{name:"tremolo1",type:6,speed:4},{name:"tremolo2",type:6,speed:2},{name:"tremolo3",type:6,speed:1},{name:"tremolo4",type:7,speed:4},{name:"tremolo5",type:7,speed:2},{name:"tremolo6",type:7,speed:1},{name:"decay 1",type:8,speed:10},{name:"decay 2",type:8,speed:7},{name:"decay 3",type:8,speed:4}])),a(b,"feedbacks",he([{name:"1⟲",indices:[[1],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[]]},{name:"3⟲",indices:[[],[],[3],[]]},{name:"4⟲",indices:[[],[],[],[4]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4]]},{name:"1→2",indices:[[],[1],[],[]]},{name:"1→3",indices:[[],[],[1],[]]},{name:"1→4",indices:[[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[]]},{name:"2→4",indices:[[],[],[],[2]]},{name:"3→4",indices:[[],[],[],[3]]},{name:"1→3 2→4",indices:[[],[],[1],[2]]},{name:"1→4 2→3",indices:[[],[],[2],[1]]},{name:"1→2→3→4",indices:[[],[1],[2],[3]]}])),a(b,"chipNoiseLength",32768),a(b,"spectrumNoiseLength",32768),a(b,"spectrumBasePitch",24),a(b,"spectrumControlPoints",30),a(b,"spectrumControlPointsPerOctave",7),a(b,"spectrumControlPointBits",3),a(b,"spectrumMax",(1<<b.spectrumControlPointBits)-1),a(b,"harmonicsControlPoints",28),a(b,"harmonicsRendered",64),a(b,"harmonicsRenderedForPickedString",256),a(b,"harmonicsControlPointBits",3),a(b,"harmonicsMax",(1<<b.harmonicsControlPointBits)-1),a(b,"harmonicsWavelength",2048),a(b,"pulseWidthRange",50),a(b,"pulseWidthStepPower",.5),a(b,"pitchChannelCountMin",1),a(b,"pitchChannelCountMax",40),a(b,"noiseChannelCountMin",0),a(b,"noiseChannelCountMax",16),a(b,"modChannelCountMin",0),a(b,"modChannelCountMax",12),a(b,"noiseInterval",6),a(b,"pitchesPerOctave",12),a(b,"drumCount",12),a(b,"pitchOctaves",8),a(b,"modCount",6),a(b,"maxPitch",b.pitchOctaves*b.pitchesPerOctave),a(b,"maximumTonesPerChannel",b.maxChordSize*2),a(b,"justIntonationSemitones",[1/2,8/15,9/16,3/5,5/8,2/3,32/45,3/4,4/5,5/6,8/9,15/16,1,16/15,9/8,6/5,5/4,4/3,45/32,3/2,8/5,5/3,16/9,15/8,2].map(e=>Math.log2(e)*b.pitchesPerOctave)),a(b,"pitchShiftRange",b.justIntonationSemitones.length),a(b,"pitchShiftCenter",b.pitchShiftRange>>1),a(b,"detuneCenter",200),a(b,"detuneMax",400),a(b,"detuneMin",0),a(b,"songDetuneMin",0),a(b,"songDetuneMax",500),a(b,"sineWaveLength",256),a(b,"sineWaveMask",b.sineWaveLength-1),a(b,"sineWave",b.generateSineWave()),a(b,"pickedStringDispersionCenterFreq",6e3),a(b,"pickedStringDispersionFreqScale",.3),a(b,"pickedStringDispersionFreqMult",4),a(b,"pickedStringShelfHz",4e3),a(b,"distortionRange",8),a(b,"stringSustainRange",15),a(b,"stringDecayRate",.12),a(b,"bitcrusherFreqRange",14),a(b,"bitcrusherOctaveStep",.5),a(b,"bitcrusherQuantizationRange",8),a(b,"maxEnvelopeCount",12),a(b,"defaultAutomationRange",13),a(b,"instrumentAutomationTargets",he([{name:"none",computeIndex:null,displayName:"none",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"noteVolume",computeIndex:0,displayName:"note volume",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"pulseWidth",computeIndex:2,displayName:"pulse width",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[6]},{name:"stringSustain",computeIndex:3,displayName:"sustain",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[7]},{name:"unison",computeIndex:4,displayName:"unison",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[0,5,7]},{name:"operatorFrequency",computeIndex:5,displayName:"fm# freq",interleave:!0,isFilter:!1,maxCount:b.operatorCount,effect:null,compatibleInstruments:[1]},{name:"operatorAmplitude",computeIndex:9,displayName:"fm# volume",interleave:!1,isFilter:!1,maxCount:b.operatorCount,effect:null,compatibleInstruments:[1]},{name:"feedbackAmplitude",computeIndex:13,displayName:"fm feedback",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[1]},{name:"pitchShift",computeIndex:14,displayName:"pitch shift",interleave:!1,isFilter:!1,maxCount:1,effect:7,compatibleInstruments:null},{name:"detune",computeIndex:15,displayName:"detune",interleave:!1,isFilter:!1,maxCount:1,effect:8,compatibleInstruments:null},{name:"vibratoDepth",computeIndex:16,displayName:"vibrato range",interleave:!1,isFilter:!1,maxCount:1,effect:9,compatibleInstruments:null},{name:"noteFilterAllFreqs",computeIndex:1,displayName:"n. filter freqs",interleave:!1,isFilter:!0,maxCount:1,effect:5,compatibleInstruments:null},{name:"noteFilterFreq",computeIndex:17,displayName:"n. filter # freq",interleave:!1,isFilter:!0,maxCount:b.filterMaxPoints,effect:5,compatibleInstruments:null}])),a(b,"operatorWaves",he([{name:"sine",samples:b.sineWave},{name:"triangle",samples:b.generateTriWave()},{name:"sawtooth",samples:b.generateSawWave()},{name:"pulse width",samples:b.generateSquareWave()},{name:"ramp",samples:b.generateSawWave(!0)},{name:"trapezoid",samples:b.generateTrapezoidWave(2)}])),a(b,"pwmOperatorWaves",he([{name:"1%",samples:b.generateSquareWave(.01)},{name:"5%",samples:b.generateSquareWave(.05)},{name:"12.5%",samples:b.generateSquareWave(.125)},{name:"25%",samples:b.generateSquareWave(.25)},{name:"33%",samples:b.generateSquareWave(1/3)},{name:"50%",samples:b.generateSquareWave(.5)},{name:"66%",samples:b.generateSquareWave(2/3)},{name:"75%",samples:b.generateSquareWave(.75)},{name:"87.5%",samples:b.generateSquareWave(.875)},{name:"95%",samples:b.generateSquareWave(.95)},{name:"99%",samples:b.generateSquareWave(.99)}])),a(b,"barEditorHeight",10),a(b,"modulators",he([{name:"none",pianoName:"None",maxRawVol:6,newNoteVol:6,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"No Mod Setting",promptDesc:["No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.","[$LO - $HI]"]},{name:"song volume",pianoName:"Volume",maxRawVol:100,newNoteVol:100,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"Song Volume",promptDesc:["This setting affects the overall volume of the song, just like the main volume slider.","At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"tempo",pianoName:"Tempo",maxRawVol:b.tempoMax-b.tempoMin,newNoteVol:Math.ceil((b.tempoMax-b.tempoMin)/2),forSong:!0,convertRealFactor:b.tempoMin,associatedEffect:12,promptName:"Song Tempo",promptDesc:["This setting controls the speed your song plays at, just like the tempo slider.","When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.","Note that you can make a 'swing' effect by rapidly changing between two tempo values.","[OVERWRITING] [$LO - $HI] [BPM]"]},{name:"song reverb",pianoName:"Reverb",maxRawVol:b.reverbRange*2,newNoteVol:b.reverbRange,forSong:!0,convertRealFactor:-b.reverbRange,associatedEffect:12,promptName:"Song Reverb",promptDesc:["This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.","At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"next bar",pianoName:"Next Bar",maxRawVol:1,newNoteVol:1,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"Go To Next Bar",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.","This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.","You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.","[$LO - $HI]"]},{name:"note volume",pianoName:"Note Vol.",maxRawVol:b.volumeRange,newNoteVol:Math.ceil(b.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-b.volumeRange/2),associatedEffect:12,promptName:"Note Volume",promptDesc:["This setting affects the volume of your instrument as if its note size had been scaled.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.","This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.","For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"pan",pianoName:"Pan",maxRawVol:b.panMax,newNoteVol:Math.ceil(b.panMax/2),forSong:!1,convertRealFactor:0,associatedEffect:2,promptName:"Instrument Panning",promptDesc:["This setting controls the panning of your instrument, just like the panning slider.","At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.","[OVERWRITING] [$LO - $HI] [L-R]"]},{name:"reverb",pianoName:"Reverb",maxRawVol:b.reverbRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:0,promptName:"Instrument Reverb",promptDesc:["This setting controls the reverb of your insturment, just like the reverb slider.","At $LO, your instrument will have no reverb. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"distortion",pianoName:"Distortion",maxRawVol:b.distortionRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:3,promptName:"Instrument Distortion",promptDesc:["This setting controls the amount of distortion for your instrument, just like the distortion slider.","At $LO, your instrument will have no distortion. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"fm slider 1",pianoName:"FM 1",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 1",promptDesc:["This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 2",pianoName:"FM 2",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 2",promptDesc:["This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 3",pianoName:"FM 3",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 3",promptDesc:["This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 4",pianoName:"FM 4",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 4",promptDesc:["This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm feedback",pianoName:"FM Feedback",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Feedback",promptDesc:["This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"pulse width",pianoName:"Pulse Width",maxRawVol:b.pulseWidthRange,newNoteVol:b.pulseWidthRange,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Pulse Width",promptDesc:["This setting controls the width of this instrument's pulse wave, just like the pulse width slider.","At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).","Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.","[OVERWRITING] [$LO - $HI] [%Duty]"]},{name:"detune",pianoName:"Detune",maxRawVol:b.detuneMax-b.detuneMin,newNoteVol:b.detuneCenter,forSong:!1,convertRealFactor:-b.detuneCenter,associatedEffect:8,promptName:"Instrument Detune",promptDesc:["This setting controls the detune for this instrument, just like the detune slider.","At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.","[OVERWRITING] [$LO - $HI] [cents]"]},{name:"vibrato depth",pianoName:"Vibrato Depth",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Depth",promptDesc:["This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.","At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.","[OVERWRITING] [$LO - $HI] [pitch ÷25]"]},{name:"song detune",pianoName:"Detune",maxRawVol:b.songDetuneMax-b.songDetuneMin,newNoteVol:Math.ceil((b.songDetuneMax-b.songDetuneMin)/2),forSong:!0,convertRealFactor:-250,associatedEffect:12,promptName:"Song Detune",promptDesc:["This setting controls the overall detune of the entire song. There is no associated slider.","At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.","[MULTIPLICATIVE] [$LO - $HI] [cents x4]"]},{name:"vibrato speed",pianoName:"Vibrato Speed",maxRawVol:30,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Speed",promptDesc:["This setting controls the speed your instrument will vibrato at, just like the slider.","A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"vibrato delay",pianoName:"Vibrato Delay",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Delay",promptDesc:["This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.","A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).","[OVERWRITING] [$LO - $HI] [beats ÷24]"]},{name:"arp speed",pianoName:"Arp Speed",maxRawVol:50,newNoteVol:10,forSong:!1,convertRealFactor:0,associatedEffect:11,promptName:"Arpeggio Speed",promptDesc:["This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.","Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.","[0-4]: x0, x1/16, x⅛, x⅕, x¼,","[5-9]: x⅓, x⅖, x½, x⅔, x¾,","[10-14]: x⅘, x0.9, x1, x1.1, x1.2,","[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,","[20-24]: x1.8, x1.9, x2, x2.1, x2.2,","[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,","[30-34]: x2.8, x2.9, x3, x3.1, x3.2,","[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,","[40-44]: x3.8, x3.9, x4, x4.15, x4.3,","[45-50]: x4.5, x4.8, x5, x5.5, x6, x8","[OVERWRITING] [$LO - $HI]"]},{name:"pan delay",pianoName:"Pan Delay",maxRawVol:20,newNoteVol:10,forSong:!1,convertRealFactor:0,associatedEffect:2,promptName:"Panning Delay",promptDesc:["This setting controls the delay applied to panning for your instrument, just like the pan delay slider.","With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.","[OVERWRITING] [$LO - $HI]"]},{name:"reset arp",pianoName:"Reset Arp",maxRawVol:1,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:11,promptName:"Reset Arpeggio",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.","This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.","[$LO - $HI]"]},{name:"eq filter",pianoName:"EQFlt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter",promptDesc:["This setting controls a few separate things for your instrument's EQ filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"note filter",pianoName:"N.Flt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter",promptDesc:["This setting controls a few separate things for your instrument's note filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"bit crush",pianoName:"Bitcrush",maxRawVol:b.bitcrusherQuantizationRange-1,newNoteVol:Math.round(b.bitcrusherQuantizationRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,promptName:"Instrument Bit Crush",promptDesc:["This setting controls the bit crush of your instrument, just like the bit crush slider.","At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"freq crush",pianoName:"Freq Crush",maxRawVol:b.bitcrusherFreqRange-1,newNoteVol:Math.round(b.bitcrusherFreqRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,promptName:"Instrument Frequency Crush",promptDesc:["This setting controls the frequency crush of your instrument, just like the freq crush slider.","At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo",pianoName:"Echo",maxRawVol:b.echoSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:6,promptName:"Instrument Echo Sustain",promptDesc:["This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.","At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo delay",pianoName:"Echo Delay",maxRawVol:b.echoDelayRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Instrument Echo Delay",promptDesc:["This setting controls the echo delay of your instrument, just like the echo delay slider.","At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.","[OVERWRITING] [$LO - $HI] [~beats ÷12]"]},{name:"chorus",pianoName:"Chorus",maxRawVol:b.chorusRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:1,promptName:"Instrument Chorus",promptDesc:["This setting controls the chorus strength of your instrument, just like the chorus slider.","At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt cut",pianoName:"EQFlt Cut",maxRawVol:b.filterSimpleCutRange-1,newNoteVol:b.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt peak",pianoName:"EQFlt Peak",maxRawVol:b.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt cut",pianoName:"N.Flt Cut",maxRawVol:b.filterSimpleCutRange-1,newNoteVol:b.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt peak",pianoName:"N.Flt Peak",maxRawVol:b.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"pitch shift",pianoName:"Pitch Shift",maxRawVol:b.pitchShiftRange-1,newNoteVol:b.pitchShiftCenter,forSong:!1,convertRealFactor:-b.pitchShiftCenter,associatedEffect:7,promptName:"Pitch Shift",promptDesc:["This setting controls the pitch offset of your instrument, just like the pitch shift slider.","At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.","[OVERWRITING] [$LO - $HI] [pitch]"]},{name:"sustain",pianoName:"Sustain",maxRawVol:b.stringSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Picked String Sustain",promptDesc:["This setting controls the sustain of your picked string instrument, just like the sustain slider.","At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"mix volume",pianoName:"Mix Vol.",maxRawVol:b.volumeRange,newNoteVol:Math.ceil(b.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-b.volumeRange/2),associatedEffect:12,promptName:"Mix Volume",promptDesc:["This setting affects the volume of your instrument as if its volume slider had been moved.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.","Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.","[MULTIPLICATIVE] [$LO - $HI]"]}]));let n=b;function qe(r){let e=0;for(let o=0;o<r.length;o++)e+=r[o];const t=e/r.length;for(let o=0;o<r.length;o++)r[o]-=t;return $t(r),r.push(0),new Float32Array(r)}function Te(r){let e=0;qe(r);for(let o=0;o<r.length-1;o++)e+=Math.abs(r[o]);const t=e/(r.length-1);for(let o=0;o<r.length-1;o++)r[o]=r[o]/t;return new Float32Array(r)}function $t(r){let e=0,t=new Float32Array(r.length);for(let o=0;o<r.length;o++)t[o]=e,e+=r[o];return t}function tn(r){let e=0;for(let t=0;t<r.length;t++){const o=r[t];r[t]=e,e+=o}}function nn(r){return r/(n.pulseWidthRange*2)}function Et(r,e,t){let o=n.chipNoises[r].samples;if(o==null){if(o=new Float32Array(n.chipNoiseLength+1),n.chipNoises[r].samples=o,r==0){let d=1;for(let f=0;f<n.chipNoiseLength;f++){o[f]=(d&1)*2-1;let x=d>>1;(d+x&1)==1&&(x+=16384),d=x}}else if(r==1)for(let d=0;d<n.chipNoiseLength;d++)o[d]=Math.random()*2-1;else if(r==2){let d=1;for(let f=0;f<n.chipNoiseLength;f++){o[f]=(d&1)*2-1;let x=d>>1;(d+x&1)==1&&(x+=32768),d=x}}else if(r==3){let d=1;for(let f=0;f<n.chipNoiseLength;f++){o[f]=(d&1)*2-1;let x=d>>1;(d+x&1)==1&&(x+=40),d=x}}else if(r==4)$e(o,n.chipNoiseLength,10,11,1,1,0),$e(o,n.chipNoiseLength,11,14,.6578,.6578,0),e(o,n.chipNoiseLength),t(o,1/Math.sqrt(n.chipNoiseLength));else if(r==5)for(var i=1,c=0;c<n.chipNoiseLength;c++){o[c]=(i&1)*2-1;var p=i>>1;(i+p&1)==1&&(p+=40),i=p}else if(r==6)$e(o,n.chipNoiseLength,1,10,1,1,0),$e(o,n.chipNoiseLength,20,14,-2,-2,0),e(o,n.chipNoiseLength),t(o,1/Math.sqrt(n.chipNoiseLength));else if(r==7)for(var i=1,c=0;c<n.chipNoiseLength;c++){o[c]=(i&1)*4*(Math.random()*14+1);var p=i>>1;(i+p&1)==1&&(p+=60),i=p}else if(r==8)for(var i=1,c=0;c<32768;c++){o[c]=(i&1)/2+.5;var p=i>>1;(i+p&1)==1&&(p-=40),i=p}else throw new Error("Unrecognized drum index: "+r);o[n.chipNoiseLength]=o[0]}return o}function $e(r,e,t,o,i,c,p){const x=Math.pow(2,t)|0,s=Math.min(e>>1,Math.pow(2,o)|0),k=Et(0,null,null);let u=0;for(let h=x;h<s;h++){let m=i+(c-i)*(Math.log2(h)-t)/(o-t),y=Math.pow(2,(m-1)*7+1)*m;y*=Math.pow(h/2048,p),u+=y,y*=k[h];const P=.61803398875*h*h*Math.PI*2;r[h]=Math.cos(P)*y,r[e-h]=Math.sin(P)*y}return u}function xt(r,e,t){let o=n.arpeggioPatterns[r-1];return o!=null?(r==2&&e==!1&&(o=[0,0,1,1]),o[t%o.length]):t%r}function he(r){const e={};for(let o=0;o<r.length;o++){const i=r[o];i.index=o,e[i.name]=i}const t=r;return t.dictionary=e,t}function gt(r){return(r&1024)!=0}function vt(r){return(r&2048)!=0}function bt(r){return(r&128)!=0}function St(r){return(r&256)!=0}function Ft(r){return(r&512)!=0}function ot(r){return(r&32)!=0}function Ze(r){return(r&8)!=0}function st(r){return(r&16)!=0}function Xe(r){return(r&4)!=0}function je(r){return(r&2)!=0}function _e(r){return(r&64)!=0}function Le(r){return(r&1)!=0}function an(r){const e=new Array(r.length),t={};for(let i=0;i<e.length;i++){e[i]=Object.assign([],r[i]);const c=e[i];c.index=i,t[c.name]=c}for(let i in t)t[i].samples=$t(t[i].samples);const o=e;return o.dictionary=t,o}const Fn=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);function Pn(r){return r.toFixed(2).replace(/\.?0*$/,"")}const ke=class ke{static valueToPreset(e){const t=e>>6,o=e&63;return ke.presetCategories[t].presets[o]}static midiProgramToPresetValue(e){for(let t=0;t<ke.presetCategories.length;t++){const o=ke.presetCategories[t];for(let i=0;i<o.presets.length;i++){const c=o.presets[i];if(c.generalMidi&&c.midiProgram==e)return(t<<6)+i}}return null}static nameToPresetValue(e){for(let t=0;t<ke.presetCategories.length;t++){const o=ke.presetCategories[t];for(let i=0;i<o.presets.length;i++)if(o.presets[i].name==e)return(t<<6)+i}return null}};a(ke,"version","2.5"),a(ke,"versionDisplayName","JummBox "+ke.version),a(ke,"releaseNotesURL","https://jummbus.bitbucket.io/patch_notes/"+ke.version+".html"),a(ke,"isOnMac",/^Mac/i.test(navigator.platform)||/Mac OS X/i.test(navigator.userAgent)||/^(iPhone|iPad|iPod)/i.test(navigator.platform)||/(iPhone|iPad|iPod)/i.test(navigator.userAgent)),a(ke,"ctrlSymbol",ke.isOnMac?"⌘":"Ctrl+"),a(ke,"ctrlName",ke.isOnMac?"command":"control"),a(ke,"presetCategories",he([{name:"Custom Instruments",presets:he([{name:"chip wave",customType:T.chip},{name:"FM (expert)",customType:T.fm},{name:"basic noise",customType:T.noise},{name:"spectrum",customType:T.spectrum},{name:"drumset",customType:T.drumset},{name:"harmonics",customType:T.harmonics},{name:"pulse width",customType:T.pwm},{name:"picked string",customType:T.pickedString},{name:"custom chip",customType:T.customChipWave}])},{name:"Retro Presets",presets:he([{name:"square wave",midiProgram:80,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"square",unison:"none",envelopes:[]}},{name:"triangle wave",midiProgram:71,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"triangle",unison:"none",envelopes:[]}},{name:"square lead",midiProgram:80,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"square",unison:"hum",envelopes:[]}},{name:"sawtooth lead 1",midiProgram:81,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"sawtooth",unison:"shimmer",envelopes:[]}},{name:"sawtooth lead 2",midiProgram:81,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1}],effects:["vibrato","aliasing"],vibrato:"light",transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[]}},{name:"chip noise",midiProgram:116,isNoise:!0,settings:{type:"noise",transition:"hard",effects:["aliasing"],chord:"arpeggio",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"steady",wave:"retro"}},{name:"FM twang",midiProgram:32,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM bass",midiProgram:36,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:11},{frequency:"1×",amplitude:7},{frequency:"1×",amplitude:9},{frequency:"20×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"twang 2",index:3}]}},{name:"FM flute",midiProgram:73,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM organ",midiProgram:16,settings:{type:"FM",eqFilter:[],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:14},{frequency:"2×",amplitude:14},{frequency:"1×",amplitude:11},{frequency:"2×",amplitude:11}],envelopes:[]}},{name:"NES Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",vibrato:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-23,-23,-23,-23,-22,-22,-22,-22,-21,-21,-21,-21,-20,-20,-20,-20,-19,-19,-19,-19,-18,-18,-18,-18,-17,-17,-17,-17,24,24,24,24,23,23,23,23,22,22,22,22,21,21,21,21,20,20,20,20,19,19,19,19,18,18,18,18,17,17,17,17]}},{name:"Gameboy Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-17,-15,-13,-13,-11,-11,-11,-9,-9,-9,-9,-7,-7,-7,-7,-7,-5,-5,-5,-5,-5,-5,-3,-3,-3,-3,-3,-3,-3,-3,24,20,17,15,13,13,11,11,11,9,9,9,9,7,7,7,7,7,5,5,5,5,5,5,3,3,3,3,3,3,3,3]}},{name:"VRC6 Sawtooth",midiProgram:81,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-16,-13,-10,-8,-6,-5,-4,-4,0,0,0,0,4,4,4,4,4,4,8,8,8,8,8,8,8,8,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,20,20,20,20,20,20,20,20,24,24,24,24,24,24,24,24,24,24,24,24]}},{name:"Atari Square",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-23,-23,-23,-22,-22,-22,-21,-21,-21,-20,-20,-20,-19,-19,-19,-18,-18,-18,-17,-17,-17,-16,-16,-16,-15,-15,-15,-14,-14,-14,-13,-13,-13,24,24,24,23,23,23,22,22,22,21,21,21,20,20,20,19,19,19,18,18,18,17,17,17,16,16,15,15]}},{name:"Atari Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,24,24,24,24,24,-24,-24,-24,-24,24,24,-24,-24,24,24]}},{name:"Sunsoft Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[24,24,15,15,9,9,-4,-4,0,0,-13,-13,-19,-19,-24,-24,-24,-24,-10,-10,0,0,-7,-7,-7,-7,0,0,6,6,-4,-4,3,3,-4,-4,3,3,3,3,9,9,15,15,15,15,6,6,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,3,3,12,12,24,24]}}])},{name:"Keyboard Presets",presets:he([{name:"grand piano 1",midiProgram:0,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,86,86,71,71,71,0,86,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}},{name:"bright piano",midiProgram:1,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.7071},{type:"high-pass",cutoffHz:148.65,linearGain:.5},{type:"peak",cutoffHz:3363.59,linearGain:1.4142}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,86,86,71,71,0,71,71,71,71,71,71,14,57,57,57,57,57,57,29,57,57,57,57,57,57,57],unison:"piano",stringSustain:86,envelopes:[]}},{name:"electric grand",midiProgram:2,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"1/8 pulse",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"honky-tonk piano",midiProgram:3,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,71,86,71,43,71,43,43,57,57,57,29,57,57,57,57,57,57,43,57,57,57,43,43,43,43],unison:"honky tonk",stringSustain:71,envelopes:[]}},{name:"electric piano 1",midiProgram:4,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",harmonics:[86,100,100,71,71,57,57,43,43,43,29,29,29,14,14,14,0,0,0,0,0,57,0,0,0,0,0,0],unison:"none",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"electric piano 2",midiProgram:5,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:9},{frequency:"16×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"harpsichord",midiProgram:6,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:250,linearGain:.3536},{type:"peak",cutoffHz:11313.71,linearGain:2.8284}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,100,86,57,86,86,86,86,57,57,71,71,86,86,71,71,86,86,71,71,71,71,71,71,71,71,71],unison:"none",stringSustain:79,envelopes:[]}},{name:"clavinet",midiProgram:7,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.3536}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"3⟲",feedbackAmplitude:6,operators:[{frequency:"3×",amplitude:15},{frequency:"~1×",amplitude:6},{frequency:"8×",amplitude:4},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"},{target:"feedbackAmplitude",envelope:"twang 2"}]}},{name:"dulcimer",midiProgram:15,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,100,86,100,86,57,100,100,86,100,86,100,86,100,71,57,71,71,100,86,71,86,86,100,86,86,86],unison:"piano",stringSustain:79,envelopes:[]}},{name:"grand piano 2",midiProgram:0,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,86,86,86,86,71,71,57,0,57,29,43,57,57,57,43,43,0,29,43,43,43,43,43,43,29,0,29],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}}])},{name:"Idiophone Presets",presets:he([{name:"celesta",midiProgram:8,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~1×",amplitude:11,envelope:"custom"},{frequency:"8×",amplitude:6,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"3×",amplitude:1,envelope:"twang 2"}]}},{name:"glockenspiel",midiProgram:9,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,feedbackEnvelope:"decay 1",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"5×",amplitude:11,envelope:"custom"},{frequency:"8×",amplitude:7,envelope:"custom"},{frequency:"20×",amplitude:2,envelope:"twang 1"}]}},{name:"music box 1",midiProgram:10,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,0,0,100,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,71,0],unison:"none",stringSustain:64,envelopes:[]}},{name:"music box 2",midiProgram:10,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:.7071}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,57,57,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0],unison:"none",stringSustain:29,envelopes:[]}},{name:"vibraphone",midiProgram:11,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:3,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:9,envelope:"custom"},{frequency:"9×",amplitude:3,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"}]}},{name:"marimba",midiProgram:12,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"4×",amplitude:6,envelope:"custom"},{frequency:"13×",amplitude:6,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"kalimba",midiProgram:108,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:11,envelope:"custom"},{frequency:"5×",amplitude:3,envelope:"twang 2"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"xylophone",midiProgram:13,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"11×",amplitude:9,envelope:"custom"},{frequency:"20×",amplitude:6,envelope:"twang 1"}]}},{name:"tubular bell",midiProgram:14,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:96,chord:"strum",harmonics:[43,71,0,100,0,100,0,86,0,0,86,0,14,71,14,14,57,14,14,43,14,14,43,14,14,43,14,14],unison:"shimmer",stringSustain:86,envelopes:[]}},{name:"bell synth",midiProgram:14,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:10,envelope:"custom"},{frequency:"7×",amplitude:6,envelope:"twang 3"},{frequency:"20×",amplitude:1,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"rain drop",midiProgram:96,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"1×",amplitude:6,envelope:"tremolo1"}]}},{name:"crystal",midiProgram:98,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"delayed",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"}]}},{name:"tinkle bell",midiProgram:112,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"~2×",amplitude:7,envelope:"custom"},{frequency:"5×",amplitude:7,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"16×",amplitude:7,envelope:"custom"}]}},{name:"agogo",midiProgram:113,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→4",feedbackAmplitude:15,feedbackEnvelope:"decay 1",operators:[{frequency:"2×",amplitude:9,envelope:"custom"},{frequency:"5×",amplitude:6,envelope:"custom"},{frequency:"8×",amplitude:9,envelope:"custom"},{frequency:"13×",amplitude:11,envelope:"custom"}]}}])},{name:"Guitar Presets",presets:he([{name:"nylon guitar",midiProgram:24,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"5×",amplitude:2,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"steady"}]}},{name:"steel guitar",midiProgram:25,generalMidi:!0,settings:{type:"Picked String",eqFilter:[],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,86,71,71,71,86,86,71,57,43,43,43,57,57,57,57,57,43,43,43,43,43,43,43,43,43,43],unison:"none",stringSustain:71,envelopes:[]}},{name:"jazz guitar",midiProgram:26,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,57,71,71,43,57,71,57,43,29,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"clean guitar",midiProgram:27,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[86,100,100,100,86,57,86,100,100,100,71,57,43,71,86,71,57,57,71,71,71,71,57,57,57,57,57,43]}},{name:"muted guitar",midiProgram:28,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:4,envelope:"twang 3"},{frequency:"4×",amplitude:4,envelope:"twang 2"},{frequency:"16×",amplitude:4,envelope:"twang 1"}]}}])},{name:"Picked Bass Presets",presets:he([{name:"acoustic bass",midiProgram:32,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,71,71,71,57,57,57,57,43,43,43,43,43,29,29,29,29,29,29,14,14,14,14,14,14,14]}},{name:"fingered bass",midiProgram:33,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,57,71,43,57,29,29,29,29,29,29,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0]}},{name:"picked bass",midiProgram:34,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:1,envelope:"twang 3"},{frequency:"1×",amplitude:9,envelope:"steady"}]}},{name:"fretless bass",midiProgram:35,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"flare 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,71,57,57,71,71,71,57,57,57,57,57,57,57,43,43,43,43,43,43,43,43,29,29,14]}},{name:"slap bass 1",midiProgram:36,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,100,100,100,86,71,57,29,29,43,43,57,71,57,29,29,43,57,57,57,43,43,43,57,71,71,71,71]}},{name:"slap bass 2",midiProgram:37,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"13×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"bass synth 1",midiProgram:38,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲ 4⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 1"},{frequency:"~1×",amplitude:13,envelope:"twang 2"}]}},{name:"bass synth 2",midiProgram:39,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1e3,filterResonance:57,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1→2",feedbackAmplitude:4,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"steady"},{frequency:"3×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"bass & lead",midiProgram:87,generalMidi:!0,settings:{type:"chip",transition:"hard",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:86,filterEnvelope:"twang 2",wave:"sawtooth",interval:"shimmer",vibrato:"none"}},{name:"dubstep yoi yoi",midiProgram:87,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.7071}],effects:["note filter","bitcrusher"],noteFilter:[{type:"low-pass",cutoffHz:594.6,linearGain:11.3137}],bitcrusherOctave:1.5,bitcrusherQuantization:0,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"arpeggio",wave:"sawtooth",unison:"none",envelopes:[{target:"noteFilterFreq",envelope:"flare 2",index:0}]}}])},{name:"Picked String Presets",presets:he([{name:"pizzicato strings",midiProgram:45,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"3×",amplitude:11,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:10,envelope:"steady"}]}},{name:"harp",midiProgram:46,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"4×",amplitude:6,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:6,envelope:"steady"}]}},{name:"sitar",midiProgram:104,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:8e3,filterResonance:57,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 3"},{frequency:"9×",amplitude:3,envelope:"twang 3"},{frequency:"16×",amplitude:9,envelope:"swell 3"}]}},{name:"banjo",midiProgram:105,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"11×",amplitude:3,envelope:"twang 3"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"ukulele",midiProgram:105,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"9×",amplitude:4,envelope:"twang 2"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"shamisen",midiProgram:106,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"steady"},{frequency:"16×",amplitude:4,envelope:"twang 3"},{frequency:"1×",amplitude:7,envelope:"steady"}]}},{name:"koto",midiProgram:107,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 2",operators:[{frequency:"~1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:10,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"twang 3"},{frequency:"~2×",amplitude:8,envelope:"twang 3"}]}}])},{name:"Distortion Presets",presets:he([{name:"overdrive guitar",midiProgram:29,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:840.9,linearGain:.5}],effects:["note filter","distortion"],noteFilter:[{type:"high-pass",cutoffHz:297.3,linearGain:2},{type:"low-pass",cutoffHz:2378.41,linearGain:.7071}],distortion:71,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"distortion guitar",midiProgram:30,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:594.6,linearGain:.3536},{type:"peak",cutoffHz:1e3,linearGain:.25}],effects:["note filter","distortion","reverb"],noteFilter:[{type:"high-pass",cutoffHz:353.55,linearGain:2},{type:"low-pass",cutoffHz:2e3,linearGain:1}],distortion:86,reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"charango synth",midiProgram:84,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:1}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2→3→4",feedbackAmplitude:8,operators:[{frequency:"3×",amplitude:13},{frequency:"~1×",amplitude:5},{frequency:"4×",amplitude:6},{frequency:"3×",amplitude:7}],envelopes:[{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"guitar harmonics",midiProgram:31,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3)←4",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"4×",amplitude:12},{frequency:"16×",amplitude:5},{frequency:"1×",amplitude:2},{frequency:"~1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:1},{target:"operatorAmplitude",envelope:"punch",index:2},{target:"operatorAmplitude",envelope:"twang 1",index:3}]}},{name:"PWM overdrive",midiProgram:29,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1.4142}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:17.67767,envelopes:[{target:"pulseWidth",envelope:"punch"}]}},{name:"PWM distortion",midiProgram:30,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:2}],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:50,envelopes:[{target:"pulseWidth",envelope:"swell 1"}]}},{name:"FM overdrive",midiProgram:29,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:2,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"~2×",amplitude:6},{frequency:"1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"twang 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3},{target:"feedbackAmplitude",envelope:"punch"}]}},{name:"FM distortion",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:4,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:11},{frequency:"1×",amplitude:9},{frequency:"~2×",amplitude:4}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3}]}}])},{name:"Bellows Presets",presets:he([{name:"drawbar organ 1",midiProgram:16,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,86,0,86,0,0,0,86,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"drawbar organ 2",midiProgram:16,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,29,71,86,71,14,0,100,0,0,0,86,0,0,0,71,0,0,0,57,0,0,0,29,0,0,0,0]}},{name:"percussive organ",midiProgram:17,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",transition:"hard",effects:"reverb",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"punch",vibrato:"light",algorithm:"1 2 3 4",feedbackType:"1→3 2→4",feedbackAmplitude:7,feedbackEnvelope:"decay 1",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"custom"},{frequency:"3×",amplitude:8,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"custom"}]}},{name:"rock organ",midiProgram:18,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"punch",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,feedbackEnvelope:"flare 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:5,envelope:"steady"}]}},{name:"pipe organ",midiProgram:19,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"2×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"}]}},{name:"reed organ",midiProgram:20,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[71,86,100,86,71,100,57,71,71,71,43,43,43,71,43,71,57,57,57,57,57,57,57,29,43,29,29,14]}},{name:"accordion",midiProgram:21,generalMidi:!0,settings:{type:"chip",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"swell 1",wave:"double saw",interval:"honky tonk",vibrato:"none"}},{name:"bandoneon",midiProgram:23,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",interval:"hum",vibrato:"none",harmonics:[86,86,86,57,71,86,57,71,71,71,57,43,57,43,71,43,71,57,57,43,43,43,57,43,43,29,29,29]}},{name:"bagpipe",midiProgram:109,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"punch",interval:"hum",vibrato:"none",harmonics:[71,86,86,100,100,86,57,100,86,71,71,71,57,57,57,71,57,71,57,71,43,57,57,43,43,43,43,43]}}])},{name:"String Presets",presets:he([{name:"violin 1",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"delayed",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1→2",feedbackAmplitude:5,operators:[{frequency:"4×",amplitude:9},{frequency:"3×",amplitude:9},{frequency:"2×",amplitude:7},{frequency:"7×",amplitude:5}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"viola",midiProgram:41,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"}]}},{name:"cello",midiProgram:42,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.1768},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"peak",cutoffHz:4756.83,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:16e3,linearGain:.0884}],reverb:67,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:12,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"16×",amplitude:5},{frequency:"~1×",amplitude:10},{frequency:"1×",amplitude:9},{frequency:"6×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3}]}},{name:"contrabass",midiProgram:43,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"16×",amplitude:5,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"6×",amplitude:3,envelope:"swell 1"}]}},{name:"fiddle",midiProgram:110,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←(3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"16×",amplitude:3,envelope:"steady"}]}},{name:"tremolo strings",midiProgram:44,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:0,filterEnvelope:"tremolo4",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:12,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"~2×",amplitude:8,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"custom"},{frequency:"7×",amplitude:8,envelope:"custom"}]}},{name:"strings",midiProgram:48,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"3×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:3,envelope:"swell 1"}]}},{name:"slow strings",midiProgram:49,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:1414,filterResonance:0,filterEnvelope:"swell 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:6,feedbackEnvelope:"flare 3",operators:[{frequency:"4×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:10,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"swell 1"}]}},{name:"strings synth 1",midiProgram:50,generalMidi:!0,settings:{type:"chip",transition:"soft fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:1414,filterResonance:43,filterEnvelope:"steady",wave:"sawtooth",interval:"hum",vibrato:"delayed"}},{name:"strings synth 2",midiProgram:51,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:12,feedbackEnvelope:"swell 1",operators:[{frequency:"3×",amplitude:6,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"custom"}]}},{name:"orchestra hit 1",midiProgram:55,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"custom",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"twang 3"},{frequency:"2×",amplitude:15,envelope:"flare 3"},{frequency:"4×",amplitude:15,envelope:"flare 2"},{frequency:"8×",amplitude:15,envelope:"flare 1"}]}},{name:"violin 2",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:2828,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"light",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:8,envelope:"swell 1"}]}},{name:"orchestra hit 2",midiProgram:55,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"decay 1",vibrato:"delayed",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"3×",amplitude:12,envelope:"custom"},{frequency:"4×",amplitude:14,envelope:"custom"}]}}])},{name:"Vocal Presets",presets:he([{name:"choir soprano",midiProgram:94,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25},{type:"low-pass",cutoffHz:6727.17,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:33,fadeInSeconds:.0413,fadeOutTicks:24,harmonics:[100,100,86,57,29,29,57,71,57,29,14,14,14,29,43,57,43,29,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"choir tenor",midiProgram:52,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"choir bass",midiProgram:52,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:11.3137},{type:"peak",cutoffHz:594.6,linearGain:5.6569},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo soprano",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,86,43,14,14,57,71,57,14,14,14,14,14,43,57,43,14,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"solo tenor",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo bass",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:5.6569},{type:"peak",cutoffHz:594.6,linearGain:8},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:8},{type:"high-pass",cutoffHz:210.22,linearGain:1.4142}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,transition:"normal",fadeInSeconds:.0263,fadeOutTicks:12,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"voice ooh",midiProgram:53,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:57,filterEnvelope:"steady",interval:"union",vibrato:"shaky",harmonics:[100,57,43,43,14,14,0,0,0,14,29,29,14,0,14,29,29,14,0,0,0,0,0,0,0,0,0,0]}},{name:"voice synth",midiProgram:54,generalMidi:!0,settings:{type:"chip",transition:"medium fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:57,filterEnvelope:"steady",wave:"rounded",interval:"union",vibrato:"light"}},{name:"vox synth lead",midiProgram:85,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",vibrato:"light",algorithm:"(1 2 3)←4",feedbackType:"1→2→3→4",feedbackAmplitude:2,feedbackEnvelope:"punch",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"9×",amplitude:5,envelope:"custom"},{frequency:"20×",amplitude:1,envelope:"custom"},{frequency:"~1×",amplitude:4,envelope:"steady"}]}},{name:"tiny robot",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"delayed",reverb:33,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"2×",amplitude:15},{frequency:"1×",amplitude:7},{frequency:"~1×",amplitude:7},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:1},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"yowie",midiProgram:85,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:86,filterEnvelope:"tremolo5",vibrato:"none",algorithm:"1←2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:12,feedbackEnvelope:"tremolo3",operators:[{frequency:"2×",amplitude:12,envelope:"custom"},{frequency:"16×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"mouse",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"light",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,operators:[{frequency:"2×",amplitude:13},{frequency:"5×",amplitude:12},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteVolume",envelope:"note size"},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"gumdrop",midiProgram:85,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:15,envelope:"punch"},{frequency:"4×",amplitude:15,envelope:"punch"},{frequency:"7×",amplitude:15,envelope:"punch"},{frequency:"1×",amplitude:10,envelope:"twang 1"}]}},{name:"echo drop",midiProgram:102,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:11,envelope:"custom"},{frequency:"~1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:2,envelope:"steady"},{frequency:"16×",amplitude:5,envelope:"swell 3"}]}},{name:"dark choir",midiProgram:85,settings:{type:"spectrum",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",spectrum:[43,14,14,14,14,14,14,100,14,14,14,57,14,14,100,14,43,14,43,14,14,43,14,29,14,29,14,14,29,0]}}])},{name:"Brass Presets",presets:he([{name:"trumpet",midiProgram:56,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:5,envelope:"flare 2"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"trombone",midiProgram:57,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:7,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"tuba",midiProgram:58,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"muted trumpet",midiProgram:59,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:2.8284},{type:"peak",cutoffHz:4e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:13},{frequency:"1×",amplitude:5},{frequency:"9×",amplitude:5},{frequency:"13×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"french horn",midiProgram:60,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1},{type:"peak",cutoffHz:2378.41,linearGain:2.8284}],effects:["reverb"],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:8}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"swell 1"}]}},{name:"brass section",midiProgram:61,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"swell 1"},{frequency:"~1×",amplitude:10,envelope:"swell 1"}]}},{name:"brass synth 1",midiProgram:62,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:11,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"flare 1"},{frequency:"~1×",amplitude:8,envelope:"flare 2"}]}},{name:"brass synth 2",midiProgram:63,generalMidi:!0,settings:{type:"FM",transition:"soft",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"flare 1"},{frequency:"~1×",amplitude:7,envelope:"flare 1"}]}},{name:"pulse brass",midiProgram:62,settings:{type:"PWM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",pulseWidth:50,pulseEnvelope:"flare 3",vibrato:"none"}}])},{name:"Reed Presets",presets:he([{name:"soprano sax",midiProgram:64,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"4×",amplitude:4,envelope:"swell 1"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"5×",amplitude:4,envelope:"punch"}]}},{name:"alto sax",midiProgram:65,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:4,feedbackEnvelope:"punch",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"4×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:12,envelope:"steady"}]}},{name:"tenor sax",midiProgram:66,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:12,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"steady"},{frequency:"1×",amplitude:3,envelope:"steady"},{frequency:"8×",amplitude:3,envelope:"steady"}]}},{name:"baritone sax",midiProgram:67,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"swell 2",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"8×",amplitude:4,envelope:"steady"},{frequency:"4×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:4,envelope:"punch"}]}},{name:"sax synth",midiProgram:64,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"shehnai",midiProgram:111,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:3,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"oboe",midiProgram:68,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 1",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"tremolo5",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:2,envelope:"steady"}]}},{name:"english horn",midiProgram:69,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"punch"},{frequency:"8×",amplitude:4,envelope:"steady"}]}},{name:"bassoon",midiProgram:70,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:707,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"clarinet",midiProgram:71,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}},{name:"harmonica",midiProgram:22,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:29,filterEnvelope:"swell 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:9,feedbackEnvelope:"tremolo5",operators:[{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"~2×",amplitude:2,envelope:"twang 3"},{frequency:"1×",amplitude:0,envelope:"steady"}]}}])},{name:"Flute Presets",presets:he([{name:"flute 1",midiProgram:73,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"4⟲",feedbackAmplitude:7,feedbackEnvelope:"decay 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"2×",amplitude:4,envelope:"steady"},{frequency:"1×",amplitude:3,envelope:"steady"},{frequency:"~1×",amplitude:1,envelope:"punch"}]}},{name:"recorder",midiProgram:74,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 2",interval:"union",vibrato:"none",harmonics:[100,43,57,43,57,43,43,43,43,43,43,43,43,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"whistle",midiProgram:78,generalMidi:!0,settings:{type:"harmonics",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"ocarina",midiProgram:79,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,14,57,14,29,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"piccolo",midiProgram:72,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"4⟲",feedbackAmplitude:15,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:5,envelope:"punch"}]}},{name:"shakuhachi",midiProgram:77,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"steady",vibrato:"delayed",algorithm:"1←(2 3←4)",feedbackType:"3→4",feedbackAmplitude:15,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:4,envelope:"twang 1"},{frequency:"20×",amplitude:15,envelope:"steady"}]}},{name:"pan flute",midiProgram:75,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"high-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,fadeInSeconds:.0125,fadeOutTicks:-3,spectrum:[100,0,0,0,0,0,0,14,0,0,0,71,0,0,14,0,57,0,29,14,29,14,14,29,14,29,14,14,29,14],envelopes:[{target:"noteFilterFreq",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"punch"}]}},{name:"blown bottle",midiProgram:76,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:4,envelope:"custom"},{frequency:"6×",amplitude:2,envelope:"custom"},{frequency:"11×",amplitude:2,envelope:"custom"}]}},{name:"calliope",midiProgram:82,generalMidi:!0,settings:{type:"spectrum",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"steady",spectrum:[100,0,0,0,0,0,0,86,0,0,0,71,0,0,57,0,43,0,29,14,14,29,14,14,14,14,14,14,14,14]}},{name:"chiffer",midiProgram:83,generalMidi:!0,settings:{type:"spectrum",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"punch",spectrum:[86,0,0,0,0,0,0,71,0,0,0,71,0,0,57,0,57,0,43,14,14,43,14,29,14,29,29,29,29,14]}},{name:"breath noise",midiProgram:121,generalMidi:!0,settings:{type:"spectrum",eqFilter:[],effects:["chord type","note filter","reverb"],chord:"strum",noteFilter:[{type:"high-pass",cutoffHz:840.9,linearGain:.3536},{type:"low-pass",cutoffHz:16e3,linearGain:.3536}],reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,spectrum:[71,0,0,0,0,0,0,29,0,0,0,71,0,0,29,0,100,29,14,29,100,29,100,14,14,71,0,29,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"}]}},{name:"flute 2",midiProgram:73,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"seamless",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}}])},{name:"Pad Presets",presets:he([{name:"new age pad",midiProgram:88,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"2×",amplitude:14},{frequency:"~1×",amplitude:4},{frequency:"6×",amplitude:3},{frequency:"13×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"swell 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"feedbackAmplitude",envelope:"swell 3"}]}},{name:"warm pad",midiProgram:89,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:7,operators:[{frequency:"1×",amplitude:14},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"},{target:"operatorAmplitude",envelope:"swell 1",index:1}]}},{name:"polysynth pad",midiProgram:90,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"honky tonk",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"space voice pad",midiProgram:91,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569},{type:"peak",cutoffHz:2828.43,linearGain:5.6569},{type:"peak",cutoffHz:1414.21,linearGain:.1768}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:8},{frequency:"3×",amplitude:7},{frequency:"11×",amplitude:2}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:3},{target:"feedbackAmplitude",envelope:"swell 2"}]}},{name:"bowed glass pad",midiProgram:92,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:12},{frequency:"3×",amplitude:7},{frequency:"7×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"flare 3",index:3}]}},{name:"metallic pad",midiProgram:93,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:13,operators:[{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:9},{frequency:"1×",amplitude:7},{frequency:"11×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"swell 2",index:2},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"sweep pad",midiProgram:95,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"atmosphere",midiProgram:99,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["chorus","reverb"],chorus:100,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",algorithm:"1←(2 3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:14},{frequency:"~1×",amplitude:10},{frequency:"3×",amplitude:7},{frequency:"1×",amplitude:7}],envelopes:[{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"twang 2",index:2},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"brightness",midiProgram:100,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:2}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",harmonics:[100,86,86,86,43,57,43,71,43,43,43,57,43,43,57,71,57,43,29,43,57,57,43,29,29,29,29,14],unison:"octave",stringSustain:86,envelopes:[]}},{name:"goblins",midiProgram:101,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2828.43,linearGain:11.3137}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:10,operators:[{frequency:"1×",amplitude:15},{frequency:"4×",amplitude:5},{frequency:"1×",amplitude:10},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 2"},{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"feedbackAmplitude",envelope:"flare 3"}]}},{name:"sci-fi",midiProgram:103,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:9513.66,linearGain:2.8284}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"~1×",amplitude:13},{frequency:"2×",amplitude:10},{frequency:"5×",amplitude:5},{frequency:"11×",amplitude:8}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"tremolo5",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"flutter pad",midiProgram:90,settings:{type:"FM",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:9,operators:[{frequency:"1×",amplitude:13},{frequency:"5×",amplitude:7},{frequency:"7×",amplitude:5},{frequency:"~1×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"operatorAmplitude",envelope:"punch",index:3}]}},{name:"feedback pad",midiProgram:89,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2378.41,linearGain:8}],effects:[],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"custom interval",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:15}],envelopes:[{target:"feedbackAmplitude",envelope:"swell 2"}]}}])},{name:"Drum Presets",presets:he([{name:"standard drumset",midiProgram:116,isNoise:!0,settings:{type:"drumset",effects:"reverb",drums:[{filterEnvelope:"twang 1",spectrum:[57,71,71,86,86,86,71,71,71,71,57,57,57,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29,29]},{filterEnvelope:"twang 1",spectrum:[0,0,0,100,71,71,57,86,57,57,57,71,43,43,57,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,100,57,43,43,29,57,43,29,71,43,43,43,43,57,43,43,43,43,43,43,43,43,29,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,0,71,57,43,43,43,57,57,43,29,57,43,43,43,29,43,57,43,43,43,43,43,43,29,43,43]},{filterEnvelope:"decay 2",spectrum:[0,14,29,43,86,71,29,43,43,43,43,29,71,29,71,29,43,43,43,43,57,43,43,57,43,43,43,57,57,57]},{filterEnvelope:"decay 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,57,71,71,71,71,71,71,71,71,57,57,57,57,43,43,43]},{filterEnvelope:"twang 3",spectrum:[43,43,43,71,29,29,43,43,43,29,43,43,43,29,29,43,43,29,29,29,57,14,57,43,43,57,43,43,57,57]},{filterEnvelope:"decay 3",spectrum:[29,43,43,43,43,29,29,43,29,29,43,29,14,29,43,29,43,29,57,29,43,57,43,71,43,71,57,57,71,71]},{filterEnvelope:"twang 3",spectrum:[43,29,29,43,29,29,29,57,29,29,29,57,43,43,29,29,57,43,43,43,71,43,43,71,57,71,71,71,71,71]},{filterEnvelope:"decay 3",spectrum:[57,57,57,43,57,57,43,43,57,43,43,43,71,57,43,57,86,71,57,86,71,57,86,100,71,86,86,86,86,86]},{filterEnvelope:"flare 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,71,71,86,86,100,100,100,100,100,100,100,100,86,57,29,0]},{filterEnvelope:"decay 2",spectrum:[14,14,14,14,29,14,14,29,14,43,14,43,57,86,57,57,100,57,43,43,57,100,57,43,29,14,0,0,0,0]}]}},{name:"steel pan",midiProgram:114,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"high-pass",cutoffHz:62.5,linearGain:.1768}],effects:["note filter","chorus","reverb"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],chorus:67,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"~1×",amplitude:14},{frequency:"7×",amplitude:3},{frequency:"3×",amplitude:5},{frequency:"4×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay 2"},{target:"operatorAmplitude",envelope:"flare 1",index:1},{target:"operatorAmplitude",envelope:"flare 2",index:2},{target:"operatorAmplitude",envelope:"swell 2",index:3}]}},{name:"steel pan synth",midiProgram:114,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3←4",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"~1×",amplitude:12},{frequency:"2×",amplitude:15},{frequency:"4×",amplitude:14},{frequency:"~1×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"operatorAmplitude",envelope:"note size",index:0},{target:"operatorAmplitude",envelope:"note size",index:1},{target:"operatorAmplitude",envelope:"flare 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"flare 1"}]}},{name:"timpani",midiProgram:47,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"peak",cutoffHz:6727.17,linearGain:5.6569}],effects:["pitch shift","note filter","reverb"],pitchShiftSemitones:15,noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[100,0,0,0,86,0,0,71,0,14,43,14,43,43,0,29,43,29,29,29,43,29,43,29,43,43,43,43,43,43],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"pitchShift",envelope:"twang 1"}]}},{name:"dark strike",midiProgram:47,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[0,0,14,14,14,29,29,43,43,86,43,43,43,29,86,29,29,29,86,29,14,14,14,14,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"woodblock",midiProgram:115,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",spectrum:[0,14,29,43,43,57,86,86,71,57,57,43,43,57,86,86,43,43,71,57,57,57,57,57,86,86,71,71,71,71]}},{name:"taiko drum",midiProgram:116,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"twang 1",spectrum:[71,100,100,43,43,71,71,43,43,43,43,43,43,57,29,57,43,57,43,43,57,43,43,43,43,43,43,43,43,43]}},{name:"melodic drum",midiProgram:117,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"twang 1",spectrum:[100,71,71,57,57,43,43,71,43,43,43,57,43,43,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29]}},{name:"drum synth",midiProgram:118,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"decay 1",spectrum:[100,86,71,57,43,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29]}},{name:"tom-tom",midiProgram:116,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",spectrum:[100,29,14,0,0,86,14,43,29,86,29,14,29,57,43,43,43,43,57,43,43,43,29,57,43,43,43,43,43,43]}},{name:"metal pipe",midiProgram:117,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 2",spectrum:[29,43,86,43,43,43,43,43,100,29,14,14,100,14,14,0,0,0,0,0,14,29,29,14,0,0,14,29,0,0]}},{name:"synth kick",midiProgram:47,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-6,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"8×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorFrequency",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"twang 2"}]}}])},{name:"Novelty Presets",presets:he([{name:"guitar fret noise",midiProgram:120,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"high-pass",cutoffHz:1e3,linearGain:.1768}],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",spectrum:[0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,29,14,0,0,43,0,43,0,71,43,0,57,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"},{target:"noteVolume",envelope:"twang 2"}]}},{name:"fifth saw lead",midiProgram:86,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1.4142}],chorus:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"fifth swell",midiProgram:86,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2e3,linearGain:2}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"}]}},{name:"soundtrack",midiProgram:97,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],chorus:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"reverse cymbal",midiProgram:119,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"none",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[29,57,57,29,57,57,29,29,43,29,29,43,29,29,57,57,14,57,14,57,71,71,57,86,57,100,86,86,86,86]}},{name:"seashore",midiProgram:122,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",transition:"soft fade",effects:"reverb",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"swell 3",spectrum:[14,14,29,29,43,43,43,57,57,57,57,57,57,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,57]}},{name:"bird tweet",midiProgram:123,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["chord type","vibrato","reverb"],chord:"strum",vibrato:"heavy",reverb:67,fadeInSeconds:.0575,fadeOutTicks:-6,harmonics:[0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"hum",envelopes:[{target:"noteVolume",envelope:"decay 1"}]}},{name:"telephone ring",midiProgram:124,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"arpeggio",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:12},{frequency:"1×",amplitude:4},{frequency:"20×",amplitude:1},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"tremolo4"},{target:"operatorAmplitude",envelope:"tremolo1",index:1}]}},{name:"helicopter",midiProgram:125,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"seamless",chord:"arpeggio",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"tremolo4",spectrum:[14,43,43,57,57,57,71,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,71,71,71,57,57]}},{name:"applause",midiProgram:126,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[14,14,29,29,29,43,43,57,71,71,86,86,86,71,71,57,57,57,71,86,86,86,86,86,71,71,57,57,57,57]}},{name:"gunshot",midiProgram:127,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1414,filterResonance:29,filterEnvelope:"twang 1",spectrum:[14,29,43,43,57,57,57,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,57,57,57,57,43]}},{name:"scoot",midiProgram:92,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:707.11,linearGain:4}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",wave:"double saw",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"}]}},{name:"buzz saw",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:4,operators:[{frequency:"5×",amplitude:13},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:6},{frequency:"11×",amplitude:12}],envelopes:[]}},{name:"mosquito",midiProgram:93,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2}],effects:["vibrato"],vibrato:"shaky",transition:"normal",fadeInSeconds:.0575,fadeOutTicks:-6,chord:"simultaneous",pulseWidth:4.41942,envelopes:[{target:"pulseWidth",envelope:"tremolo6"}]}},{name:"breathing",midiProgram:126,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 2",spectrum:[14,14,14,29,29,29,29,29,43,29,29,43,43,43,29,29,71,43,86,86,57,100,86,86,86,86,71,86,71,57]}},{name:"klaxon synth",midiProgram:125,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"noise",effects:"reverb",transition:"slide",chord:"harmony",filterCutoffHz:2e3,filterResonance:86,filterEnvelope:"steady",wave:"buzz"}},{name:"theremin",midiProgram:40,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.7071}],effects:["vibrato","reverb"],vibrato:"heavy",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-6,chord:"simultaneous",harmonics:[100,71,57,43,29,29,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"none",envelopes:[]}},{name:"sonar ping",midiProgram:121,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",spectrum:[100,43,29,29,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}}])}]));let Pt=ke;var wt=function(r){var e=typeof Symbol=="function"&&Symbol.iterator,t=e&&r[e],o=0;if(t)return t.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&o>=r.length&&(r=void 0),{value:r&&r[o++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},rn=function(r,e){var t=typeof Symbol=="function"&&r[Symbol.iterator];if(!t)return r;var o=t.call(r),i,c=[],p;try{for(;(e===void 0||e-- >0)&&!(i=o.next()).done;)c.push(i.value)}catch(d){p={error:d}}finally{try{i&&!i.done&&(t=o.return)&&t.call(o)}finally{if(p)throw p.error}}return c},Lt=function(){for(var r=[],e=0;e<arguments.length;e++)r=r.concat(rn(arguments[e]));return r};function Je(r,e){var t,o,i,c,p,d;try{for(var f=wt(e),x=f.next();!x.done;x=f.next()){var s=x.value;if(s instanceof Node)r.appendChild(s);else if(typeof s=="string")r.appendChild(document.createTextNode(s));else if(typeof s=="function")Je(r,[s()]);else if(Array.isArray(s))Je(r,s);else if(s&&typeof Symbol<"u"&&typeof s[Symbol.iterator]=="function")Je(r,Lt(s));else if(s&&s.constructor===Object&&r instanceof Element)try{for(var k=(i=void 0,wt(Object.keys(s))),u=k.next();!u.done;u=k.next()){var h=u.value,m=s[h];if(h==="class")typeof m=="string"?r.setAttribute("class",m):Array.isArray(s)||m&&typeof Symbol<"u"&&typeof m[Symbol.iterator]=="function"?r.setAttribute("class",Lt(m).join(" ")):console.warn("Invalid "+h+' value "'+m+'" on '+r.tagName+" element.");else if(h==="style")if(m&&m.constructor===Object)try{for(var y=(p=void 0,wt(Object.keys(m))),P=y.next();!P.done;P=y.next()){var C=P.value;C in r.style?r.style[C]=m[C]:r.style.setProperty(C,m[C])}}catch(S){p={error:S}}finally{try{P&&!P.done&&(d=y.return)&&d.call(y)}finally{if(p)throw p.error}}else r.setAttribute(h,m);else typeof m=="function"?r[h]=m:typeof m=="boolean"?m?r.setAttribute(h,""):r.removeAttribute(h):r.setAttribute(h,m)}}catch(S){i={error:S}}finally{try{u&&!u.done&&(c=k.return)&&c.call(k)}finally{if(i)throw i.error}}else r.appendChild(document.createTextNode(s))}}catch(S){t={error:S}}finally{try{x&&!x.done&&(o=f.return)&&o.call(f)}finally{if(t)throw t.error}}return r}var Bt="http://www.w3.org/2000/svg";function on(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];return document.createRange().createContextualFragment(r.join())}function sn(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];for(var t=document.createDocumentFragment(),o=new DOMParser().parseFromString('<svg xmlns="http://www.w3.org/2000/svg">'+r.join()+"</svg>","image/svg+xml").documentElement;o.firstChild!==null;)document.importNode(o.firstChild,!0),t.appendChild(o.firstChild);return t}var Ut=function(r){var e=typeof Symbol=="function"&&Symbol.iterator,t=e&&r[e],o=0;if(t)return t.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&o>=r.length&&(r=void 0),{value:r&&r[o++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},Ct,zt,It,Vt,Jt=on,Ot=sn,ln=function(r){Jt[r]=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Je(document.createElement(r),e)}};try{for(var ut=Ut("a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr".split(" ")),tt=ut.next();!tt.done;tt=ut.next()){var cn=tt.value;ln(cn)}}catch(r){Ct={error:r}}finally{try{tt&&!tt.done&&(zt=ut.return)&&zt.call(ut)}finally{if(Ct)throw Ct.error}}var hn=function(r){if(Ot[r]=function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];return Je(document.createElementNS(Bt,r),t)},/-/.test(r)){var e=r.replace(/-/g,"_");Ot[e]=function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];return Je(document.createElementNS(Bt,r),t)}}};try{for(var mt=Ut("a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern".split(" ")),nt=mt.next();!nt.done;nt=mt.next()){var pn=nt.value;hn(pn)}}catch(r){It={error:r}}finally{try{nt&&!nt.done&&(Vt=mt.return)&&Vt.call(mt)}finally{if(It)throw It.error}}const R=class R{static resetColors(){this.colorLookup.clear()}static getComputedChannelColor(e,t){if(getComputedStyle(this._styleElement).getPropertyValue("--use-color-formula").trim()=="false"){let i=R.getChannelColor(e,t);var o=/\(([^)]+)\)/;let c=R.getComputed(o.exec(i.secondaryChannel)[1]),p=R.getComputed(o.exec(i.primaryChannel)[1]),d=R.getComputed(o.exec(i.secondaryNote)[1]),f=R.getComputed(o.exec(i.primaryNote)[1]);return{secondaryChannel:c,primaryChannel:p,secondaryNote:d,primaryNote:f}}else return R.getChannelColor(e,t)}static getChannelColor(e,t){if(getComputedStyle(this._styleElement).getPropertyValue("--use-color-formula").trim()=="false")return t<e.pitchChannelCount?R.pitchChannels[t%R.pitchChannels.length]:t<e.pitchChannelCount+e.noiseChannelCount?R.noiseChannels[(t-e.pitchChannelCount)%R.noiseChannels.length]:R.modChannels[(t-e.pitchChannelCount-e.noiseChannelCount)%R.modChannels.length];if(R.colorLookup.has(t))return R.colorLookup.get(t);if(t<e.pitchChannelCount){const o=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-hue"),i=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-hue-scale"),c=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-sat"),p=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-sat-scale"),d=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-lum"),f=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-lum-scale"),x=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-hue"),s=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-hue-scale"),k=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-sat"),u=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-sat-scale"),h=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-lum"),m=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-lum-scale"),y=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-hue"),P=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-hue-scale"),C=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-sat"),S=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-sat-scale"),v=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-lum"),D=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-lum-scale"),N=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-hue"),L=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-hue-scale"),z=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-sat"),E=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-sat-scale"),l=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-lum"),g=+getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-lum-scale");let F="hsl("+(+o+t*+i/n.pitchChannelCountMax*256)%256+","+ +c*(1-+p*Math.floor(t/7))+"%,"+ +d*(1-+f*Math.floor(t/7))+"%)",M="hsl("+(+x+t*+s/n.pitchChannelCountMax*256)%256+","+ +k*(1-+u*Math.floor(t/7))+"%,"+ +h*(1-+m*Math.floor(t/7))+"%)",I="hsl("+(+y+t*+P/n.pitchChannelCountMax*256)%256+","+ +C*(1-+S*Math.floor(t/7))+"%,"+ +v*(1-+D*Math.floor(t/7))+"%)",A="hsl("+(+N+t*+L/n.pitchChannelCountMax*256)%256+","+ +z*(1-+E*Math.floor(t/7))+"%,"+ +l*(1-+g*Math.floor(t/7))+"%)",V={secondaryChannel:F,primaryChannel:M,secondaryNote:I,primaryNote:A};return R.colorLookup.set(t,V),V}else if(t<e.pitchChannelCount+e.noiseChannelCount){const o=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-hue"),i=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-hue-scale"),c=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-sat"),p=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-sat-scale"),d=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-lum"),f=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-lum-scale"),x=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-hue"),s=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-hue-scale"),k=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-sat"),u=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-sat-scale"),h=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-lum"),m=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-lum-scale"),y=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-hue"),P=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-hue-scale"),C=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-sat"),S=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-sat-scale"),v=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-lum"),D=+getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-lum-scale"),N=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-hue"),L=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-hue-scale"),z=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-sat"),E=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-sat-scale"),l=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-lum"),g=+getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-lum-scale");let F="hsl("+(+o+(t-e.pitchChannelCount)*+i/n.noiseChannelCountMax*256)%256+","+(+c+t*+p)+"%,"+(+d+t*+f)+"%)",M="hsl("+(+x+(t-e.pitchChannelCount)*+s/n.noiseChannelCountMax*256)%256+","+(+k+t*+u)+"%,"+(+h+t*+m)+"%)",I="hsl("+(+y+(t-e.pitchChannelCount)*+P/n.noiseChannelCountMax*256)%256+","+(+C+t*+S)+"%,"+(+v+t*+D)+"%)",A="hsl("+(+N+(t-e.pitchChannelCount)*+L/n.noiseChannelCountMax*256)%256+","+(+z+t*+E)+"%,"+(+l+t*+g)+"%)",V={secondaryChannel:F,primaryChannel:M,secondaryNote:I,primaryNote:A};return R.colorLookup.set(t,V),V}else{const o=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-hue"),i=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-hue-scale"),c=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-sat"),p=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-sat-scale"),d=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-lum"),f=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-lum-scale"),x=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-hue"),s=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-hue-scale"),k=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-sat"),u=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-sat-scale"),h=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-lum"),m=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-lum-scale"),y=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-hue"),P=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-hue-scale"),C=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-sat"),S=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-sat-scale"),v=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-lum"),D=+getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-lum-scale"),N=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-hue"),L=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-hue-scale"),z=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-sat"),E=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-sat-scale"),l=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-lum"),g=+getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-lum-scale");let F="hsl("+(+o+(t-e.pitchChannelCount-e.noiseChannelCount)*+i/n.modChannelCountMax*256)%256+","+(+c+t*+p)+"%,"+(+d+t*+f)+"%)",M="hsl("+(+x+(t-e.pitchChannelCount-e.noiseChannelCount)*+s/n.modChannelCountMax*256)%256+","+(+k+t*+u)+"%,"+(+h+t*+m)+"%)",I="hsl("+(+y+(t-e.pitchChannelCount-e.noiseChannelCount)*+P/n.modChannelCountMax*256)%256+","+(+C+t*+S)+"%,"+(+v+t*+D)+"%)",A="hsl("+(+N+(t-e.pitchChannelCount-e.noiseChannelCount)*+L/n.modChannelCountMax*256)%256+","+(+z+t*+E)+"%,"+(+l+t*+g)+"%)",V={secondaryChannel:F,primaryChannel:M,secondaryNote:I,primaryNote:A};return R.colorLookup.set(t,V),V}}static setTheme(e){let t=this.themes[e];t==null&&(t=this.themes["dark classic"]),this._styleElement.textContent=t;const o=document.querySelector("meta[name='theme-color']");o!=null&&o.setAttribute("content",getComputedStyle(document.documentElement).getPropertyValue("--ui-widget-background")),this.resetColors()}static getComputed(e){return getComputedStyle(this._styleElement).getPropertyValue(e)}};a(R,"colorLookup",new Map),a(R,"themes",{"dark classic":`
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,"dark competition":`
				:root {
					--page-margin: black;
					--editor-background: black;
					--hover-preview: #ddd;
					--playhead: #ddd;
					--primary-text: #ddd;
					--secondary-text: #8e695b;
					--inverted-text: black;
					--text-selection: rgba(169,0,255,0.99);
					--box-selection-fill: rgba(221,221,221,0.2);
					--loop-accent: #bf15ba;
					--link-accent: #f888ff;
					--ui-widget-background: #443a3a;
					--ui-widget-focus: #777;
					--pitch-background: #353333;
					--tonic: #884a44;
					--fifth-note: #415498;
					--white-piano-key: #bbb;
					--black-piano-key: #444;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch1-secondary-channel: #0099a1;
					--pitch1-primary-channel:   #25f3ff;
					--pitch1-secondary-note:    #00bdc7;
					--pitch1-primary-note:      #92f9ff;
					--pitch2-secondary-channel: #a1a100;
					--pitch2-primary-channel:   #ffff25;
					--pitch2-secondary-note:    #c7c700;
					--pitch2-primary-note:      #ffff92;
					--pitch3-secondary-channel: #c75000;
					--pitch3-primary-channel:   #ff9752;
					--pitch3-secondary-note:    #ff771c;
					--pitch3-primary-note:      #ffcdab;
					--pitch4-secondary-channel: #00a100;
					--pitch4-primary-channel:   #50ff50;
					--pitch4-secondary-note:    #00c700;
					--pitch4-primary-note:      #a0ffa0;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #ff90ff;
					--pitch5-secondary-note:    #e040e0;
					--pitch5-primary-note:      #ffc0ff;
					--pitch6-secondary-channel: #7777b0;
					--pitch6-primary-channel:   #a0a0ff;
					--pitch6-secondary-note:    #8888d0;
					--pitch6-primary-note:      #d0d0ff;
					--pitch7-secondary-channel: #8AA100;
					--pitch7-primary-channel:   #DEFF25;
					--pitch7-secondary-note:	  #AAC700;
					--pitch7-primary-note:			#E6FF92;
					--pitch8-secondary-channel: #DF0019;
					--pitch8-primary-channel:   #FF98A4;
					--pitch8-secondary-note:    #FF4E63;
					--pitch8-primary-note:      #FFB2BB;
					--pitch9-secondary-channel: #00A170;
					--pitch9-primary-channel:   #50FFC9;
					--pitch9-secondary-note:    #00C78A;
					--pitch9-primary-note:			#83FFD9;
					--pitch10-secondary-channel:#A11FFF;
					--pitch10-primary-channel:  #CE8BFF;
					--pitch10-secondary-note:   #B757FF;
					--pitch10-primary-note:     #DFACFF;
					--noise1-secondary-channel: #6f6f6f;
					--noise1-primary-channel:   #aaaaaa;
					--noise1-secondary-note:    #a7a7a7;
					--noise1-primary-note:      #e0e0e0;
					--noise2-secondary-channel: #996633;
					--noise2-primary-channel:   #ddaa77;
					--noise2-secondary-note:    #cc9966;
					--noise2-primary-note:      #f0d0bb;
					--noise3-secondary-channel: #4a6d8f;
					--noise3-primary-channel:   #77aadd;
					--noise3-secondary-note:    #6f9fcf;
					--noise3-primary-note:      #bbd7ff;
					--noise4-secondary-channel: #6B3E8E;
					--noise4-primary-channel:   #AF82D2;
					--noise4-secondary-note:    #9E71C1;
					--noise5-secondary-channel: #607837;
					--noise5-primary-channel:   #A2BB77;
					--noise5-secondary-note:    #91AA66;
					--noise5-primary-note:      #C5E2B2;
					--mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:			  #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

			}
		`,"light classic":`
			:root {
				-webkit-text-stroke-width: 0.5px;
				--page-margin: #685d88;
				--editor-background: white;
				--hover-preview: black;
				--playhead: rgba(0,0,0,0.5);
				--primary-text: black;
				--secondary-text: #777;
				--inverted-text: white;
				--text-selection: rgba(200,170,255,0.99);
				--box-selection-fill: rgba(0,0,0,0.1);
				--loop-accent: #98f;
				--link-accent: #74f;
				--ui-widget-background: #ececec;
				--ui-widget-focus: #eee;
				--pitch-background: #ececec;
				--tonic: #f0d6b6;
				--fifth-note: #bbddf0;
				--white-piano-key: #eee;
				--black-piano-key: #666;
					--use-color-formula: false;
					--track-editor-bg-pitch: #ececec;
					--track-editor-bg-pitch-dim: #fdfdfd;
					--track-editor-bg-noise: #ececec;
					--track-editor-bg-noise-dim: #fdfdfd;
					--track-editor-bg-mod: #dbecfd;
					--track-editor-bg-mod-dim: #ecfdff;
					--multiplicative-mod-slider: #789;
					--overwriting-mod-slider: #987;
					--indicator-primary: #98f;
					--indicator-secondary: #cde;
					--select2-opt-group: #cecece;
					--input-box-outline: #ddd;
					--mute-button-normal: #c0b47f;
					--mute-button-mod: #bd7fc0;
				--pitch1-secondary-channel: #6CD9ED;
				--pitch1-primary-channel:   #00A0BD;
				--pitch1-secondary-note:    #34C2DC;
				--pitch1-primary-note:      #00758A;
				--pitch2-secondary-channel: #E3C941;
				--pitch2-primary-channel:   #B49700;
				--pitch2-secondary-note:    #D1B628;
				--pitch2-primary-note:      #836E00;
				--pitch3-secondary-channel: #FF9D61;
				--pitch3-primary-channel:   #E14E00;
				--pitch3-secondary-note:    #F67D3C;
				--pitch3-primary-note:      #B64000;
				--pitch4-secondary-channel: #4BE24B;
				--pitch4-primary-channel:   #00A800;
				--pitch4-secondary-note:    #2DC82D;
				--pitch4-primary-note:      #008000;
				--pitch5-secondary-channel: #FF90FF;
				--pitch5-primary-channel:   #E12EDF;
				--pitch5-secondary-note:    #EC6EEC;
				--pitch5-primary-note:      #A600A5;
				--pitch6-secondary-channel: #B5B5FE;
				--pitch6-primary-channel:   #6969FD;
				--pitch6-secondary-note:    #9393FE;
				--pitch6-primary-note:      #4A4AD7;
				--pitch7-secondary-channel: #C2D848;
				--pitch7-primary-channel:   #8EA800;
				--pitch7-secondary-note:    #B0C82D;
				--pitch7-primary-note:      #6C8000;
				--pitch8-secondary-channel: #FF90A4;
				--pitch8-primary-channel:   #E12E4D;
				--pitch8-secondary-note:    #EC6E85;
				--pitch8-primary-note:      #A6001D;
				--pitch9-secondary-channel: #41E3B5;
				--pitch9-primary-channel:   #00B481;
				--pitch9-secondary-note:    #28D1A1;
				--pitch9-primary-note:      #00835E;
				--pitch10-secondary-channel:#CA77FF;
				--pitch10-primary-channel:  #9609FF;
				--pitch10-secondary-note:   #B54FFF;
				--pitch10-primary-note:     #8400E3;
				--noise1-secondary-channel: #C1C1C1;
				--noise1-primary-channel:   #898989;
				--noise1-secondary-note:    #ADADAD;
				--noise1-primary-note:      #6C6C6C;
				--noise2-secondary-channel: #E8BB8C;
				--noise2-primary-channel:   #BD7D3A;
				--noise2-secondary-note:    #D1A374;
				--noise2-primary-note:      #836342;
				--noise3-secondary-channel: #9BC4EB;
				--noise3-primary-channel:   #4481BE;
				--noise3-secondary-note:    #7CA7D3;
				--noise3-primary-note:      #476685;
				--noise4-secondary-channel: #C5A5E0;
				--noise4-primary-channel:   #8553AE;
				--noise4-secondary-note:    #B290CC;
				--noise4-primary-note:      #684F7D;
				--noise5-secondary-channel: #B8CE93;
				--noise5-primary-channel:   #87A74F;
				--noise5-secondary-note:    #ABC183;
				--noise5-primary-note:      #68784C;
					--mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77dd55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #2ad84a;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ba124a;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:        #7a1caa;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #a86810;
					--mod-label-primary:        #dddddd;
					--mod-label-secondary-text: #777;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #666;
					--disabled-note-secondary:  #aaa;
			}
			
			.beepboxEditor button, .beepboxEditor select {
				box-shadow: inset 0 0 0 1px var(--secondary-text);
			}

				.select2-selection__rendered {
					box-shadow: inset 0 0 0 1px var(--secondary-text);
				}
		`,"jummbox classic":`
				:root {
					--page-margin: #040410;
					--editor-background: #040410;
					--hover-preview: white;
					--playhead: rgba(255, 255, 255, 0.9);
					--primary-text: white;
					--secondary-text: #84859a;
					--inverted-text: black;
					--text-selection: rgba(119,68,255,0.99);
					--box-selection-fill: #044b94;
					--loop-accent: #74f;
					--link-accent: #98f;
					--ui-widget-background: #393e4f;
					--ui-widget-focus: #6d6886;
					--pitch-background: #393e4f;
					--tonic: #725491;
					--fifth-note: #54547a;
					--white-piano-key: #eee;
					--black-piano-key: #666;
					--use-color-formula: true;
					--track-editor-bg-pitch: #393e4f;
					--track-editor-bg-pitch-dim: #1c1d28;
					--track-editor-bg-noise: #3d3535;
					--track-editor-bg-noise-dim: #161313;
					--track-editor-bg-mod: #283560;
					--track-editor-bg-mod-dim: #0a101f;
					--multiplicative-mod-slider: #606c9f;
					--overwriting-mod-slider: #6850b5;
					--indicator-primary: #9c64f7;
					--indicator-secondary: #393e4f;
					--select2-opt-group: #5d576f;
					--input-box-outline: #222;
					--mute-button-normal: #dda85d;
					--mute-button-mod: #886eae;
					--mod-label-primary: #282840;
					--mod-label-secondary-text: rgb(87, 86, 120);
					--mod-label-primary-text: white;
					--pitch-secondary-channel-hue: 0;
					--pitch-secondary-channel-hue-scale: 6.1;
					--pitch-secondary-channel-sat: 83.3;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 40;
					--pitch-secondary-channel-lum-scale: 0.05;
					--pitch-primary-channel-hue: 0;
					--pitch-primary-channel-hue-scale: 6.1;
					--pitch-primary-channel-sat: 100;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 67.5;
					--pitch-primary-channel-lum-scale: 0.05;
					--pitch-secondary-note-hue: 0;
					--pitch-secondary-note-hue-scale: 6.1;
					--pitch-secondary-note-sat: 93.9;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 25;
					--pitch-secondary-note-lum-scale: 0.05;
					--pitch-primary-note-hue: 0;
					--pitch-primary-note-hue-scale: 6.1;
					--pitch-primary-note-sat: 100;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 85.6;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 0;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 42;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 0;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 33;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 63.5;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 0;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 55;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 0;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 74;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 192;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 192;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 96;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 192;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 92;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 45;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 192;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 96;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 85;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #91879f;
					--disabled-note-secondary:  #6a677a;
				}
			`,forest:`
				:root {
					--page-margin: #010c03;
					--editor-background: #010c03;
					--hover-preview: #efe;
					--playhead: rgba(232, 255, 232, 0.9);
					--primary-text: #efe;
					--secondary-text: #70A070;
					--inverted-text: #280228;
					--text-selection: rgba(255,68,199,0.99);
					--box-selection-fill: #267aa3;
					--loop-accent: #ffe845;
					--link-accent: #9f8;
					--ui-widget-background: #203829;
					--ui-widget-focus: #487860;
					--pitch-background: #203829;
					--tonic: #2b8d20;
					--fifth-note: #385840;
					--white-piano-key: #bda;
					--black-piano-key: #573;
					--use-color-formula: true;
					--track-editor-bg-pitch: #254820;
					--track-editor-bg-pitch-dim: #102819;
					--track-editor-bg-noise: #304050;
					--track-editor-bg-noise-dim: #102030;
					--track-editor-bg-mod: #506030;
					--track-editor-bg-mod-dim: #2a300a;
					--multiplicative-mod-slider: #205c8f;
					--overwriting-mod-slider: #20ac6f;
					--indicator-primary: #dcd866;
					--indicator-secondary: #203829;
					--select2-opt-group: #1a6f5a;
					--input-box-outline: #242;
					--mute-button-normal: #49e980;
					--mute-button-mod: #c2e502;
					--mod-label-primary: #133613;
					--mod-label-secondary-text: rgb(27, 126, 40);
					--mod-label-primary-text: #efe;
					--pitch-secondary-channel-hue: 120;
					--pitch-secondary-channel-hue-scale: 8.1;
					--pitch-secondary-channel-sat: 59;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 50;
					--pitch-secondary-channel-lum-scale: 0.04;
					--pitch-primary-channel-hue: 120;
					--pitch-primary-channel-hue-scale: 8.1;
					--pitch-primary-channel-sat: 86;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 70;
					--pitch-primary-channel-lum-scale: 0.04;
					--pitch-secondary-note-hue: 120;
					--pitch-secondary-note-hue-scale: 8.1;
					--pitch-secondary-note-sat: 85;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 30;
					--pitch-secondary-note-lum-scale: 0.04;
					--pitch-primary-note-hue: 120;
					--pitch-primary-note-hue-scale: 8.1;
					--pitch-primary-note-sat: 90;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 80;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 200;
					--noise-secondary-channel-hue-scale: 1.1;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 22;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 200;
					--noise-primary-channel-hue-scale: 1.1;
					--noise-primary-channel-sat: 48;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 65;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 200;
					--noise-secondary-note-hue-scale: 1.1;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 33;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 200;
					--noise-primary-note-hue-scale: 1.1;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 64;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 40;
					--mod-secondary-channel-hue-scale: 1.8;
					--mod-secondary-channel-sat: 44;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 40;
					--mod-primary-channel-hue-scale: 1.8;
					--mod-primary-channel-sat: 60;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 40;
					--mod-secondary-note-hue-scale: 1.8;
					--mod-secondary-note-sat: 62;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 55;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 40;
					--mod-primary-note-hue-scale: 1.8;
					--mod-primary-note-sat: 66;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 85;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #536e5c;
					--disabled-note-secondary:  #395440;
				}
			`,canyon:`
				:root {
					--page-margin: #0a0000;
					--editor-background: #0a0000;
					--hover-preview: white;
					--playhead: rgba(247, 172, 196, 0.9);
					--primary-text: #f5d6bf;
					--secondary-text: #934050;
					--inverted-text: #290505;
					--text-selection: rgba(255, 208, 68, 0.99);
					--box-selection-fill: #94044870;
					--loop-accent: #ff1e1e;
					--link-accent: #da7b76;
					--ui-widget-background: #533137;
					--ui-widget-focus: #743e4b;
					--pitch-background: #4f3939;
					--tonic: #9e4145;
					--fifth-note: #5b3e6b;
					--white-piano-key: #d89898;
					--black-piano-key: #572b29;
					--use-color-formula: true;
					--track-editor-bg-pitch: #5e3a41;
					--track-editor-bg-pitch-dim: #281d1c;
					--track-editor-bg-noise: #3a3551;
					--track-editor-bg-noise-dim: #272732;
					--track-editor-bg-mod: #552045;
					--track-editor-bg-mod-dim: #3e1442;
					--multiplicative-mod-slider: #9f6095;
					--overwriting-mod-slider: #b55050;
					--indicator-primary: #f2f764;
					--indicator-secondary: #4f3939;
					--select2-opt-group: #673030;
					--input-box-outline: #443131;
					--mute-button-normal: #d81833;
					--mute-button-mod: #9e2691;
					--mod-label-primary: #5f2b39;
					--mod-label-secondary-text: rgb(158, 66, 122);
					--mod-label-primary-text: #e6caed;
					--pitch-secondary-channel-hue: 0;
					--pitch-secondary-channel-hue-scale: 11.8;
					--pitch-secondary-channel-sat: 73.3;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 40;
					--pitch-secondary-channel-lum-scale: 0.05;
					--pitch-primary-channel-hue: 0;
					--pitch-primary-channel-hue-scale: 11.8;
					--pitch-primary-channel-sat: 90;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 67.5;
					--pitch-primary-channel-lum-scale: 0.05;
					--pitch-secondary-note-hue: 0;
					--pitch-secondary-note-hue-scale: 11.8;
					--pitch-secondary-note-sat: 83.9;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 35;
					--pitch-secondary-note-lum-scale: 0.05;
					--pitch-primary-note-hue: 0;
					--pitch-primary-note-hue-scale: 11.8;
					--pitch-primary-note-sat: 100;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 85.6;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 60;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 42;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 60;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 33;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 63.5;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 60;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 55;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 60;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 74;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 222;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 222;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 96;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 222;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 92;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 54;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 222;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 96;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 75;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #515164;
					--disabled-note-secondary:  #2a2a3a;
				}
			`,midnight:`
		:root {
			--page-margin: #000;
			--editor-background: #000;
			--hover-preview: #757575;
			--playhead: #fff;
			--primary-text: #fff;
			--secondary-text: #acacac;
			--inverted-text: #290505;
			--text-selection: rgba(155, 155, 155, 0.99);
			--box-selection-fill: #79797970;
			--loop-accent: #646464;
			--link-accent: #707070;
			--ui-widget-background: #353535;
			--ui-widget-focus: #464646;
			--pitch-background: #222121;
			--tonic: #555955;
			--fifth-note: #1a1818;
			--white-piano-key: #a89e9e;
			--black-piano-key: #2d2424;
			--use-color-formula: true;
			--track-editor-bg-pitch: #373737;
			--track-editor-bg-pitch-dim: #131313;
			--track-editor-bg-noise: #484848;
			--track-editor-bg-noise-dim: #131313;
			--track-editor-bg-mod: #373737;
			--track-editor-bg-mod-dim: #131313;
			--multiplicative-mod-slider: #555;
			--overwriting-mod-slider: #464545;
			--indicator-primary: #e0e0e0;
			--indicator-secondary: #404040;
			--select2-opt-group: #3c3b3b;
			--input-box-outline: #757575;
			--mute-button-normal: #8e8d8d;
			--mute-button-mod: #ddd;
			--mod-label-primary: #262526;
			--mod-label-secondary-text: rgb(227, 222, 225);
			--mod-label-primary-text: #b9b9b9;
			--pitch-secondary-channel-hue: 240;
			--pitch-secondary-channel-hue-scale: 228;
			--pitch-secondary-channel-sat: 73.3;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 25;
			--pitch-secondary-channel-lum-scale: 0.05;
			--pitch-primary-channel-hue: 240;
			--pitch-primary-channel-hue-scale: 228;
			--pitch-primary-channel-sat: 80;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 60.5;
			--pitch-primary-channel-lum-scale: 0.05;
			--pitch-secondary-note-hue: 240;
			--pitch-secondary-note-hue-scale: 228;
			--pitch-secondary-note-sat: 73.9;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 32;
			--pitch-secondary-note-lum-scale: 0.05;
			--pitch-primary-note-hue: 240;
			--pitch-primary-note-hue-scale: 228;
			--pitch-primary-note-sat: 90;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 80.6;
			--pitch-primary-note-lum-scale: 0.025;
			--noise-secondary-channel-hue: 160;
			--noise-secondary-channel-hue-scale: 2;
			--noise-secondary-channel-sat: 25;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 42;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 160;
			--noise-primary-channel-hue-scale: 2;
			--noise-primary-channel-sat: 33;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 63.5;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 160;
			--noise-secondary-note-hue-scale: 2;
			--noise-secondary-note-sat: 33.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 55;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 160;
			--noise-primary-note-hue-scale: 2;
			--noise-primary-note-sat: 46.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 74;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 62;
			--mod-secondary-channel-hue-scale: 1.5;
			--mod-secondary-channel-sat: 88;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 30;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 62;
			--mod-primary-channel-hue-scale: 1.5;
			--mod-primary-channel-sat: 96;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 80;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 62;
			--mod-secondary-note-hue-scale: 1.5;
			--mod-secondary-note-sat: 92;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 34;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 62;
			--mod-primary-note-hue-scale: 1.5;
			--mod-primary-note-sat: 96;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 75;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary:    #66a;
			--disabled-note-secondary:  #447;
		}
	`,"jummbox light":`
				:root {
					-webkit-text-stroke-width: 0.5px;
					--page-margin: #fefdff;
					--editor-background: #fefdff;
					--hover-preview: #302880;
					--playhead: rgba(62, 32, 120, 0.9);
					--primary-text: #401890;
					--secondary-text: #8769af;
					--inverted-text: #fefdff;
					--text-selection: rgba(255,160,235,0.99);
					--box-selection-fill: rgba(30,62,220,0.5);
					--loop-accent: #4c35d4;
					--link-accent: #7af;
					--ui-widget-background: #bf9cec;
					--ui-widget-focus: #e9c4ff;
					--pitch-background: #e2d9f9;
					--tonic: #c288cc;
					--fifth-note: #d8c9fd;
					--white-piano-key: #e2e2ff;
					--black-piano-key: #66667a;
					--use-color-formula: true;
					--track-editor-bg-pitch: #d9e5ec;
					--track-editor-bg-pitch-dim: #eaeef5;
					--track-editor-bg-noise: #ffc3ae;
					--track-editor-bg-noise-dim: #ffe0cf;
					--track-editor-bg-mod: #c9accc;
					--track-editor-bg-mod-dim: #ebe3ef;
					--multiplicative-mod-slider: #807caf;
					--overwriting-mod-slider: #909cdf;
					--indicator-primary: #ae38ff;
					--indicator-secondary: #bbd4ec;
					--select2-opt-group: #c1b7f1;
					--input-box-outline: #bbb;
					--mute-button-normal: #e9b752;
					--mute-button-mod: #9558ee;
					--mod-label-primary: #ececff;
					--mod-label-secondary-text: rgb(197, 145, 247);
					--mod-label-primary-text: #302880;
					--pitch-secondary-channel-hue: 0;
					--pitch-secondary-channel-hue-scale: 8.1;
					--pitch-secondary-channel-sat: 53.3;
					--pitch-secondary-channel-sat-scale: -0.1;
					--pitch-secondary-channel-lum: 72;
					--pitch-secondary-channel-lum-scale: -0.05;
					--pitch-primary-channel-hue: 0;
					--pitch-primary-channel-hue-scale: 8.1;
					--pitch-primary-channel-sat: 97;
					--pitch-primary-channel-sat-scale: -0.1;
					--pitch-primary-channel-lum: 45.5;
					--pitch-primary-channel-lum-scale: -0.05;
					--pitch-secondary-note-hue: 0;
					--pitch-secondary-note-hue-scale: 8.1;
					--pitch-secondary-note-sat: 93.9;
					--pitch-secondary-note-sat-scale: -0.1;
					--pitch-secondary-note-lum: 95;
					--pitch-secondary-note-lum-scale: -0.05;
					--pitch-primary-note-hue: 0;
					--pitch-primary-note-hue-scale: 8.1;
					--pitch-primary-note-sat: 100;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 43.6;
					--pitch-primary-note-lum-scale: -0.025;
					--noise-secondary-channel-hue: 220;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 62;
					--noise-secondary-channel-lum-scale: -0.1;
					--noise-primary-channel-hue: 220;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 53;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 53.5;
					--noise-primary-channel-lum-scale: -0.1;
					--noise-secondary-note-hue: 220;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 58.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 85;
					--noise-secondary-note-lum-scale: -1;
					--noise-primary-note-hue: 220;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 56.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 54;
					--noise-primary-note-lum-scale: -1;
					--mod-secondary-channel-hue: 90;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 60;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 90;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 100;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 65;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 90;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 92;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 95;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 90;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 96;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 55;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #868;
					--disabled-note-secondary:  #767;
				}

				.beepboxEditor button, .beepboxEditor select {
					box-shadow: inset 0 0 0 1px var(--secondary-text);
				}

				.select2-selection__rendered {
					box-shadow: inset 0 0 0 1px var(--secondary-text);
				}
			`,beachcombing:`
			:root {
			--page-margin: #010121;
			--editor-background: #020222;
			--hover-preview: #f3ffff;
			--playhead: #fff;
			--primary-text: #c1f1ff;
			--secondary-text: #546775;
			--inverted-text: black;
			--text-selection: rgba(119,68,255,0.99);
			--box-selection-fill: #3e0028;
			--loop-accent: #5a00ff;
			--link-accent: #ff00c8fc;
			--ui-widget-background: #1f2b52;
			--ui-widget-focus: #384e91;
			--pitch-background: #2c3155;
			--tonic: #a32f6e;
			--fifth-note: #0044a0;
			--white-piano-key: #fff;
			--black-piano-key: #202d42;
			--use-color-formula: false;
			--track-editor-bg-pitch: #34406c;
			--track-editor-bg-pitch-dim: #1c1d28;
			--track-editor-bg-noise: #562e3b;
			--track-editor-bg-noise-dim: #161313;
			--track-editor-bg-mod: #372e66;
			--track-editor-bg-mod-dim: #2a1640;
			--multiplicative-mod-slider: #606c9f;
			--overwriting-mod-slider: #6850b5;
			--indicator-primary: #ff67c2;
			--indicator-secondary: #393e4f;
			--select2-opt-group: #5d576f;
			--input-box-outline: #222;
			--mute-button-normal: #7ce1ff;
			--mute-button-mod: #db519d;
			--pitch1-secondary-channel: #329b70;
			--pitch1-primary-channel: #53ffb8;
			--pitch1-secondary-note: #4cb98c;
			--pitch1-primary-note: #98ffd4;
			--pitch2-secondary-channel: #8e8632;
			--pitch2-primary-channel: #fff36a;
			--pitch2-secondary-note: #afaf22;
			--pitch2-primary-note: #f9f93f;
			--pitch3-secondary-channel: #018e8e;
			--pitch3-primary-channel: #00ffff;
			--pitch3-secondary-note: #24b7b7;
			--pitch3-primary-note: #a7ffff;
			--pitch4-secondary-channel: #6c003d;
			--pitch4-primary-channel: #ff0090;
			--pitch4-secondary-note: #a73c78;
			--pitch4-primary-note: #ff98d2;
			--pitch5-secondary-channel: #0e8153;
			--pitch5-primary-channel: #59ffbd;
			--pitch5-secondary-note: #489979;
			--pitch5-primary-note: #b0ffe0;
			--pitch6-secondary-channel: #185aab;
			--pitch6-primary-channel: #4e7ce5;
			--pitch6-secondary-note: #3e99d9;
			--pitch6-primary-note: #b3e3ff;
			--pitch7-secondary-channel: #4f007d;
			--pitch7-primary-channel: #a200ff;
			--pitch7-secondary-note: #9741c9;
			--pitch7-primary-note: #d386ff;
			--pitch8-secondary-channel: #101c8d;
			--pitch8-primary-channel: #1c5df1;
			--pitch8-secondary-note: #FF4E63;
			--pitch8-primary-note: #FFB2BB;
			--pitch9-secondary-channel: #00A170;
			--pitch9-primary-channel: #50FFC9;
			--pitch9-secondary-note: #00C78A;
			--pitch9-primary-note: #83FFD9;
			--pitch10-secondary-channel: #A11FFF;
			--pitch10-primary-channel: #CE8BFF;
			--pitch10-secondary-note: #B757FF;
			--pitch10-primary-note: #DFACFF;
			--noise1-secondary-channel: #635070;
			--noise1-primary-channel: #9071db;
			--noise1-secondary-note: #915dc1;
			--noise1-primary-note: #c5a5ff;
			--noise2-secondary-channel: #993367;
			--noise2-primary-channel: #dd777c;
			--noise2-secondary-note: #cc6695;
			--noise2-primary-note: #f0bbd1;
			--noise3-secondary-channel: #4a8c8f;
			--noise3-primary-channel: #77c5dd;
			--noise3-secondary-note: #6fb4cf;
			--noise3-primary-note: #bbf2ff;
			--noise4-secondary-channel: #8e3e7d;
			--noise4-primary-channel: #c682d2;
			--noise4-secondary-note: #b871c1;
			--noise4-primary-note: #ffb8f0;
			--noise5-secondary-channel: #785e37;
			--noise5-primary-channel: #bb9d77;
			--noise5-secondary-note: #aa8c66;
			--noise5-primary-note: #e2d1b2;
			--mod1-secondary-channel: #4e8397;
			--mod1-primary-channel: #92e6f3;
			--mod1-secondary-note: #76b9d9;
			--mod1-primary-note: #cde3ff;
			--mod2-secondary-channel: #ad5774;
			--mod2-primary-channel: #eba4ae;
			--mod2-secondary-note: #c9719b;
			--mod2-primary-note: #fdcee7;
			--mod3-secondary-channel: #6f579f;
			--mod3-primary-channel: #b192f7;
			--mod3-secondary-note: #a778e1;
			--mod3-primary-note: #f8ddff;
			--mod4-secondary-channel: #a88a36;
			--mod4-primary-channel: #bec825;
			--mod4-secondary-note: #aecb57;
			--mod4-primary-note: #dee9bd;
			--mod-label-primary: #2c2c56;
			--mod-label-secondary-text: rgb(71,69,147);
			--mod-label-primary-text: white;
			--disabled-note-primary: #91879f;
			--disabled-note-secondary: #6a677a;


			}
		`,roe:`
			:root {
			--page-margin: #050000;
			--editor-background: #050000;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #b8cee0;
			--secondary-text: #cb3434;
			--inverted-text: black;
			--text-selection: rgb(255 68 68 / 99%);
			--box-selection-fill: rgb(255 0 0 / 30%);
			--loop-accent: #7744FF;
			--link-accent: #FF2A2A;
			--ui-widget-background: #1a2642;
			--ui-widget-focus: #2c3f6d;
			--pitch-background: #15111a;
			--tonic: #1b3041;
			--fifth-note: #381818;
			--white-piano-key: #cdcdcd;
			--black-piano-key: #232323;
			--use-color-formula: false;
			--track-editor-bg-pitch: #302938;
			--track-editor-bg-pitch-dim: #211c26;
			--track-editor-bg-noise: #261f42;
			--track-editor-bg-noise-dim: #1a152d;
			--track-editor-bg-mod: #183049;
			--track-editor-bg-mod-dim: #102132;
			--multiplicative-mod-slider: #344a7f;
			--overwriting-mod-slider: #344a7f;
			--indicator-primary: #FF2A2A;
			--indicator-secondary: #800000;
			--select2-opt-group: #141e34;
			--input-box-outline: #141e34;
			--mute-button-normal: #299eff;
			--mute-button-mod: #165a93;
			--pitch1-secondary-channel: #273c90;
			--pitch1-primary-channel: #476BFF;
			--pitch1-secondary-note: #273c90;
			--pitch1-primary-note: #476BFF;
			--pitch2-secondary-channel: #3a3898;
			--pitch2-primary-channel: #625FFB;
			--pitch2-secondary-note: #3a3898;
			--pitch2-primary-note: #625FFB;
			--pitch3-secondary-channel: #542780;
			--pitch3-primary-channel: #9C49EC;
			--pitch3-secondary-note: #542780;
			--pitch3-primary-note: #9C49EC;
			--pitch4-secondary-channel: #84225d;
			--pitch4-primary-channel: #fd3fb1;
			--pitch4-secondary-note: #84225d;
			--pitch4-primary-note: #fd3fb1;
			--pitch5-secondary-channel: #8d2323;
			--pitch5-primary-channel: #ff3f3f;
			--pitch5-secondary-note: #8d2323;
			--pitch5-primary-note: #ff3f3f;
			--pitch6-secondary-channel: #84225d;
			--pitch6-primary-channel: #fd3fb1;
			--pitch6-secondary-note: #84225d;
			--pitch6-primary-note: #fd3fb1;
			--pitch7-secondary-channel: #542780;
			--pitch7-primary-channel: #9C49EC;
			--pitch7-secondary-note: #542780;
			--pitch7-primary-note: #9C49EC;
			--pitch8-secondary-channel: #3a3898;
			--pitch8-primary-channel: #625FFB;
			--pitch8-secondary-note: #3a3898;
			--pitch8-primary-note: #625FFB;
			--pitch9-secondary-channel: #273c90;
			--pitch9-primary-channel: #476BFF;
			--pitch9-secondary-note: #273c90;
			--pitch9-primary-note: #476BFF;
			--pitch10-secondary-channel: #165a93;
			--pitch10-primary-channel: #299EFF;
			--pitch10-secondary-note: #165a93;
			--pitch10-primary-note: #299EFF;
			--noise1-secondary-channel: #4281FF;
			--noise1-primary-channel: #96b9ff;
			--noise1-secondary-note: #4281FF;
			--noise1-primary-note: #96b9ff;
			--noise2-secondary-channel: #7347FF;
			--noise2-primary-channel: #c3b0ff;
			--noise2-secondary-note: #7347FF;
			--noise2-primary-note: #c3b0ff;
			--noise3-secondary-channel: #9F3CBF;
			--noise3-primary-channel: #e29cf9;
			--noise3-secondary-note: #9F3CBF;
			--noise3-primary-note: #e29cf9;
			--noise4-secondary-channel: #D3326F;
			--noise4-primary-channel: #fb9bbf;
			--noise4-secondary-note: #D3326F;
			--noise4-primary-note: #fb9bbf;
			--noise5-secondary-channel: #FF2A2A;
			--noise5-primary-channel: #ffa2a2;
			--noise5-secondary-note: #FF2A2A;
			--noise5-primary-note: #ffa2a2;
			--mod1-secondary-channel: #47587a;
			--mod1-primary-channel: #96b9ff;
			--mod1-secondary-note: #47587a;
			--mod1-primary-note: #96b9ff;
			--mod2-secondary-channel: #716791;
			--mod2-primary-channel: #c3b0ff;
			--mod2-secondary-note: #716791;
			--mod2-primary-note: #c3b0ff;
			--mod3-secondary-channel: #6f4c7b;
			--mod3-primary-channel: #e29cf9;
			--mod3-secondary-note: #6f4c7b;
			--mod3-primary-note: #e29cf9;
			--mod4-secondary-channel: #9e6279;
			--mod4-primary-channel: #fb9bbf;
			--mod4-secondary-note: #9e6279;
			--mod4-primary-note: #fb9bbf;
			--mod-label-primary: #15111a;
			--mod-label-secondary-text: #cb3434;
			--mod-label-primary-text: white;
			--disabled-note-primary: #c9c9c9;
			--disabled-note-secondary: #616161;
		}`,moonlight:`
			:root {
			--page-margin: #020514;
			--editor-background: #020514;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #D4DCE9;
			--secondary-text: #3E87DA;
			--inverted-text: black;
			--text-selection: #03599bd9;
			--box-selection-fill: hsl(206deg 66% 41% / 85%);
			--loop-accent: #639BD6;
			--link-accent: #A8C6E8;
			--ui-widget-background: #1e2940;
			--ui-widget-focus: #324b81;
			--pitch-background: #223849;
			--tonic: #33536c;
			--fifth-note: hsl(206deg 36% 16%);
			--white-piano-key: #c1bfe9;
			--black-piano-key: #454354;
			--use-color-formula: false;
			--track-editor-bg-pitch: #25568d80;
			--track-editor-bg-pitch-dim: #10253c80;
			--track-editor-bg-noise: #25568d80;
			--track-editor-bg-noise-dim: #10253c80;
			--track-editor-bg-mod: #25568d80;
			--track-editor-bg-mod-dim: #10253c80;
			--multiplicative-mod-slider: #0476cd;
			--overwriting-mod-slider: #035899;
			--indicator-primary: #57a1f4;
			--indicator-secondary: #2e5684;
			--select2-opt-group: #24355c;
			--input-box-outline: #141e34;
			--mute-button-normal: #6ebffc;
			--mute-button-mod: #0a92fa;
			--pitch1-secondary-channel: #47425c;
			--pitch1-primary-channel: #918bac;
			--pitch1-secondary-note: #6b6489;
			--pitch1-primary-note: #a8a3bf;
			--pitch2-secondary-channel: #626493;
			--pitch2-primary-channel: #bdbed3;
			--pitch2-secondary-note: #626493;
			--pitch2-primary-note: #bdbed3;
			--pitch3-secondary-channel: #6e89b4;
			--pitch3-primary-channel: #d4dce9;
			--pitch3-secondary-note: #6e89b4;
			--pitch3-primary-note: #d4dce9;
			--pitch4-secondary-channel: #4c77a9;
			--pitch4-primary-channel: #a8c6e8;
			--pitch4-secondary-note: #4c77a9;
			--pitch4-primary-note: #a8c6e8;
			--pitch5-secondary-channel: #314e6d;
			--pitch5-primary-channel: #639bd6;
			--pitch5-secondary-note: #46698f;
			--pitch5-primary-note: #639bd6;
			--pitch6-secondary-channel: #143d6b;
			--pitch6-primary-channel: #3e87da;
			--pitch6-secondary-note: #143d6b;
			--pitch6-primary-note: #3e87da;
			--pitch7-secondary-channel: #314e6d;
			--pitch7-primary-channel: #639bd6;
			--pitch7-secondary-note: #314e6d;
			--pitch7-primary-note: #639bd6;
			--pitch8-secondary-channel: #4c77a9;
			--pitch8-primary-channel: #a8c6e8;
			--pitch8-secondary-note: #4c77a9;
			--pitch8-primary-note: #a8c6e8;
			--pitch9-secondary-channel: #6e89b4;
			--pitch9-primary-channel: #d4dce9;
			--pitch9-secondary-note: #6e89b4;
			--pitch9-primary-note: #d4dce9;
			--pitch10-secondary-channel: #626493;
			--pitch10-primary-channel: #bdbed3;
			--pitch10-secondary-note: #626493;
			--pitch10-primary-note: #bdbed3;
			--noise1-secondary-channel: #4b4a55;
			--noise1-primary-channel: #9795a3;
			--noise1-secondary-note: #4b4a55;
			--noise1-primary-note: #9795a3;
			--noise2-secondary-channel: #858e9d;
			--noise2-primary-channel: #d7dce5;
			--noise2-secondary-note: #858e9d;
			--noise2-primary-note: #d7dce5;
			--noise3-secondary-channel: #394e65;
			--noise3-primary-channel: #809bb7;
			--noise3-secondary-note: #394e65;
			--noise3-primary-note: #809bb7;
			--noise4-secondary-channel: #37577b;
			--noise4-primary-channel: #6189b8;
			--noise4-secondary-note: #37577b;
			--noise4-primary-note: #6189b8;
			--noise5-secondary-channel: #223849;
			--noise5-primary-channel: #5588af;
			--noise5-secondary-note: #223849;
			--noise5-primary-note: #5588af;
			--mod1-secondary-channel: #3e336c;
			--mod1-primary-channel: #6d60a4;
			--mod1-secondary-note: #3e336c;
			--mod1-primary-note: #6d60a4;
			--mod2-secondary-channel: #716791;
			--mod2-primary-channel: #bdbed3;
			--mod2-secondary-note: #716791;
			--mod2-primary-note: #bdbed3;
			--mod3-secondary-channel: #6b91bd;
			--mod3-primary-channel: #4b8fdd;
			--mod3-secondary-note: #597ca7;
			--mod3-primary-note: #7eade3;
			--mod4-secondary-channel: #14559f;
			--mod4-primary-channel: #3386e6;
			--mod4-secondary-note: #14559f;
			--mod4-primary-note: #3386e6;
			--mod-label-primary: #1e2940;
			--mod-label-secondary-text: #748ebe;
			--mod-label-primary-text: white;
			--disabled-note-primary: #828282;
			--disabled-note-secondary: #4f4f4f;
			}`,autumn:`
		:root {
			--page-margin: #060304;
			--editor-background: #060304;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(115 80 76);
			--box-selection-fill: rgb(174 73 81 / 45%);
			--loop-accent: #834A69;
			--link-accent: #98f;
			--ui-widget-background: #2a2523;
			--ui-widget-focus: #4e4c44;
			--pitch-background: #121212;
			--tonic: #4f4f4f;
			--fifth-note: #222;
			--white-piano-key: #b59b9b;
			--black-piano-key: #231e1e;
			--use-color-formula: false;
			--track-editor-bg-pitch: #352f38;
			--track-editor-bg-pitch-dim: #232025;
			--track-editor-bg-noise: #3c3029;
			--track-editor-bg-noise-dim: #251d19;
			--track-editor-bg-mod: #202623;
			--track-editor-bg-mod-dim: #131715;
			--multiplicative-mod-slider: #D9D16E;
			--overwriting-mod-slider: #2D826F;
			--indicator-primary: #D9D16E;
			--indicator-secondary: #444226;
			--select2-opt-group: #20191c;
			--input-box-outline: #20191c;
			--mute-button-normal: var(--pitch2-primary-channel);
			--mute-button-mod: var(--pitch4-primary-channel);
			--pitch1-secondary-channel: #704a34;
			--pitch1-primary-channel: #D9895A;
			--pitch1-secondary-note: #704a34;
			--pitch1-primary-note: #D9895A;
			--pitch2-secondary-channel: #5f3538;
			--pitch2-primary-channel: #AE4951;
			--pitch2-secondary-note: #5f3538;
			--pitch2-primary-note: #AE4951;
			--pitch3-secondary-channel: #5c4336;
			--pitch3-primary-channel: #CA9A81;
			--pitch3-secondary-note: #5c4336;
			--pitch3-primary-note: #CA9A81;
			--pitch4-secondary-channel: #1d3143;
			--pitch4-primary-channel: #386995;
			--pitch4-secondary-note: #1d3143;
			--pitch4-primary-note: #386995;
			--pitch5-secondary-channel: #9c8a58;
			--pitch5-primary-channel: #D9D16E;
			--pitch5-secondary-note: #7c783f;
			--pitch5-primary-note: #D9D16E;
			--pitch6-secondary-channel: #886562;
			--pitch6-primary-channel: #D3A9A5;
			--pitch6-secondary-note: #886562;
			--pitch6-primary-note: #D3A9A5;
			--pitch7-secondary-channel: #1c3f37;
			--pitch7-primary-channel: #2D826F;
			--pitch7-secondary-note: #1c3f37;
			--pitch7-primary-note: #2D826F;
			--pitch8-secondary-channel: #442e2d;
			--pitch8-primary-channel: #815150;
			--pitch8-secondary-note: #442e2d;
			--pitch8-primary-note: #815150;
			--pitch9-secondary-channel: #8e6f60;
			--pitch9-primary-channel: #E5B8A1;
			--pitch9-secondary-note: #8e6f60;
			--pitch9-primary-note: #E5B8A1;
			--pitch10-secondary-channel: #4f3142;
			--pitch10-primary-channel: #834A69;
			--pitch10-secondary-note: #4f3142;
			--pitch10-primary-note: #834A69;
			--noise1-secondary-channel: #6b5346;
			--noise1-primary-channel: #b99c89;
			--noise1-secondary-note: #6b5346;
			--noise1-primary-note: #F0D0BB;
			--noise2-secondary-channel: #4a3839;
			--noise2-primary-channel: #9c6b6e;
			--noise2-secondary-note: #4a3839;
			--noise2-primary-note: #c18b8f;
			--noise3-secondary-channel: #2d3c4a;
			--noise3-primary-channel: #536e86;
			--noise3-secondary-note: #2d3c4a;
			--noise3-primary-note: #8fa8c0;
			--noise4-secondary-channel: #273f3a;
			--noise4-primary-channel: #4e8377;
			--noise4-secondary-note: #273f3a;
			--noise4-primary-note: #87baae;
			--noise5-secondary-channel: #372730;
			--noise5-primary-channel: #7f5e70;
			--noise5-secondary-note: #372730;
			--noise5-primary-note: #cc96b3;
			--mod1-secondary-channel: #783f1f;
			--mod1-primary-channel: #dc6d2c;
			--mod1-secondary-note: #783f1f;
			--mod1-primary-note: #dc6d2c;
			--mod2-secondary-channel: #0b3153;
			--mod2-primary-channel: #1464ac;
			--mod2-secondary-note: #0b3153;
			--mod2-primary-note: #1464ac;
			--mod3-secondary-channel: #075040;
			--mod3-primary-channel: #08a17f;
			--mod3-secondary-note: #075040;
			--mod3-primary-note: #08a17f;
			--mod4-secondary-channel: #631640;
			--mod4-primary-channel: #b4186d;
			--mod4-secondary-note: #631640;
			--mod4-primary-note: #b4186d;
			--mod-label-primary: #000;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;
		}`,fruit:`
		:root {
			--page-margin: #040507;
			--editor-background: #040507;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(115 103 76);
			--box-selection-fill: rgb(174 109 73 / 45%);
			--loop-accent: #EC897D;
			--link-accent: #FDE484;
			--ui-widget-background: #22222c;
			--ui-widget-focus: #39394c;
			--pitch-background: #101010;
			--tonic: #2c2d34;
			--fifth-note: #191a20;
			--white-piano-key: #bbbaba;
			--black-piano-key: #2d2d2d;
			--use-color-formula: false;
			--track-editor-bg-pitch: #2b2d40;
			--track-editor-bg-pitch-dim: #191a25;
			--track-editor-bg-noise: #3c3644;
			--track-editor-bg-noise-dim: #26222b;
			--track-editor-bg-mod: #322a2a;
			--track-editor-bg-mod-dim: #191515;
			--multiplicative-mod-slider: #977da9;
			--overwriting-mod-slider: #798FA7;
			--indicator-primary: #EAAC9D;
			--indicator-secondary: #5e413a;
			--select2-opt-group: #191920;
			--input-box-outline: #191920;
			--mute-button-normal: #798FA7;
			--mute-button-mod: #354457;
			--pitch1-secondary-channel: #91655a;
			--pitch1-primary-channel: #EAAC9D;
			--pitch1-secondary-note: #91655a;
			--pitch1-primary-note: #EAAC9D;
			--pitch2-secondary-channel: #8f6513;
			--pitch2-primary-channel: #FFAF12;
			--pitch2-secondary-note: #8f6513;
			--pitch2-primary-note: #FFAF12;
			--pitch3-secondary-channel: #212f46;
			--pitch3-primary-channel: #34558B;
			--pitch3-secondary-note: #212f46;
			--pitch3-primary-note: #34558B;
			--pitch4-secondary-channel: #2e6b5b;
			--pitch4-primary-channel: #4EC5A7;
			--pitch4-secondary-note: #2e6b5b;
			--pitch4-primary-note: #4EC5A7;
			--pitch5-secondary-channel: #555D46;
			--pitch5-primary-channel: #aabf84;
			--pitch5-secondary-note: #555D46;
			--pitch5-primary-note: #aabf84;
			--pitch6-secondary-channel: #A2553B;
			--pitch6-primary-channel: #e59a81;
			--pitch6-secondary-note: #A2553B;
			--pitch6-primary-note: #e59a81;
			--pitch7-secondary-channel: #7b4021;
			--pitch7-primary-channel: #FE813E;
			--pitch7-secondary-note: #7b4021;
			--pitch7-primary-note: #FE813E;
			--pitch8-secondary-channel: #847753;
			--pitch8-primary-channel: #EFDAA3;
			--pitch8-secondary-note: #847753;
			--pitch8-primary-note: #EFDAA3;
			--pitch9-secondary-channel: #2c3642;
			--pitch9-primary-channel: #798FA7;
			--pitch9-secondary-note: #2c3642;
			--pitch9-primary-note: #798FA7;
			--pitch10-secondary-channel: #0d4453;
			--pitch10-primary-channel: #107895;
			--pitch10-secondary-note: #0d4453;
			--pitch10-primary-note: #107895;
			--noise1-secondary-channel: #71617C;
			--noise1-primary-channel: #977da9;
			--noise1-secondary-note: #71617C;
			--noise1-primary-note: #977da9;
			--noise2-secondary-channel: #3B3D4A;
			--noise2-primary-channel: #707591;
			--noise2-secondary-note: #3B3D4A;
			--noise2-primary-note: #707591;
			--noise3-secondary-channel: #625f5e;
			--noise3-primary-channel: #A19D9C;
			--noise3-secondary-note: #625f5e;
			--noise3-primary-note: #A19D9C;
			--noise4-secondary-channel: #ab847b;
			--noise4-primary-channel: #EAAC9D;
			--noise4-secondary-note: #ab847b;
			--noise4-primary-note: #EAAC9D;
			--noise5-secondary-channel: #B49D74;
			--noise5-primary-channel: #dec69b;
			--noise5-secondary-note: #B49D74;
			--noise5-primary-note: #dec69b;
			--mod1-secondary-channel: #722124;
			--mod1-primary-channel: #D13A41;
			--mod1-secondary-note: #722124;
			--mod1-primary-note: #D13A41;
			--mod2-secondary-channel: #213657;
			--mod2-primary-channel: #34558B;
			--mod2-secondary-note: #213657;
			--mod2-primary-note: #34558B;
			--mod3-secondary-channel: #555D46;
			--mod3-primary-channel: #848f6d;
			--mod3-secondary-note: #555D46;
			--mod3-primary-note: #848f6d;
			--mod4-secondary-channel: #71617C;
			--mod4-primary-channel: #a68ab9;
			--mod4-secondary-note: #71617C;
			--mod4-primary-note: #a68ab9;
			--mod-label-primary: #282828;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;
		}`,sunset:`
		:root {
			--page-margin: #040300;
			--editor-background: #040300;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(94 0 157);
			--box-selection-fill: rgb(174 173 73 / 45%);
			--loop-accent: #EC897D;
			--link-accent: #FDE484;
			--ui-widget-background: #241b24;
			--ui-widget-focus: #3a2e39;
			--pitch-background: #141414;
			--tonic: #2C212B;
			--fifth-note: #2E2A15;
			--white-piano-key: #bbbaba;
			--black-piano-key: #2d2d2d;
			--use-color-formula: false;
			--track-editor-bg-pitch: #2d2e42;
			--track-editor-bg-pitch-dim: #191a25;
			--track-editor-bg-noise: #393340;
			--track-editor-bg-noise-dim: #26222b;
			--track-editor-bg-mod: #232a2c;
			--track-editor-bg-mod-dim: #151819;
			--multiplicative-mod-slider: #977da9;
			--overwriting-mod-slider: #798FA7;
			--indicator-primary: #F28891;
			--indicator-secondary: #601d23;
			--select2-opt-group: #151015;
			--input-box-outline: #151015;
			--mute-button-normal: #E4739D;
			--mute-button-mod: #9650A6;
			--pitch1-secondary-channel: #7F7721;
			--pitch1-primary-channel: #F3E79A;
			--pitch1-secondary-note: #7F7721;
			--pitch1-primary-note: #F3E79A;
			--pitch2-secondary-channel: #785E20;
			--pitch2-primary-channel: #F7D086;
			--pitch2-secondary-note: #785E20;
			--pitch2-primary-note: #F7D086;
			--pitch3-secondary-channel: #6E4219;
			--pitch3-primary-channel: #F9B881;
			--pitch3-secondary-note: #6E4219;
			--pitch3-primary-note: #F9B881;
			--pitch4-secondary-channel: #79351F;
			--pitch4-primary-channel: #F7A086;
			--pitch4-secondary-note: #79351F;
			--pitch4-primary-note: #F7A086;
			--pitch5-secondary-channel: #81272F;
			--pitch5-primary-channel: #F28891;
			--pitch5-secondary-note: #81272F;
			--pitch5-primary-note: #F28891;
			--pitch6-secondary-channel: #8F224D;
			--pitch6-primary-channel: #E4739D;
			--pitch6-secondary-note: #8F224D;
			--pitch6-primary-note: #E4739D;
			--pitch7-secondary-channel: #611548;
			--pitch7-primary-channel: #CF63A6;
			--pitch7-secondary-note: #611548;
			--pitch7-primary-note: #CF63A6;
			--pitch8-secondary-channel: #561253;
			--pitch8-primary-channel: #B557A9;
			--pitch8-secondary-note: #4D104A;
			--pitch8-primary-note: #B557A9;
			--pitch9-secondary-channel: #4c1260;
			--pitch9-primary-channel: #9650A6;
			--pitch9-secondary-note: #3C0F4C;
			--pitch9-primary-note: #9650A6;
			--pitch10-secondary-channel: #3e1d78;
			--pitch10-primary-channel: #704D9E;
			--pitch10-secondary-note: #27124C;
			--pitch10-primary-note: #704D9E;
			--noise1-secondary-channel: #A7A578;
			--noise1-primary-channel: #EFE9AC;
			--noise1-secondary-note: #A7A578;
			--noise1-primary-note: #EFE9AC;
			--noise2-secondary-channel: #947A5F;
			--noise2-primary-channel: #FBCEA8;
			--noise2-secondary-note: #947A5F;
			--noise2-primary-note: #FBCEA8;
			--noise3-secondary-channel: #A3635D;
			--noise3-primary-channel: #F4A5AB;
			--noise3-secondary-note: #A3635D;
			--noise3-primary-note: #F4A5AB;
			--noise4-secondary-channel: #724D60;
			--noise4-primary-channel: #CD90B6;
			--noise4-secondary-note: #724D60;
			--noise4-primary-note: #CD90B6;
			--noise5-secondary-channel: #503F5C;
			--noise5-primary-channel: #7C6A9E;
			--noise5-secondary-note: #503F5C;
			--noise5-primary-note: #7C6A9E;
			--mod1-secondary-channel: #371883;
			--mod1-primary-channel: #6416C6;
			--mod1-secondary-note: #1F0A52;
			--mod1-primary-note: #6416C6;
			--mod2-secondary-channel: #690645;
			--mod2-primary-channel: #E52FA2;
			--mod2-secondary-note: #690645;
			--mod2-primary-note: #E52FA2;
			--mod3-secondary-channel: #943618;
			--mod3-primary-channel: #eb5b2c;
			--mod3-secondary-note: #943618;
			--mod3-primary-note: #eb5b2c;
			--mod4-secondary-channel: #928409;
			--mod4-primary-channel: #ecd50e;
			--mod4-secondary-note: #928409;
			--mod4-primary-note: #ecd50e;
			--mod-label-primary: #282828;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;
		}`,toxic:`
		:root {
			--page-margin: #010003;
			--editor-background: #010003;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(147 195 0);
			--box-selection-fill: rgb(145 174 73 / 49%);
			--loop-accent: #BCDE2C;
			--link-accent: #edff9f;
			--ui-widget-background: #261e2e;
			--ui-widget-focus: #322042;
			--pitch-background: #141c15;
			--tonic: #282c21;
			--fifth-note: #18221a;
			--white-piano-key: #e3e3e3;
			--black-piano-key: #2d2d2d;
			--use-color-formula: false;
			--track-editor-bg-pitch: #38293e;
			--track-editor-bg-pitch-dim: #251c29;
			--track-editor-bg-noise: #2c304c;
			--track-editor-bg-noise-dim: #191b2b;
			--track-editor-bg-mod: #311b32;
			--track-editor-bg-mod-dim: #1d101e;
			--multiplicative-mod-slider: #977da9;
			--overwriting-mod-slider: #798FA7;
			--indicator-primary: #aae9ff;
			--indicator-secondary: #253e46;
			--select2-opt-group: #110d15;
			--input-box-outline: #110d15;
			--mute-button-normal: #8f5ad1;
			--mute-button-mod: #482574;
			--pitch1-secondary-channel: #6b7f19;
			--pitch1-primary-channel: #BCDE2C;
			--pitch1-secondary-note: #6b7f19;
			--pitch1-primary-note: #BCDE2C;
			--pitch2-secondary-channel: #497a31;
			--pitch2-primary-channel: #7BD152;
			--pitch2-secondary-note: #497a31;
			--pitch2-primary-note: #7BD152;
			--pitch3-secondary-channel: #286b40;
			--pitch3-primary-channel: #45BE71;
			--pitch3-secondary-note: #286b40;
			--pitch3-primary-note: #45BE71;
			--pitch4-secondary-channel: #125140;
			--pitch4-primary-channel: #25A884;
			--pitch4-secondary-note: #125140;
			--pitch4-primary-note: #25A884;
			--pitch5-secondary-channel: #114c49;
			--pitch5-primary-channel: #21908C;
			--pitch5-secondary-note: #114c49;
			--pitch5-primary-note: #21908C;
			--pitch6-secondary-channel: #143843;
			--pitch6-primary-channel: #2B788E;
			--pitch6-secondary-note: #143843;
			--pitch6-primary-note: #2B788E;
			--pitch7-secondary-channel: #1d354e;
			--pitch7-primary-channel: #355F8D;
			--pitch7-secondary-note: #1a2f46;
			--pitch7-primary-note: #355F8D;
			--pitch8-secondary-channel: #2c2e5a;
			--pitch8-primary-channel: #414486;
			--pitch8-secondary-note: #1e1f3d;
			--pitch8-primary-note: #414486;
			--pitch9-secondary-channel: #3c1f5e;
			--pitch9-primary-channel: #5e3b89;
			--pitch9-secondary-note: #25133b;
			--pitch9-primary-note: #5e3b89;
			--pitch10-secondary-channel: #510264;
			--pitch10-primary-channel: #720d8a;
			--pitch10-secondary-note: #440154;
			--pitch10-primary-note: #720d8a;
			--noise1-secondary-channel: #BCDE2C;
			--noise1-primary-channel: #edff9f;
			--noise1-secondary-note: #BCDE2C;
			--noise1-primary-note: #edff9f;
			--noise2-secondary-channel: #45BE71;
			--noise2-primary-channel: #89ffb4;
			--noise2-secondary-note: #45BE71;
			--noise2-primary-note: #89ffb4;
			--noise3-secondary-channel: #21908C;
			--noise3-primary-channel: #72fffa;
			--noise3-secondary-note: #21908C;
			--noise3-primary-note: #72fffa;
			--noise4-secondary-channel: #355F8D;
			--noise4-primary-channel: #7cb6f5;
			--noise4-secondary-note: #355F8D;
			--noise4-primary-note: #7cb6f5;
			--noise5-secondary-channel: #482574;
			--noise5-primary-channel: #8f5ad1;
			--noise5-secondary-note: #48257A;
			--noise5-primary-note: #8f5ad1;
			--mod1-secondary-channel: #815a16;
			--mod1-primary-channel: #F5AB29;
			--mod1-secondary-note: #815a16;
			--mod1-primary-note: #F5AB29;
			--mod2-secondary-channel: #4d341a;
			--mod2-primary-channel: #C98540;
			--mod2-secondary-note: #4d341a;
			--mod2-primary-note: #C98540;
			--mod3-secondary-channel: #643734;
			--mod3-primary-channel: #A75D58;
			--mod3-secondary-note: #643734;
			--mod3-primary-note: #A75D58;
			--mod4-secondary-channel: #461430;
			--mod4-primary-channel: #812359;
			--mod4-secondary-note: #3f112b;
			--mod4-primary-note: #812359;
			--mod-label-primary: #282828;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;
		}`,"violet verdant":`
		:root {
			--page-margin: #0e031a;
			--editor-background: #0e031a;
			--hover-preview: #e5ffea;
			--playhead: rgba(255, 255, 255, 0.9);
			--primary-text: #f0e0ff;
			--secondary-text: #706087;
			--inverted-text: black;
			--text-selection: rgba(119,68,255,0.99);
			--box-selection-fill: #225835;
			--loop-accent: #8f00fb;
			--link-accent: #82dd5d;
			--ui-widget-background: #303c66;
			--ui-widget-focus: #62559b;
			--pitch-background: #293b52;
			--tonic: #5b46ad;
			--fifth-note: #42604d;
			--white-piano-key: #f6e8ff;
			--black-piano-key: #5a4972;
			--use-color-formula: true;
			--track-editor-bg-pitch: #392a46;
			--track-editor-bg-pitch-dim: #1c1d28;
			--track-editor-bg-noise: #403150;
			--track-editor-bg-noise-dim: #161313;
			--track-editor-bg-mod: #253c25;
			--track-editor-bg-mod-dim: #0c1811;
			--multiplicative-mod-slider: #606c9f;
			--overwriting-mod-slider: #6850b5;
			--indicator-primary: #9c64f7;
			--indicator-secondary: #393e4f;
			--select2-opt-group: #5d576f;
			--input-box-outline: #403150;
			--mute-button-normal: #82dd5d;
			--mute-button-mod: #945de5;
			--mod-label-primary: #312840;
			--mod-label-secondary-text: rgb(88 70 104);
			--mod-label-primary-text: #82dd5d;
			--pitch-secondary-channel-hue: 64;
			--pitch-secondary-channel-hue-scale: 6.1;
			--pitch-secondary-channel-sat: 63.3;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 40;
			--pitch-secondary-channel-lum-scale: 0.05;
			--pitch-primary-channel-hue: 64;
			--pitch-primary-channel-hue-scale: 6.1;
			--pitch-primary-channel-sat: 90;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 67.5;
			--pitch-primary-channel-lum-scale: 0.05;
			--pitch-secondary-note-hue: 32;
			--pitch-secondary-note-hue-scale: 6.1;
			--pitch-secondary-note-sat: 87.9;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 25;
			--pitch-secondary-note-lum-scale: 0.05;
			--pitch-primary-note-hue: 64;
			--pitch-primary-note-hue-scale: 6.1;
			--pitch-primary-note-sat: 90;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 85.6;
			--pitch-primary-note-lum-scale: 0.025;
			--noise-secondary-channel-hue: 192;
			--noise-secondary-channel-hue-scale: 2;
			--noise-secondary-channel-sat: 45;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 32;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 192;
			--noise-primary-channel-hue-scale: 2;
			--noise-primary-channel-sat: 33;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 43.5;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 160;
			--noise-secondary-note-hue-scale: 2;
			--noise-secondary-note-sat: 33.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 45;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 192;
			--noise-primary-note-hue-scale: 2;
			--noise-primary-note-sat: 46.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 74;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 132;
			--mod-secondary-channel-hue-scale: 1.5;
			--mod-secondary-channel-sat: 88;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 50;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 132;
			--mod-primary-channel-hue-scale: 1.5;
			--mod-primary-channel-sat: 96;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 80;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 100;
			--mod-secondary-note-hue-scale: 1.5;
			--mod-secondary-note-sat: 92;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 45;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 132;
			--mod-primary-note-hue-scale: 1.5;
			--mod-primary-note-sat: 96;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 85;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary: #91879f;
			--disabled-note-secondary: #6a677a;
		}`,portal:`
		:root {
			--page-margin: #04081a;
			--editor-background: #04081a;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgba(119,68,255,0.99);
			--box-selection-fill: rgb(0 72 181);
			--loop-accent: #44d4ff;
			--link-accent: #ffa500;
			--ui-widget-background: #212c4a;
			--ui-widget-focus: #121f42;
			--pitch-background: #1b263e;
			--tonic: #995d00;
			--fifth-note: #0898a1;
			--white-piano-key: #ffffff;
			--black-piano-key: #516d7a;
			--use-color-formula: false;
			--track-editor-bg-pitch: #213352;
			--track-editor-bg-pitch-dim: #152032;
			--track-editor-bg-noise: #403524;
			--track-editor-bg-noise-dim: #2a1f0e;
			--track-editor-bg-mod: #234;
			--track-editor-bg-mod-dim: #123;
			--multiplicative-mod-slider: #456;
			--overwriting-mod-slider: #654;
			--indicator-primary: #5490ff;
			--indicator-secondary: #444;
			--select2-opt-group: #585858;
			--input-box-outline: #333;
			--mute-button-normal: #3372ff;
			--mute-button-mod: #dd872f;
			--pitch1-secondary-channel: #0099A1;
			--pitch1-primary-channel: #77f7ff;
			--pitch1-secondary-note: #00BDC7;
			--pitch1-primary-note: #92F9FF;
			--pitch2-secondary-channel: #0083a1;
			--pitch2-primary-channel: #35d9ff;
			--pitch2-secondary-note: #0083a1;
			--pitch2-primary-note: #a4eeff;
			--pitch3-secondary-channel: #0074c7;
			--pitch3-primary-channel: #3caeff;
			--pitch3-secondary-note: #00477a;
			--pitch3-primary-note: #aadcff;
			--pitch4-secondary-channel: #0039a1;
			--pitch4-primary-channel: #2673ff;
			--pitch4-secondary-note: #001f56;
			--pitch4-primary-note: #9bbeff;
			--pitch5-secondary-channel: #31148b;
			--pitch5-primary-channel: #7042ff;
			--pitch5-secondary-note: #190656;
			--pitch5-primary-note: #b79fff;
			--pitch6-secondary-channel: #979934;
			--pitch6-primary-channel: #fbff2f;
			--pitch6-secondary-note: #5d5e0a;
			--pitch6-primary-note: #fdff9a;
			--pitch7-secondary-channel: #b78f00;
			--pitch7-primary-channel: #ffd747;
			--pitch7-secondary-note: #5e3d00;
			--pitch7-primary-note: #ffe381;
			--pitch8-secondary-channel: #9d6500;
			--pitch8-primary-channel: #ffa400;
			--pitch8-secondary-note: #583900;
			--pitch8-primary-note: #ffd07c;
			--pitch9-secondary-channel: #744203;
			--pitch9-primary-channel: #ff8e00;
			--pitch9-secondary-note: #502d00;
			--pitch9-primary-note: #ffcb89;
			--pitch10-secondary-channel: #a32d00;
			--pitch10-primary-channel: #ff885b;
			--pitch10-secondary-note: #521700;
			--pitch10-primary-note: #ffb397;
			--noise1-secondary-channel: #6e2210;
			--noise1-primary-channel: #ff4600;
			--noise1-secondary-note: #4c1a08;
			--noise1-primary-note: #ffc9b4;
			--noise2-secondary-channel: #6a3110;
			--noise2-primary-channel: #ff782a;
			--noise2-secondary-note: #4c1f05;
			--noise2-primary-note: #ffb488;
			--noise3-secondary-channel: #72460e;
			--noise3-primary-channel: #d9871f;
			--noise3-secondary-note: #442905;
			--noise3-primary-note: #ffdcae;
			--noise4-secondary-channel: #837a0f;
			--noise4-primary-channel: #f7ea55;
			--noise4-secondary-note: #605906;
			--noise4-primary-note: #fff9ab;
			--noise5-secondary-channel: #8c8f00;
			--noise5-primary-channel: #fdff90;
			--noise5-secondary-note: #606200;
			--noise5-primary-note: #feffbc;
			--mod1-secondary-channel: #561b97;
			--mod1-primary-channel: #aa66f5;
			--mod1-secondary-note: #30075c;
			--mod1-primary-note: #cd9fff;
			--mod2-secondary-channel: #5116df;
			--mod2-primary-channel: #6b2dff;
			--mod2-secondary-note: #36138b;
			--mod2-primary-note: #bea3ff;
			--mod3-secondary-channel: #2535a1;
			--mod3-primary-channel: #3f57ff;
			--mod3-secondary-note: #0e185c;
			--mod3-primary-note: #8494ff;
			--mod4-secondary-channel: #1b5883;
			--mod4-primary-channel: #5eb7f5;
			--mod4-secondary-note: #072f4a;
			--mod4-primary-note: #63beff;
			--mod-label-primary: #24293a;
			--mod-label-secondary-text: #454d4e;
			--mod-label-primary-text: #7bd4ff;
			--disabled-note-primary: #072f4a;
			--disabled-note-secondary: #6585a7;
		}`,fusion:`:root {
			--page-margin: #0c0306;
			--editor-background: #0c0306;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #26d9cd;
			--secondary-text: #ff6666;
			--inverted-text: white;
			--text-selection: #ffffff;
			--box-selection-fill: #ff00004d;
			--loop-accent: #ff6666;
			--link-accent: white;
			--ui-widget-background: #232323;
			--ui-widget-focus: #303030;
			--pitch-background: hsl(61deg 100% 70% / 25%);
			--tonic: #66a3ff40;
			--fifth-note: #ff666640;
			--white-piano-key: #cdcdcd;
			--black-piano-key: #232323;
			--use-color-formula: false;
			--track-editor-bg-pitch: #404040bf;
			--track-editor-bg-pitch-dim: #151515;
			--track-editor-bg-noise: #404040bf;
			--track-editor-bg-noise-dim: #151515;
			--track-editor-bg-mod: #404040bf;
			--track-editor-bg-mod-dim: #151515;
			--multiplicative-mod-slider: #ef7692;
			--overwriting-mod-slider: #f43e69;
			--indicator-primary: #26d9cd;
			--indicator-secondary: hsl(176deg 70% 25%);
			--select2-opt-group: #232323;
			--input-box-outline: #141e34;
			--mute-button-normal: #26d9cd;
			--mute-button-mod: hsl(346deg 70% 50%);
			--pitch1-secondary-channel: #bf4040;
			--pitch1-primary-channel: #ff6666;
			--pitch1-secondary-note: #bf4040;
			--pitch1-primary-note: #ff6666;
			--pitch2-secondary-channel: #bf5b40;
			--pitch2-primary-channel: #ff8766;
			--pitch2-secondary-note: #bf5b40;
			--pitch2-primary-note: #ff8766;
			--pitch3-secondary-channel: #bf7940;
			--pitch3-primary-channel: #ffab66;
			--pitch3-secondary-note: #bf7940;
			--pitch3-primary-note: #ffab66;
			--pitch4-secondary-channel: #bf9b40;
			--pitch4-primary-channel: #ffd466;
			--pitch4-secondary-note: #bf9b40;
			--pitch4-primary-note: #ffd466;
			--pitch5-secondary-channel: #bdbf40;
			--pitch5-primary-channel: #fcff66;
			--pitch5-secondary-note: #bdbf40;
			--pitch5-primary-note: #fcff66;
			--pitch6-secondary-channel: #9dbf40;
			--pitch6-primary-channel: #d6ff66;
			--pitch6-secondary-note: #9dbf40;
			--pitch6-primary-note: #d6ff66;
			--pitch7-secondary-channel: #9dbf40;
			--pitch7-primary-channel: #fcff66;
			--pitch7-secondary-note: #9dbf40;
			--pitch7-primary-note: #fcff66;
			--pitch8-secondary-channel: #bf9b40;
			--pitch8-primary-channel: #ffd466;
			--pitch8-secondary-note: #bf9b40;
			--pitch8-primary-note: #ffd466;
			--pitch9-secondary-channel: #bf5b40;
			--pitch9-primary-channel: #ffab66;
			--pitch9-secondary-note: #bf5b40;
			--pitch9-primary-note: #ffab66;
			--pitch10-secondary-channel: #d15a1f;
			--pitch10-primary-channel: #ff8766;
			--pitch10-secondary-note: #d15a1f;
			--pitch10-primary-note: #ff8766;
			--noise1-secondary-channel: #4073bf;
			--noise1-primary-channel: #66a3ff;
			--noise1-secondary-note: #4073bf;
			--noise1-primary-note: #66a3ff;
			--noise2-secondary-channel: #405dbf;
			--noise2-primary-channel: #668aff;
			--noise2-secondary-note: #405dbf;
			--noise2-primary-note: #668aff;
			--noise3-secondary-channel: #4f40bf;
			--noise3-primary-channel: #7866ff;
			--noise3-secondary-note: #4f40bf;
			--noise3-primary-note: #7866ff;
			--noise4-secondary-channel: #8840bf;
			--noise4-primary-channel: #bd66ff;
			--noise4-secondary-note: #8840bf;
			--noise4-primary-note: #bd66ff;
			--noise5-secondary-channel: #bf40b5;
			--noise5-primary-channel: #ff66f2;
			--noise5-secondary-note: #bf40b5;
			--noise5-primary-note: #ff66f2;
			--mod1-secondary-channel: #cc6666;
			--mod1-primary-channel: #ff9999;
			--mod1-secondary-note: #cc6666;
			--mod1-primary-note: #ff9999;
			--mod2-secondary-channel: #cc7766;
			--mod2-primary-channel: #ffaa99;
			--mod2-secondary-note: #bf5540;
			--mod2-primary-note: #ffaa99;
			--mod3-secondary-channel: #cc8866;
			--mod3-primary-channel: #ffbb99;
			--mod3-secondary-note: #cc8866;
			--mod3-primary-note: #ffbb99;
			--mod4-secondary-channel: #cc9966;
			--mod4-primary-channel: #ffcc99;
			--mod4-secondary-note: #cc9966;
			--mod4-primary-note: #ffcc99;
			--mod-label-primary: #999;
			--mod-label-secondary-text: #333;
			--mod-label-primary-text: black;
			--disabled-note-primary: #696969;
			--disabled-note-secondary: #232323;
		}`,inverse:`:root {
			--page-margin: #c4c8e3;
			--editor-background: #c4c8e3;
			--hover-preview: #000000;
			--playhead: #243953;
			--primary-text: black;
			--secondary-text: #855b95;
			--inverted-text: black;
			--text-selection: rgb(132 125 255);
			--box-selection-fill: rgb(174 109 73 / 65%);
			--loop-accent: #EC897D;
			--link-accent: #4e00c8;
			--ui-widget-background: #e7e7ff;
			--ui-widget-focus: #d0d3e9;
			--pitch-background: #ffffff;
			--tonic: #bbbbbb;
			--fifth-note: #dcdcdc;
			--white-piano-key: #ffffff;
			--black-piano-key: #615f66;
			--use-color-formula: false;
			--track-editor-bg-pitch: #e9ebff;
			--track-editor-bg-pitch-dim: #e9ebff;
			--track-editor-bg-noise: #fdf2fe;
			--track-editor-bg-noise-dim: #fdf2fe;
			--track-editor-bg-mod: #dbdefe;
			--track-editor-bg-mod-dim: #dbdefe;
			--multiplicative-mod-slider: #6900b3;
			--overwriting-mod-slider: #004b9d;
			--indicator-primary: #ff633d;
			--indicator-secondary: #933822;
			--select2-opt-group: #e7e7ff;
			--input-box-outline: #e7e7ff;
			--mute-button-normal: #0072ef;
			--mute-button-mod: #002e67;
			--pitch1-secondary-channel: #b77d6e;
			--pitch1-primary-channel: #ff9d85;
			--pitch1-secondary-note: #b77d6e;
			--pitch1-primary-note: #ff9d85;
			--pitch2-secondary-channel: #be8821;
			--pitch2-primary-channel: #FFAF12;
			--pitch2-secondary-note: #be8821;
			--pitch2-primary-note: #FFAF12;
			--pitch3-secondary-channel: #3a62a4;
			--pitch3-primary-channel: #528ae6;
			--pitch3-secondary-note: #3a62a4;
			--pitch3-primary-note: #528ae6;
			--pitch4-secondary-channel: #3e8d78;
			--pitch4-primary-channel: #4EC5A7;
			--pitch4-secondary-note: #3e8d78;
			--pitch4-primary-note: #4EC5A7;
			--pitch5-secondary-channel: #84906d;
			--pitch5-primary-channel: #aabf84;
			--pitch5-secondary-note: #84906d;
			--pitch5-primary-note: #aabf84;
			--pitch6-secondary-channel: #bd6345;
			--pitch6-primary-channel: #e59a81;
			--pitch6-secondary-note: #bd6345;
			--pitch6-primary-note: #e59a81;
			--pitch7-secondary-channel: #aa592f;
			--pitch7-primary-channel: #FE813E;
			--pitch7-secondary-note: #aa592f;
			--pitch7-primary-note: #FE813E;
			--pitch8-secondary-channel: #b2a171;
			--pitch8-primary-channel: #ffd76d;
			--pitch8-secondary-note: #b2a171;
			--pitch8-primary-note: #ffd76d;
			--pitch9-secondary-channel: #4f6177;
			--pitch9-primary-channel: #798FA7;
			--pitch9-secondary-note: #4f6177;
			--pitch9-primary-note: #798FA7;
			--pitch10-secondary-channel: #165162;
			--pitch10-primary-channel: #107895;
			--pitch10-secondary-note: #165162;
			--pitch10-primary-note: #107895;
			--noise1-secondary-channel: #71617C;
			--noise1-primary-channel: #977da9;
			--noise1-secondary-note: #71617C;
			--noise1-primary-note: #977da9;
			--noise2-secondary-channel: #4a4c5b;
			--noise2-primary-channel: #707591;
			--noise2-secondary-note: #4a4c5b;
			--noise2-primary-note: #707591;
			--noise3-secondary-channel: #817c7b;
			--noise3-primary-channel: #A19D9C;
			--noise3-secondary-note: #817c7b;
			--noise3-primary-note: #A19D9C;
			--noise4-secondary-channel: #ab847b;
			--noise4-primary-channel: #EAAC9D;
			--noise4-secondary-note: #ab847b;
			--noise4-primary-note: #EAAC9D;
			--noise5-secondary-channel: #B49D74;
			--noise5-primary-channel: #dec69b;
			--noise5-secondary-note: #B49D74;
			--noise5-primary-note: #dec69b;
			--mod1-secondary-channel: #722124;
			--mod1-primary-channel: #D13A41;
			--mod1-secondary-note: #722124;
			--mod1-primary-note: #D13A41;
			--mod2-secondary-channel: #213657;
			--mod2-primary-channel: #34558B;
			--mod2-secondary-note: #213657;
			--mod2-primary-note: #34558B;
			--mod3-secondary-channel: #555D46;
			--mod3-primary-channel: #848f6d;
			--mod3-secondary-note: #555D46;
			--mod3-primary-note: #848f6d;
			--mod4-secondary-channel: #71617C;
			--mod4-primary-channel: #a68ab9;
			--mod4-secondary-note: #71617C;
			--mod4-primary-note: #a68ab9;
			--mod-label-primary: #e9e9e9;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: black;
			--disabled-note-primary: #959595;
			--disabled-note-secondary: #6e6e6e;
			}`,nebula:`
		:root {
			--page-margin: #040410;
			--editor-background: #150e1f;
			--hover-preview: white;
			--playhead: rgba(255, 255, 255, 0.9);
			--primary-text: white;
			--secondary-text: #8C849A;
			--inverted-text: black;
			--text-selection: rgba(141,79,201,0.99);
			--box-selection-fill: #311E44;
			--loop-accent: #CC688C;
			--link-accent: #817DC9;
			--ui-widget-background: #44394F;
			--ui-widget-focus: #7A6386;
			--pitch-background: #393e4f40;
			--tonic: #7D5C9EC0;
			--fifth-note: #ab77bd50;
			--white-piano-key: #EEEEEE;
			--black-piano-key: #5F5566;
			--use-color-formula: true;
			--track-editor-bg-pitch: #46374C;
			--track-editor-bg-pitch-dim: #1F1C2850;
			--track-editor-bg-noise: #3D353B;
			--track-editor-bg-noise-dim: #16131550;
			--track-editor-bg-mod: #623F4C;
			--track-editor-bg-mod-dim: #361A2450;
			--multiplicative-mod-slider: #9F6E6A;
			--overwriting-mod-slider: #A664B5;
			--indicator-primary: #CC6B8E;
			--indicator-secondary: #44394F;
			--select2-opt-group: #6A576F;
			--input-box-outline: #222;
			--mute-button-normal: #BF91DC;
			--mute-button-mod: #DC8C9A;
			--mod-label-primary: #3A2840;
			--mod-label-secondary-text: #62485E;
			--mod-label-primary-text: white;
			--pitch-secondary-channel-hue: -96;
			--pitch-secondary-channel-hue-scale: 4.2;
			--pitch-secondary-channel-sat: 50.3;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 40;
			--pitch-secondary-channel-lum-scale: 0.05;
			--pitch-primary-channel-hue: -96;
			--pitch-primary-channel-hue-scale: 4.2;
			--pitch-primary-channel-sat: 70;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 67.5;
			--pitch-primary-channel-lum-scale: 0.05;
			--pitch-secondary-note-hue: -96;
			--pitch-secondary-note-hue-scale: 4.2;
			--pitch-secondary-note-sat: 70.9;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 25;
			--pitch-secondary-note-lum-scale: 0.05;
			--pitch-primary-note-hue: -96;
			--pitch-primary-note-hue-scale: 4.2;
			--pitch-primary-note-sat: 90;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 85.6;
			--pitch-primary-note-lum-scale: 0.025;
			--noise-secondary-channel-hue: 16;
			--noise-secondary-channel-hue-scale: -1.33;
			--noise-secondary-channel-sat: 25;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 42;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 16;
			--noise-primary-channel-hue-scale: -1.33;
			--noise-primary-channel-sat: 33;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 63.5;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 12;
			--noise-secondary-note-hue-scale: -1.33;
			--noise-secondary-note-sat: 33.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 55;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 12;
			--noise-primary-note-hue-scale: -1.33;
			--noise-primary-note-sat: 46.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 74;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 12;
			--mod-secondary-channel-hue-scale: -.75;
			--mod-secondary-channel-sat: 50;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 50;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 12;
			--mod-primary-channel-hue-scale: -.75;
			--mod-primary-channel-sat: 70;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 80;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 12;
			--mod-secondary-note-hue-scale: -.75;
			--mod-secondary-note-sat: 75;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 45;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 12;
			--mod-primary-note-hue-scale: -.75;
			--mod-primary-note-sat: 85;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 85;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary: #aaa;
			--disabled-note-secondary: #666;
		}`,"roe light":`
		:root {
			--page-margin: #fff5f5;
			--editor-background: #fff5f5;
			--hover-preview: #0e8bf1;
			--playhead: 000;
			--primary-text: #0e8bf1;
			--secondary-text: #f10e0e;
			--inverted-text: white;
			--text-selection: #ff4444fc;
			--box-selection-fill: #ff00004d;
			--loop-accent: #9a75ff;
			--link-accent: #ff7070;
			--ui-widget-background: #bdc9e5;
			--ui-widget-focus: #a3b7e5;
			--pitch-background: #d0c7db;
			--tonic: #bed3e4;
			--fifth-note: #e7c6c6;
			--white-piano-key: #cdcdcd;
			--black-piano-key: #232323;
			--use-color-formula: false;
			--track-editor-bg-pitch: #e5e1ea;
			--track-editor-bg-pitch-dim: #cbc4d4;
			--track-editor-bg-noise: #e0ddee;
			--track-editor-bg-noise-dim: #c1bade;
			--track-editor-bg-mod: #d8e6f3;
			--track-editor-bg-mod-dim: #b1cce7;
			--multiplicative-mod-slider: #8097cb;
			--overwriting-mod-slider: #8097cb;
			--indicator-primary: #FF2A2A;
			--indicator-secondary: #92a6d3;
			--select2-opt-group: #b6c4e2;
			--input-box-outline: #bdc9e5;
			--mute-button-normal: #66baff;
			--mute-button-mod: #1a98ff;
			--pitch1-secondary-channel: #273c90;
			--pitch1-primary-channel: #476BFF;
			--pitch1-secondary-note: #273c90;
			--pitch1-primary-note: #476BFF;
			--pitch2-secondary-channel: #3a3898;
			--pitch2-primary-channel: #625FFB;
			--pitch2-secondary-note: #3a3898;
			--pitch2-primary-note: #625FFB;
			--pitch3-secondary-channel: #542780;
			--pitch3-primary-channel: #9C49EC;
			--pitch3-secondary-note: #542780;
			--pitch3-primary-note: #9C49EC;
			--pitch4-secondary-channel: #84225d;
			--pitch4-primary-channel: #fd3fb1;
			--pitch4-secondary-note: #84225d;
			--pitch4-primary-note: #fd3fb1;
			--pitch5-secondary-channel: #8d2323;
			--pitch5-primary-channel: #ff3f3f;
			--pitch5-secondary-note: #8d2323;
			--pitch5-primary-note: #ff3f3f;
			--pitch6-secondary-channel: #84225d;
			--pitch6-primary-channel: #fd3fb1;
			--pitch6-secondary-note: #84225d;
			--pitch6-primary-note: #fd3fb1;
			--pitch7-secondary-channel: #542780;
			--pitch7-primary-channel: #9C49EC;
			--pitch7-secondary-note: #542780;
			--pitch7-primary-note: #9C49EC;
			--pitch8-secondary-channel: #3a3898;
			--pitch8-primary-channel: #625FFB;
			--pitch8-secondary-note: #3a3898;
			--pitch8-primary-note: #625FFB;
			--pitch9-secondary-channel: #273c90;
			--pitch9-primary-channel: #476BFF;
			--pitch9-secondary-note: #273c90;
			--pitch9-primary-note: #476BFF;
			--pitch10-secondary-channel: #165a93;
			--pitch10-primary-channel: #299EFF;
			--pitch10-secondary-note: #165a93;
			--pitch10-primary-note: #299EFF;
			--noise1-secondary-channel: #336bdb;
			--noise1-primary-channel: #4281FF;
			--noise1-secondary-note: #336bdb;
			--noise1-primary-note: #4281FF;
			--noise2-secondary-channel: #5e38dc;
			--noise2-primary-channel: #7347FF;
			--noise2-secondary-note: #5e38dc;
			--noise2-primary-note: #7347FF;
			--noise3-secondary-channel: #7d3097;
			--noise3-primary-channel: #9F3CBF;
			--noise3-secondary-note: #7d3097;
			--noise3-primary-note: #9F3CBF;
			--noise4-secondary-channel: #ad2559;
			--noise4-primary-channel: #D3326F;
			--noise4-secondary-note: #ad2559;
			--noise4-primary-note: #D3326F;
			--noise5-secondary-channel: #d02525;
			--noise5-primary-channel: #FF2A2A;
			--noise5-secondary-note: #d02525;
			--noise5-primary-note: #FF2A2A;
			--mod1-secondary-channel: #35415a;
			--mod1-primary-channel: #47587a;
			--mod1-secondary-note: #35415a;
			--mod1-primary-note: #47587a;
			--mod2-secondary-channel: #5a5374;
			--mod2-primary-channel: #716791;
			--mod2-secondary-note: #5a5374;
			--mod2-primary-note: #716791;
			--mod3-secondary-channel: #53385c;
			--mod3-primary-channel: #6f4c7b;
			--mod3-secondary-note: #53385c;
			--mod3-primary-note: #6f4c7b;
			--mod4-secondary-channel: #7e4e60;
			--mod4-primary-channel: #9e6279;
			--mod4-secondary-note: #7e4e60;
			--mod4-primary-note: #9e6279;
			--mod-label-primary: #d0c7db;
			--mod-label-secondary-text: #cb3434;
			--mod-label-primary-text: black;
			--disabled-note-primary: #616161;
			--disabled-note-secondary: #474747;
		}`,energized:`
		:root {
			--page-margin: #000a08;
			--editor-background: #000a08;
			--hover-preview: #ffffcc;
			--playhead: #ccfff5;
			--primary-text: white;
			--secondary-text: #d9d98c;
			--inverted-text: black;
			--text-selection: #ffff6659;
			--box-selection-fill: #ffffff33;
			--loop-accent: #ffff00;
			--link-accent: #00ffcc;
			--ui-widget-background: #141f1d;
			--ui-widget-focus: #24423d;
			--pitch-background: #001410;
			--tonic: #00241d;
			--fifth-note: #ffff6633;
			--white-piano-key: #66998f;
			--black-piano-key: #141f1d;
			--use-color-formula: false;
			--track-editor-bg-pitch: #66998f40;
			--track-editor-bg-pitch-dim: #293d3940;
			--track-editor-bg-noise: #66998f40;
			--track-editor-bg-noise-dim: #293d3940;
			--track-editor-bg-mod: #99996640;
			--track-editor-bg-mod-dim: #3d3d2940;
			--multiplicative-mod-slider: #ffff00;
			--overwriting-mod-slider: #00ffcc;
			--indicator-primary: #ffff00;
			--indicator-secondary: #141f1d;
			--select2-opt-group: #1b312e;
			--input-box-outline: #141f1d;
			--mute-button-normal: #00ffcc;
			--mute-button-mod: #00997a;
			--pitch1-secondary-channel: #bfbf40;
			--pitch1-primary-channel: #ffff64;
			--pitch1-secondary-note: #bfbf40;
			--pitch1-primary-note: #ffff64;
			--pitch2-secondary-channel: #a2bf40;
			--pitch2-primary-channel: #e0ff7d;
			--pitch2-secondary-note: #a2bf40;
			--pitch2-primary-note: #e0ff7d;
			--pitch3-secondary-channel: #75bf40;
			--pitch3-primary-channel: #c1ff96;
			--pitch3-secondary-note: #75bf40;
			--pitch3-primary-note: #c1ff96;
			--pitch4-secondary-channel: #40bf51;
			--pitch4-primary-channel: #a2ffaf;
			--pitch4-secondary-note: #40bf51;
			--pitch4-primary-note: #a2ffaf;
			--pitch5-secondary-channel: #40bf86;
			--pitch5-primary-channel: #83ffc8;
			--pitch5-secondary-note: #40bf86;
			--pitch5-primary-note: #83ffc8;
			--pitch6-secondary-channel: #40bfa6;
			--pitch6-primary-channel: #64ffe1;
			--pitch6-secondary-note: #40bfa6;
			--pitch6-primary-note: #64ffe1;
			--pitch7-secondary-channel: #40bf86;
			--pitch7-primary-channel: #83ffc8;
			--pitch7-secondary-note: #40bf86;
			--pitch7-primary-note: #83ffc8;
			--pitch8-secondary-channel: #40bf51;
			--pitch8-primary-channel: #a2ffaf;
			--pitch8-secondary-note: #40bf51;
			--pitch8-primary-note: #a2ffaf;
			--pitch9-secondary-channel: #75bf40;
			--pitch9-primary-channel: #c1ff96;
			--pitch9-secondary-note: #75bf40;
			--pitch9-primary-note: #c1ff96;
			--pitch10-secondary-channel: #a2bf40;
			--pitch10-primary-channel: #e0ff7d;
			--pitch10-secondary-note: #a2bf40;
			--pitch10-primary-note: #e0ff7d;
			--noise1-secondary-channel: #a6a659;
			--noise1-primary-channel: #ffffcc;
			--noise1-secondary-note: #a6a659;
			--noise1-primary-note: #ffffcc;
			--noise2-secondary-channel: #94a659;
			--noise2-primary-channel: #f3ffcc;
			--noise2-secondary-note: #94a659;
			--noise2-primary-note: #f3ffcc;
			--noise3-secondary-channel: #79a659;
			--noise3-primary-channel: #e1ffcc;
			--noise3-secondary-note: #79a659;
			--noise3-primary-note: #e1ffcc;
			--noise4-secondary-channel: #94a659;
			--noise4-primary-channel: #f3ffcc;
			--noise4-secondary-note: #94a659;
			--noise4-primary-note: #f3ffcc;
			--noise5-secondary-channel: #a6a659;
			--noise5-primary-channel: #ffffcc;
			--noise5-secondary-note: #a6a659;
			--noise5-primary-note: #ffffcc;
			--mod1-secondary-channel: #a3a329;
			--mod1-primary-channel: #ffff00;
			--mod1-secondary-note: #a3a329;
			--mod1-primary-note: #ffff00;
			--mod2-secondary-channel: #a38529;
			--mod2-primary-channel: #ffbf00;
			--mod2-secondary-note: #a38529;
			--mod2-primary-note: #ffbf00;
			--mod3-secondary-channel: #a36629;
			--mod3-primary-channel: #ff7f00;
			--mod3-secondary-note: #a36629;
			--mod3-primary-note: #ff7f00;
			--mod4-secondary-channel: #a38529;
			--mod4-primary-channel: #ffbf00;
			--mod4-secondary-note: #a38529;
			--mod4-primary-note: #ffbf00;
			--mod-label-primary: #141f1d;
			--mod-label-secondary-text: #d9d98c;
			--mod-label-primary-text: white;
			--disabled-note-primary: #808080;
			--disabled-note-secondary: #666666;
		}`,neapolitan:`:root {
			--page-margin: #120807;
			--editor-background: #120807;
			--hover-preview: #e79a82;
			--playhead: #e79a82;
			--primary-text: #decdbf;
			--secondary-text: #fa99bb;
			--inverted-text: black;
			--text-selection: #990036;
			--box-selection-fill: rgba(255,255,255,0.2);
			--loop-accent: #f6377a;
			--link-accent: #f6377a;
			--ui-widget-background: #24160f;
			--ui-widget-focus: #362217;
			--pitch-background: #1e1106;
			--tonic: #382414;
			--fifth-note: #41240c;
			--white-piano-key: #e1c5b7;
			--black-piano-key: #482c1e;
			--use-color-formula: false;
			--track-editor-bg-pitch: #4d2a19;
			--track-editor-bg-pitch-dim: #27150c;
			--track-editor-bg-noise: #4d2a19;
			--track-editor-bg-noise-dim: #27150c;
			--track-editor-bg-mod: #4d2a19;
			--track-editor-bg-mod-dim: #27150c;
			--multiplicative-mod-slider: #decdbf;
			--overwriting-mod-slider: #decdbf;
			--indicator-primary: #decdbf;
			--indicator-secondary: #362217;
			--select2-opt-group: #24160f;
			--input-box-outline: #24160f;
			--mute-button-normal: #ff66a1;
			--mute-button-mod: #e61968;
			--pitch1-secondary-channel: #680029;
			--pitch1-primary-channel: #cc0052;
			--pitch1-secondary-note: #660029;
			--pitch1-primary-note: #cc0052;
			--pitch2-secondary-channel: #7e1b43;
			--pitch2-primary-channel: #d32e71;
			--pitch2-secondary-note: #7e1b43;
			--pitch2-primary-note: #d32e71;
			--pitch3-secondary-channel: #aa275e;
			--pitch3-primary-channel: #da5d91;
			--pitch3-secondary-note: #aa275e;
			--pitch3-primary-note: #da5d91;
			--pitch4-secondary-channel: #cc3878;
			--pitch4-primary-channel: #e18bb0;
			--pitch4-secondary-note: #cc3878;
			--pitch4-primary-note: #e18bb0;
			--pitch5-secondary-channel: #d06c9b;
			--pitch5-primary-channel: #e9bad0;
			--pitch5-secondary-note: #d06c9b;
			--pitch5-primary-note: #e9bad0;
			--pitch6-secondary-channel: #c9acc5;
			--pitch6-primary-channel: #f0e8ef;
			--pitch6-secondary-note: #c9acc5;
			--pitch6-primary-note: #f0e8ef;
			--pitch7-secondary-channel: #d06c9b;
			--pitch7-primary-channel: #e9bad0;
			--pitch7-secondary-note: #d06c9b;
			--pitch7-primary-note: #e9bad0;
			--pitch8-secondary-channel: #cc3878;
			--pitch8-primary-channel: #e18bb0;
			--pitch8-secondary-note: #cc3878;
			--pitch8-primary-note: #e18bb0;
			--pitch9-secondary-channel: #aa275e;
			--pitch9-primary-channel: #da5d91;
			--pitch9-secondary-note: #aa275e;
			--pitch9-primary-note: #da5d91;
			--pitch10-secondary-channel: #7e1b43;
			--pitch10-primary-channel: #d32e71;
			--pitch10-secondary-note: #7e1b43;
			--pitch10-primary-note: #d32e71;
			--noise1-secondary-channel: #683a37;
			--noise1-primary-channel: #A85F5A;
			--noise1-secondary-note: #683a37;
			--noise1-primary-note: #A85F5A;
			--noise2-secondary-channel: #7c4a41;
			--noise2-primary-channel: #B47A70;
			--noise2-secondary-note: #7c4a41;
			--noise2-primary-note: #B47A70;
			--noise3-secondary-channel: #935f4d;
			--noise3-primary-channel: #c09587;
			--noise3-secondary-note: #935f4d;
			--noise3-primary-note: #C09587;
			--noise4-secondary-channel: #aa795a;
			--noise4-primary-channel: #cdb09d;
			--noise4-secondary-note: #aa795a;
			--noise4-primary-note: #CDAF9D;
			--noise5-secondary-channel: #bb987c;
			--noise5-primary-channel: #decdbf;
			--noise5-secondary-note: #bb987c;
			--noise5-primary-note: #decdbf;
			--mod1-secondary-channel: #6ca784;
			--mod1-primary-channel: #accdb9;
			--mod1-secondary-note: #6ca784;
			--mod1-primary-note: #accdb9;
			--mod2-secondary-channel: #7daa9f;
			--mod2-primary-channel: #bbd3cd;
			--mod2-secondary-note: #7daa9f;
			--mod2-primary-note: #bbd3cd;
			--mod3-secondary-channel: #70a3a9;
			--mod3-primary-channel: #afcccf;
			--mod3-secondary-note: #70a3a9;
			--mod3-primary-note: #afcccf;
			--mod4-secondary-channel: #5698b8;
			--mod4-primary-channel: #9ec3d6;
			--mod4-secondary-note: #5698b8;
			--mod4-primary-note: #9ec3d6;
			--mod-label-primary: #24160f;
			--mod-label-secondary-text: #E5AFC2;
			--mod-label-primary-text: #decdbf;
			--disabled-note-primary: #bababa;
			--disabled-note-secondary: #878787;
		}`,mono:`:root {
			--page-margin: #000;
			--editor-background: #000;
			--hover-preview: #808080;
			--playhead: #808080;
			--primary-text: white;
			--secondary-text: #cccccc;
			--inverted-text: black;
			--text-selection: #696969;
			--box-selection-fill: #cccccc40;
			--loop-accent: #808080;
			--link-accent: white;
			--ui-widget-background: #232323;
			--ui-widget-focus: #303030;
			--pitch-background: #1a1a1a;
			--tonic: #262626;
			--fifth-note: #0d0d0d;
			--white-piano-key: #808080;
			--black-piano-key: #232323;
			--use-color-formula: true;
			--track-editor-bg-pitch: #262626;
			--track-editor-bg-pitch-dim: #1a1a1a;
			--track-editor-bg-noise: #262626;
			--track-editor-bg-noise-dim: #1a1a1a;
			--track-editor-bg-mod: #262626;
			--track-editor-bg-mod-dim: #1a1a1a;
			--multiplicative-mod-slider: #808080;
			--overwriting-mod-slider: #808080;
			--indicator-primary: #808080;
			--indicator-secondary: #333333;
			--select2-opt-group: #232323;
			--input-box-outline: #222;
			--mute-button-normal: #808080;
			--mute-button-mod: #808080;
			--mod-label-primary: #232323;
			--mod-label-secondary-text: #696969;
			--mod-label-primary-text: #cdcdcd;
			--pitch-secondary-channel-hue: 0;
			--pitch-secondary-channel-hue-scale: 25;
			--pitch-secondary-channel-sat: 10;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 70;
			--pitch-secondary-channel-lum-scale: 0;
			--pitch-primary-channel-hue: 0;
			--pitch-primary-channel-hue-scale: 25;
			--pitch-primary-channel-sat: 50;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 95;
			--pitch-primary-channel-lum-scale: 0;
			--pitch-secondary-note-hue: 0;
			--pitch-secondary-note-hue-scale: 25;
			--pitch-secondary-note-sat: 10;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 70;
			--pitch-secondary-note-lum-scale: 0;
			--pitch-primary-note-hue: 0;
			--pitch-primary-note-hue-scale: 25;
			--pitch-primary-note-sat: 50;
			--pitch-primary-note-sat-scale: 0.1;
			--pitch-primary-note-lum: 95;
			--pitch-primary-note-lum-scale: 0;
			--noise-secondary-channel-hue: 125;
			--noise-secondary-channel-hue-scale: 50;
			--noise-secondary-channel-sat: 10;
			--noise-secondary-channel-sat-scale: 0.1;
			--noise-secondary-channel-lum: 70;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 125;
			--noise-primary-channel-hue-scale: 50;
			--noise-primary-channel-sat: 50;
			--noise-primary-channel-sat-scale: 0.1;
			--noise-primary-channel-lum: 95;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 125;
			--noise-secondary-note-hue-scale: 50;
			--noise-secondary-note-sat: 10;
			--noise-secondary-note-sat-scale: 0.1;
			--noise-secondary-note-lum: 70;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 125;
			--noise-primary-note-hue-scale: 50;
			--noise-primary-note-sat: 50;
			--noise-primary-note-sat-scale: 0.1;
			--noise-primary-note-lum: 95;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 255;
			--mod-secondary-channel-hue-scale: 75;
			--mod-secondary-channel-sat: 10;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 70;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 255;
			--mod-primary-channel-hue-scale: 75;
			--mod-primary-channel-sat: 50;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 95;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 255;
			--mod-secondary-note-hue-scale: 75;
			--mod-secondary-note-sat: 10;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 70;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 255;
			--mod-primary-note-hue-scale: 75;
			--mod-primary-note-sat: 50;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 95;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary: #c6c6c6;
			--disabled-note-secondary: #8c8c8c;
		}`}),a(R,"pageMargin","var(--page-margin)"),a(R,"editorBackground","var(--editor-background)"),a(R,"hoverPreview","var(--hover-preview)"),a(R,"playhead","var(--playhead)"),a(R,"primaryText","var(--primary-text)"),a(R,"secondaryText","var(--secondary-text)"),a(R,"invertedText","var(--inverted-text)"),a(R,"textSelection","var(--text-selection)"),a(R,"boxSelectionFill","var(--box-selection-fill)"),a(R,"loopAccent","var(--loop-accent)"),a(R,"linkAccent","var(--link-accent)"),a(R,"uiWidgetBackground","var(--ui-widget-background)"),a(R,"uiWidgetFocus","var(--ui-widget-focus)"),a(R,"pitchBackground","var(--pitch-background)"),a(R,"tonic","var(--tonic)"),a(R,"fifthNote","var(--fifth-note)"),a(R,"whitePianoKey","var(--white-piano-key)"),a(R,"blackPianoKey","var(--black-piano-key)"),a(R,"useColorFormula","var(--use-color-formula)"),a(R,"pitchSecondaryChannelHue","var(--pitch-secondary-channel-hue)"),a(R,"pitchSecondaryChannelHueScale","var(--pitch-secondary-channel-hue-scale)"),a(R,"pitchSecondaryChannelSat","var(--pitch-secondary-channel-sat)"),a(R,"pitchSecondaryChannelSatScale","var(--pitch-secondary-channel-sat-scale)"),a(R,"pitchSecondaryChannelLum","var(--pitch-secondary-channel-lum)"),a(R,"pitchSecondaryChannelLumScale","var(--pitch-secondary-channel-lum-scale)"),a(R,"pitchPrimaryChannelHue","var(--pitch-primary-channel-hue)"),a(R,"pitchPrimaryChannelHueScale","var(--pitch-primary-channel-hue-scale)"),a(R,"pitchPrimaryChannelSat","var(--pitch-primary-channel-sat)"),a(R,"pitchPrimaryChannelSatScale","var(--pitch-primary-channel-sat-scale)"),a(R,"pitchPrimaryChannelLum","var(--pitch-primary-channel-lum)"),a(R,"pitchPrimaryChannelLumScale","var(--pitch-primary-channel-lum-scale)"),a(R,"pitchSecondaryNoteHue","var(--pitch-secondary-note-hue)"),a(R,"pitchSecondaryNoteHueScale","var(--pitch-secondary-note-hue-scale)"),a(R,"pitchSecondaryNoteSat","var(--pitch-secondary-note-sat)"),a(R,"pitchSecondaryNoteSatScale","var(--pitch-secondary-note-sat-scale)"),a(R,"pitchSecondaryNoteLum","var(--pitch-secondary-note-lum)"),a(R,"pitchSecondaryNoteLumScale","var(--pitch-secondary-note-lum-scale)"),a(R,"pitchPrimaryNoteHue","var(--pitch-primary-note-hue)"),a(R,"pitchPrimaryNoteHueScale","var(--pitch-primary-note-hue-scale)"),a(R,"pitchPrimaryNoteSat","var(--pitch-primary-note-sat)"),a(R,"pitchPrimaryNoteSatScale","var(--pitch-primary-note-sat-scale)"),a(R,"pitchPrimaryNoteLum","var(--pitch-primary-note-lum)"),a(R,"pitchPrimaryNoteLumScale","var(--pitch-primary-note-lum-scale)"),a(R,"modSecondaryChannelHue","var(--mod-secondary-channel-hue)"),a(R,"modSecondaryChannelHueScale","var(--mod-secondary-channel-hue-scale)"),a(R,"modSecondaryChannelSat","var(--mod-secondary-channel-sat)"),a(R,"modSecondaryChannelSatScale","var(--mod-secondary-channel-sat-scale)"),a(R,"modSecondaryChannelLum","var(--mod-secondary-channel-lum)"),a(R,"modSecondaryChannelLumScale","var(--mod-secondary-channel-lum-scale)"),a(R,"modPrimaryChannelHue","var(--mod-primary-channel-hue)"),a(R,"modPrimaryChannelHueScale","var(--mod-primary-channel-hue-scale)"),a(R,"modPrimaryChannelSat","var(--mod-primary-channel-sat)"),a(R,"modPrimaryChannelSatScale","var(--mod-primary-channel-sat-scale)"),a(R,"modPrimaryChannelLum","var(--mod-primary-channel-lum)"),a(R,"modPrimaryChannelLumScale","var(--mod-primary-channel-lum-scale)"),a(R,"modSecondaryNoteHue","var(--mod-secondary-note-hue)"),a(R,"modSecondaryNoteHueScale","var(--mod-secondary-note-hue-scale)"),a(R,"modSecondaryNoteSat","var(--mod-secondary-note-sat)"),a(R,"modSecondaryNoteSatScale","var(--mod-secondary-note-sat-scale)"),a(R,"modSecondaryNoteLum","var(--mod-secondary-note-lum)"),a(R,"modSecondaryNoteLumScale","var(--mod-secondary-note-lum-scale)"),a(R,"modPrimaryNoteHue","var(--mod-primary-note-hue)"),a(R,"modPrimaryNoteHueScale","var(--mod-primary-note-hue-scale)"),a(R,"modPrimaryNoteSat","var(--mod-primary-note-sat)"),a(R,"modPrimaryNoteSatScale","var(--mod-primary-note-sat-scale)"),a(R,"modPrimaryNoteLum","var(--mod-primary-note-lum)"),a(R,"modPrimaryNoteLumScale","var(--mod-primary-note-lum-scale)"),a(R,"noiseSecondaryChannelHue","var(--noise-secondary-channel-hue)"),a(R,"noiseSecondaryChannelHueScale","var(--noise-secondary-channel-hue-scale)"),a(R,"noiseSecondaryChannelSat","var(--noise-secondary-channel-sat)"),a(R,"noiseSecondaryChannelSatScale","var(--noise-secondary-channel-sat-scale)"),a(R,"noiseSecondaryChannelLum","var(--noise-secondary-channel-lum)"),a(R,"noiseSecondaryChannelLumScale","var(--noise-secondary-channel-lum-scale)"),a(R,"noisePrimaryChannelHue","var(--noise-primary-channel-hue)"),a(R,"noisePrimaryChannelHueScale","var(--noise-primary-channel-hue-scale)"),a(R,"noisePrimaryChannelSat","var(--noise-primary-channel-sat)"),a(R,"noisePrimaryChannelSatScale","var(--noise-primary-channel-sat-scale)"),a(R,"noisePrimaryChannelLum","var(--noise-primary-channel-lum)"),a(R,"noisePrimaryChannelLumScale","var(--noise-primary-channel-lum-scale)"),a(R,"noiseSecondaryNoteHue","var(--noise-secondary-note-hue)"),a(R,"noiseSecondaryNoteHueScale","var(--noise-secondary-note-hue-scale)"),a(R,"noiseSecondaryNoteSat","var(--noise-secondary-note-sat)"),a(R,"noiseSecondaryNoteSatScale","var(--noise-secondary-note-sat-scale)"),a(R,"noiseSecondaryNoteLum","var(--noise-secondary-note-lum)"),a(R,"noiseSecondaryNoteLumScale","var(--noise-secondary-note-lum-scale)"),a(R,"noisePrimaryNoteHue","var(--noise-primary-note-hue)"),a(R,"noisePrimaryNoteHueScale","var(--noise-primary-note-hue-scale)"),a(R,"noisePrimaryNoteSat","var(--noise-primary-note-sat)"),a(R,"noisePrimaryNoteSatScale","var(--noise-primary-note-sat-scale)"),a(R,"noisePrimaryNoteLum","var(--noise-primary-note-lum)"),a(R,"noisePrimaryNoteLumScale","var(--noise-primary-note-lum-scale)"),a(R,"trackEditorBgPitch","var(--track-editor-bg-pitch)"),a(R,"trackEditorBgPitchDim","var(--track-editor-bg-pitch-dim)"),a(R,"trackEditorBgNoise","var(--track-editor-bg-noise)"),a(R,"trackEditorBgNoiseDim","var(--track-editor-bg-noise-dim)"),a(R,"trackEditorBgMod","var(--track-editor-bg-mod)"),a(R,"trackEditorBgModDim","var(--track-editor-bg-mod-dim)"),a(R,"multiplicativeModSlider","var(--multiplicative-mod-slider)"),a(R,"overwritingModSlider","var(--overwriting-mod-slider)"),a(R,"indicatorPrimary","var(--indicator-primary)"),a(R,"indicatorSecondary","var(--indicator-secondary)"),a(R,"select2OptGroup","var(--select2-opt-group)"),a(R,"inputBoxOutline","var(--input-box-outline)"),a(R,"muteButtonNormal","var(--mute-button-normal)"),a(R,"muteButtonMod","var(--mute-button-mod)"),a(R,"modLabelPrimary","var(--mod-label-primary)"),a(R,"modLabelSecondaryText","var(--mod-label-secondary-text)"),a(R,"modLabelPrimaryText","var(--mod-label-primary-text)"),a(R,"disabledNotePrimary","var(--disabled-note-primary)"),a(R,"disabledNoteSecondary","var(--disabled-note-secondary)"),a(R,"pitchChannels",he([{name:"pitch1",secondaryChannel:"var(--pitch1-secondary-channel)",primaryChannel:"var(--pitch1-primary-channel)",secondaryNote:"var(--pitch1-secondary-note)",primaryNote:"var(--pitch1-primary-note)"},{name:"pitch2",secondaryChannel:"var(--pitch2-secondary-channel)",primaryChannel:"var(--pitch2-primary-channel)",secondaryNote:"var(--pitch2-secondary-note)",primaryNote:"var(--pitch2-primary-note)"},{name:"pitch3",secondaryChannel:"var(--pitch3-secondary-channel)",primaryChannel:"var(--pitch3-primary-channel)",secondaryNote:"var(--pitch3-secondary-note)",primaryNote:"var(--pitch3-primary-note)"},{name:"pitch4",secondaryChannel:"var(--pitch4-secondary-channel)",primaryChannel:"var(--pitch4-primary-channel)",secondaryNote:"var(--pitch4-secondary-note)",primaryNote:"var(--pitch4-primary-note)"},{name:"pitch5",secondaryChannel:"var(--pitch5-secondary-channel)",primaryChannel:"var(--pitch5-primary-channel)",secondaryNote:"var(--pitch5-secondary-note)",primaryNote:"var(--pitch5-primary-note)"},{name:"pitch6",secondaryChannel:"var(--pitch6-secondary-channel)",primaryChannel:"var(--pitch6-primary-channel)",secondaryNote:"var(--pitch6-secondary-note)",primaryNote:"var(--pitch6-primary-note)"},{name:"pitch7",secondaryChannel:"var(--pitch7-secondary-channel)",primaryChannel:"var(--pitch7-primary-channel)",secondaryNote:"var(--pitch7-secondary-note)",primaryNote:"var(--pitch7-primary-note)"},{name:"pitch8",secondaryChannel:"var(--pitch8-secondary-channel)",primaryChannel:"var(--pitch8-primary-channel)",secondaryNote:"var(--pitch8-secondary-note)",primaryNote:"var(--pitch8-primary-note)"},{name:"pitch9",secondaryChannel:"var(--pitch9-secondary-channel)",primaryChannel:"var(--pitch9-primary-channel)",secondaryNote:"var(--pitch9-secondary-note)",primaryNote:"var(--pitch9-primary-note)"},{name:"pitch10",secondaryChannel:"var(--pitch10-secondary-channel)",primaryChannel:"var(--pitch10-primary-channel)",secondaryNote:"var(--pitch10-secondary-note)",primaryNote:"var(--pitch10-primary-note)"}])),a(R,"noiseChannels",he([{name:"noise1",secondaryChannel:"var(--noise1-secondary-channel)",primaryChannel:"var(--noise1-primary-channel)",secondaryNote:"var(--noise1-secondary-note)",primaryNote:"var(--noise1-primary-note)"},{name:"noise2",secondaryChannel:"var(--noise2-secondary-channel)",primaryChannel:"var(--noise2-primary-channel)",secondaryNote:"var(--noise2-secondary-note)",primaryNote:"var(--noise2-primary-note)"},{name:"noise3",secondaryChannel:"var(--noise3-secondary-channel)",primaryChannel:"var(--noise3-primary-channel)",secondaryNote:"var(--noise3-secondary-note)",primaryNote:"var(--noise3-primary-note)"},{name:"noise4",secondaryChannel:"var(--noise4-secondary-channel)",primaryChannel:"var(--noise4-primary-channel)",secondaryNote:"var(--noise4-secondary-note)",primaryNote:"var(--noise4-primary-note)"},{name:"noise5",secondaryChannel:"var(--noise5-secondary-channel)",primaryChannel:"var(--noise5-primary-channel)",secondaryNote:"var(--noise5-secondary-note)",primaryNote:"var(--noise5-primary-note)"}])),a(R,"modChannels",he([{name:"mod1",secondaryChannel:"var(--mod1-secondary-channel)",primaryChannel:"var(--mod1-primary-channel)",secondaryNote:"var(--mod1-secondary-note)",primaryNote:"var(--mod1-primary-note)"},{name:"mod2",secondaryChannel:"var(--mod2-secondary-channel)",primaryChannel:"var(--mod2-primary-channel)",secondaryNote:"var(--mod2-secondary-note)",primaryNote:"var(--mod2-primary-note)"},{name:"mod3",secondaryChannel:"var(--mod3-secondary-channel)",primaryChannel:"var(--mod3-primary-channel)",secondaryNote:"var(--mod3-secondary-note)",primaryNote:"var(--mod3-primary-note)"},{name:"mod4",secondaryChannel:"var(--mod4-secondary-channel)",primaryChannel:"var(--mod4-primary-channel)",secondaryNote:"var(--mod4-secondary-note)",primaryNote:"var(--mod4-primary-note)"}])),a(R,"_styleElement",document.head.appendChild(Jt.style({type:"text/css"})));let Ht=R;class at{constructor(){a(this,"_capacity",1);a(this,"_buffer",[void 0]);a(this,"_mask",0);a(this,"_offset",0);a(this,"_count",0)}pushFront(e){this._count>=this._capacity&&this._expandCapacity(),this._offset=this._offset-1&this._mask,this._buffer[this._offset]=e,this._count++}pushBack(e){this._count>=this._capacity&&this._expandCapacity(),this._buffer[this._offset+this._count&this._mask]=e,this._count++}popFront(){if(this._count<=0)throw new Error("No elements left to pop.");const e=this._buffer[this._offset];return this._buffer[this._offset]=void 0,this._offset=this._offset+1&this._mask,this._count--,e}popBack(){if(this._count<=0)throw new Error("No elements left to pop.");this._count--;const e=this._offset+this._count&this._mask,t=this._buffer[e];return this._buffer[e]=void 0,t}peakFront(){if(this._count<=0)throw new Error("No elements left to pop.");return this._buffer[this._offset]}peakBack(){if(this._count<=0)throw new Error("No elements left to pop.");return this._buffer[this._offset+this._count-1&this._mask]}count(){return this._count}set(e,t){if(e<0||e>=this._count)throw new Error("Invalid index");this._buffer[this._offset+e&this._mask]=t}get(e){if(e<0||e>=this._count)throw new Error("Invalid index");return this._buffer[this._offset+e&this._mask]}remove(e){if(e<0||e>=this._count)throw new Error("Invalid index");if(e<=this._count>>1){for(;e>0;)this.set(e,this.get(e-1)),e--;this.popFront()}else{for(e++;e<this._count;)this.set(e-1,this.get(e)),e++;this.popBack()}}_expandCapacity(){if(this._capacity>=1073741824)throw new Error("Capacity too big.");this._capacity=this._capacity<<1;const e=this._buffer,t=new Array(this._capacity),o=this._count|0,i=this._offset|0;for(let c=0;c<o;c++)t[c]=e[i+c&this._mask];for(let c=o;c<this._capacity;c++)t[c]=void 0;this._offset=0,this._buffer=t,this._mask=this._capacity-1}}class Ue{constructor(){a(this,"a",[1]);a(this,"b",[1]);a(this,"order",0)}linearGain0thOrder(e){this.b[0]=e,this.order=0}lowPass1stOrderButterworth(e){const t=1/Math.tan(e*.5),o=1+t;this.a[1]=(1-t)/o,this.b[1]=this.b[0]=1/o,this.order=1}lowPass1stOrderSimplified(e){const t=2*Math.sin(e*.5);this.a[1]=t-1,this.b[0]=t,this.b[1]=0,this.order=1}highPass1stOrderButterworth(e){const t=1/Math.tan(e*.5),o=1+t;this.a[1]=(1-t)/o,this.b[0]=t/o,this.b[1]=-t/o,this.order=1}highShelf1stOrder(e,t){const o=Math.tan(e*.5),i=Math.sqrt(t),c=(o*i-1)/(o*i+1),p=1;this.a[1]=c/p,this.b[0]=(1+c+t*(1-c))/(2*p),this.b[1]=(1+c-t*(1-c))/(2*p),this.order=1}allPass1stOrderInvertPhaseAbove(e){const t=(Math.sin(e)-1)/Math.cos(e);this.a[1]=t,this.b[0]=t,this.b[1]=1,this.order=1}allPass1stOrderFractionalDelay(e){const t=(1-e)/(1+e);this.a[1]=t,this.b[0]=t,this.b[1]=1,this.order=1}lowPass2ndOrderButterworth(e,t){const o=Math.sin(e)/(2*t),i=Math.cos(e),c=1+o;this.a[1]=-2*i/c,this.a[2]=(1-o)/c,this.b[2]=this.b[0]=(1-i)/(2*c),this.b[1]=(1-i)/c,this.order=2}lowPass2ndOrderSimplified(e,t){const o=2*Math.sin(e/2),i=1-1/(2*t),c=i+i/(1-o);this.a[1]=2*o+(o-1)*o*c-2,this.a[2]=(o-1)*(o-o*c-1),this.b[0]=o*o,this.b[1]=0,this.b[2]=0,this.order=2}highPass2ndOrderButterworth(e,t){const o=Math.sin(e)/(2*t),i=Math.cos(e),c=1+o;this.a[1]=-2*i/c,this.a[2]=(1-o)/c,this.b[2]=this.b[0]=(1+i)/(2*c),this.b[1]=-(1+i)/c,this.order=2}peak2ndOrder(e,t,o){const i=Math.sqrt(t),c=o*e/(i>=1?i:1/i),p=Math.tan(c*.5),d=1+p/i;this.b[0]=(1+p*i)/d,this.b[1]=this.a[1]=-2*Math.cos(e)/d,this.b[2]=(1-p*i)/d,this.a[2]=(1-p/i)/d,this.order=2}}class rt{constructor(){a(this,"real",0);a(this,"imag",0);a(this,"denom",1)}analyze(e,t){this.analyzeComplex(e,Math.cos(t),Math.sin(t))}analyzeComplex(e,t,o){const i=e.a,c=e.b,p=t,d=-o;let f=c[0]+c[1]*p,x=c[1]*d,s=1+i[1]*p,k=i[1]*d,u=p,h=d;for(let m=2;m<=e.order;m++){const y=u*p-h*d,P=u*d+h*p;u=y,h=P,f+=c[m]*u,x+=c[m]*h,s+=i[m]*u,k+=i[m]*h}this.denom=s*s+k*k,this.real=f*s+x*k,this.imag=x*s-f*k}magnitude(){return Math.sqrt(this.real*this.real+this.imag*this.imag)/this.denom}angle(){return Math.atan2(this.imag,this.real)}}class Qe{constructor(){a(this,"a1",0);a(this,"a2",0);a(this,"b0",1);a(this,"b1",0);a(this,"b2",0);a(this,"a1Delta",0);a(this,"a2Delta",0);a(this,"b0Delta",0);a(this,"b1Delta",0);a(this,"b2Delta",0);a(this,"output1",0);a(this,"output2",0);a(this,"useMultiplicativeInputCoefficients",!1)}resetOutput(){this.output1=0,this.output2=0}loadCoefficientsWithGradient(e,t,o,i){if(e.order!=2||t.order!=2)throw new Error;this.a1=e.a[1],this.a2=e.a[2],this.b0=e.b[0],this.b1=e.b[1],this.b2=e.b[2],this.a1Delta=(t.a[1]-e.a[1])*o,this.a2Delta=(t.a[2]-e.a[2])*o,i?(this.b0Delta=Math.pow(t.b[0]/e.b[0],o),this.b1Delta=Math.pow(t.b[1]/e.b[1],o),this.b2Delta=Math.pow(t.b[2]/e.b[2],o)):(this.b0Delta=(t.b[0]-e.b[0])*o,this.b1Delta=(t.b[1]-e.b[1])*o,this.b2Delta=(t.b[2]-e.b[2])*o),this.useMultiplicativeInputCoefficients=i}}class Ie{constructor(){a(this,"noteSecondsStart",0);a(this,"noteSecondsEnd",0);a(this,"noteTicksStart",0);a(this,"noteTicksEnd",0);a(this,"noteSizeStart",n.noteSizeMax);a(this,"noteSizeEnd",n.noteSizeMax);a(this,"prevNoteSize",n.noteSizeMax);a(this,"nextNoteSize",n.noteSizeMax);a(this,"_noteSizeFinal",n.noteSizeMax);a(this,"prevNoteSecondsStart",0);a(this,"prevNoteSecondsEnd",0);a(this,"prevNoteTicksStart",0);a(this,"prevNoteTicksEnd",0);a(this,"_prevNoteSizeFinal",n.noteSizeMax);a(this,"prevSlideStart",!1);a(this,"prevSlideEnd",!1);a(this,"nextSlideStart",!1);a(this,"nextSlideEnd",!1);a(this,"prevSlideRatioStart",0);a(this,"prevSlideRatioEnd",0);a(this,"nextSlideRatioStart",0);a(this,"nextSlideRatioEnd",0);a(this,"envelopeStarts",[]);a(this,"envelopeEnds",[]);a(this,"_modifiedEnvelopeIndices",[]);a(this,"_modifiedEnvelopeCount",0);a(this,"lowpassCutoffDecayVolumeCompensation",1);const e=de.length;for(let t=0;t<e;t++)this.envelopeStarts[t]=1,this.envelopeEnds[t]=1;this.reset()}reset(){this.noteSecondsEnd=0,this.noteTicksEnd=0,this._noteSizeFinal=n.noteSizeMax,this.prevNoteSecondsEnd=0,this.prevNoteTicksEnd=0,this._prevNoteSizeFinal=n.noteSizeMax,this._modifiedEnvelopeCount=0}computeEnvelopes(e,t,o,i,c){const p=e.getTransition();c!=null&&c.atNoteStart&&!p.continues&&!c.forceContinueAtStart&&(this.prevNoteSecondsEnd=this.noteSecondsEnd,this.prevNoteTicksEnd=this.noteTicksEnd,this._prevNoteSizeFinal=this._noteSizeFinal,this.noteSecondsEnd=0,this.noteTicksEnd=0),c!=null&&(c.note!=null?this._noteSizeFinal=c.note.pins[c.note.pins.length-1].size:this._noteSizeFinal=n.noteSizeMax);const d=o+1,f=this.noteSecondsEnd,x=f+i,s=this.noteTicksEnd,k=s+1,u=this.prevNoteSecondsEnd,h=u+i,m=this.prevNoteTicksEnd,y=m+1,P=1/(n.ticksPerPart*n.partsPerBeat),C=P*o,S=P*d;let v=this._noteSizeFinal,D=this._noteSizeFinal,N=this._prevNoteSizeFinal,L=0,z=!1,E=!1,l=!1,g=!1,F=0,M=0,I=0,A=0;if(c!=null&&c.note!=null&&!c.passedEndOfNote){const Q=c.note.getEndPinIndex(t),G=c.note.pins[Q-1],W=c.note.pins[Q],ae=(c.note.start+G.time)*n.ticksPerPart,$=(c.note.start+W.time)*n.ticksPerPart,pe=(o-ae)/($-ae),J=(d-ae)/($-ae);if(v=G.size+(W.size-G.size)*pe,D=G.size+(W.size-G.size)*J,p.slides){const ee=c.noteStartPart*n.ticksPerPart,le=c.noteEndPart*n.ticksPerPart,H=(le-ee)*.5,j=Math.min(H,p.slideTicks);c.prevNote!=null&&!c.forceContinueAtStart&&(o-ee<j&&(z=!0,F=.5*(1-(o-ee)/j)),d-ee<j&&(E=!0,M=.5*(1-(d-ee)/j))),c.nextNote!=null&&!c.forceContinueAtEnd&&(L=c.nextNote.pins[0].size,le-o<j&&(l=!0,I=.5*(1-(le-o)/j)),le-d<j&&(g=!0,A=.5*(1-(le-d)/j)))}}let V=1,Y=!1;for(let Q=0;Q<=e.envelopeCount;Q++){let G,W,ae;if(Q==e.envelopeCount){if(Y)break;G=n.instrumentAutomationTargets.dictionary.noteVolume,W=0,ae=n.envelopes.dictionary["note size"]}else{let $=e.envelopes[Q];G=n.instrumentAutomationTargets[$.target],W=$.index,ae=n.envelopes[$.envelope],ae.type==fe.noteSize&&(Y=!0)}if(G.computeIndex!=null){const $=G.computeIndex+W;let pe=Ie.computeEnvelope(ae,f,C,v),J=Ie.computeEnvelope(ae,x,S,D);if(z){const ee=Ie.computeEnvelope(ae,u,C,N);pe+=(ee-pe)*F}if(E){const ee=Ie.computeEnvelope(ae,h,S,N);J+=(ee-J)*M}if(l){const ee=Ie.computeEnvelope(ae,0,C,L);pe+=(ee-pe)*I}if(g){const ee=Ie.computeEnvelope(ae,0,S,L);J+=(ee-J)*A}if(this.envelopeStarts[$]*=pe,this.envelopeEnds[$]*=J,this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++]=$,G.isFilter){const ee=e.tmpNoteFilterStart!=null?e.tmpNoteFilterStart:e.noteFilter;ee.controlPointCount>W&&ee.controlPoints[W].type==Pe.lowPass&&(V=Math.max(V,Ie.getLowpassCutoffDecayVolumeCompensation(ae)))}}}this.noteSecondsStart=f,this.noteSecondsEnd=x,this.noteTicksStart=s,this.noteTicksEnd=k,this.prevNoteSecondsStart=u,this.prevNoteSecondsEnd=h,this.prevNoteTicksStart=m,this.prevNoteTicksEnd=y,this.prevNoteSize=N,this.nextNoteSize=L,this.noteSizeStart=v,this.noteSizeEnd=D,this.prevSlideStart=z,this.prevSlideEnd=E,this.nextSlideStart=l,this.nextSlideEnd=g,this.prevSlideRatioStart=F,this.prevSlideRatioEnd=M,this.nextSlideRatioStart=I,this.nextSlideRatioEnd=A,this.lowpassCutoffDecayVolumeCompensation=V}clearEnvelopes(){for(let e=0;e<this._modifiedEnvelopeCount;e++){const t=this._modifiedEnvelopeIndices[e];this.envelopeStarts[t]=1,this.envelopeEnds[t]=1}this._modifiedEnvelopeCount=0}static computeEnvelope(e,t,o,i){switch(e.type){case fe.noteSize:return X.noteSizeToVolumeMult(i);case fe.none:return 1;case fe.twang:return 1/(1+t*e.speed);case fe.swell:return 1-1/(1+t*e.speed);case fe.tremolo:return .5-Math.cos(o*2*Math.PI*e.speed)*.5;case fe.tremolo2:return .75-Math.cos(o*2*Math.PI*e.speed)*.25;case fe.punch:return Math.max(1,2-t*10);case fe.flare:const c=.25/Math.sqrt(e.speed);return t<c?t/c:1/(1+(t-c)*e.speed);case fe.decay:return Math.pow(2,-e.speed*t);default:throw new Error("Unrecognized operator envelope type.")}}static getLowpassCutoffDecayVolumeCompensation(e){return e.type==fe.decay?1.25+.025*e.speed:e.type==fe.twang?1+.02*e.speed:1}}class Wt{constructor(){a(this,"target",0);a(this,"index",0);a(this,"envelope",0);this.reset()}reset(){this.target=0,this.index=0,this.envelope=0}toJsonObject(){const e={target:n.instrumentAutomationTargets[this.target].name,envelope:n.envelopes[this.envelope].name};return n.instrumentAutomationTargets[this.target].maxCount>1&&(e.index=this.index),e}fromJsonObject(e){this.reset();let t=n.instrumentAutomationTargets.dictionary[e.target];t==null&&(t=n.instrumentAutomationTargets.dictionary.noteVolume),this.target=t.index;let o=n.envelopes.dictionary[e.envelope];o==null&&(o=n.envelopes.dictionary.none),this.envelope=o.index,e.index!=null?this.index=q(0,n.instrumentAutomationTargets[this.target].maxCount,e.index|0):this.index=0}}function Qt(r,e){for(let t=0;t<r.length;t++)r[t]*=e}function dn(r){return!!r&&!(r&r-1)}function Kt(r){if(!dn(r))throw new Error("FFT array length must be a power of 2.");return Math.round(Math.log(r)/Math.log(2))}function un(r,e){const t=Kt(e);if(t>16)throw new Error("FFT array length must not be greater than 2^16.");const o=16-t;for(let i=0;i<e;i++){let c;if(c=(i&43690)>>1|(i&21845)<<1,c=(c&52428)>>2|(c&13107)<<2,c=(c&61680)>>4|(c&3855)<<4,c=(c>>8|(c&255)<<8)>>o,c>i){let p=r[i];r[i]=r[c],r[c]=p}}}function Tt(r,e){const t=Kt(e);if(e<4)throw new Error("FFT array length must be at least 4.");for(let o=t-1;o>=2;o--){const i=1<<o,c=i>>1,p=i<<1,d=Math.PI*2/p,f=Math.cos(d),x=Math.sin(d),s=2*f;for(let k=0;k<e;k+=p){const u=k,h=u+c,m=u+i,y=m+c,P=m+i,C=r[u],S=r[m];r[u]=C+S,r[h]*=2,r[m]=C-S,r[y]*=2;let v=f,D=-x,N=1,L=0;for(let z=1;z<c;z++){const E=u+z,l=m-z,g=m+z,F=P-z,M=r[E],I=r[l],A=r[g],V=r[F],Y=M-I,Q=A+V;r[E]=M+I,r[l]=V-A,r[g]=Y*v-Q*D,r[F]=Q*v+Y*D;const G=s*v-N,W=s*D-L;N=v,L=D,v=G,D=W}}}for(let o=0;o<e;o+=4){const i=o+1,c=o+2,p=o+3,d=r[o],f=r[i]*2,x=r[c],s=r[p]*2,k=d+x,u=d-x;r[o]=k+f,r[i]=k-f,r[c]=u+s,r[p]=u-s}un(r,e)}class mn{constructor(){a(this,"harmonics",[]);a(this,"hash",-1);this.reset()}reset(){for(let e=0;e<n.harmonicsControlPoints;e++)this.harmonics[e]=0;this.harmonics[0]=n.harmonicsMax,this.harmonics[3]=n.harmonicsMax,this.harmonics[6]=n.harmonicsMax,this.markCustomWaveDirty()}markCustomWaveDirty(){const e=X.fittingPowerOfTwo(n.harmonicsMax+2)-1;let t=0;for(const o of this.harmonics)t=t*e+o>>>0;this.hash=t}}class fn{constructor(){a(this,"wave",null);a(this,"_hash",-1);a(this,"_generatedForType",T.chip)}getCustomWave(e,t){if(this._hash==e.hash&&this._generatedForType==t)return this.wave;this._hash=e.hash,this._generatedForType=t;const o=t==T.pickedString?n.harmonicsRenderedForPickedString:n.harmonicsRendered,i=n.harmonicsWavelength,c=Et(0,null,null);(this.wave==null||this.wave.length!=i+1)&&(this.wave=new Float32Array(i+1));const p=this.wave;for(let s=0;s<i;s++)p[s]=0;const d=-.25;let f=1;for(let s=0;s<o;s++){const k=s+1;let u=s<n.harmonicsControlPoints?e.harmonics[s]:e.harmonics[n.harmonicsControlPoints-1];s>=n.harmonicsControlPoints&&(u*=1-(s-n.harmonicsControlPoints)/(o-n.harmonicsControlPoints));const h=u/n.harmonicsMax;let m=Math.pow(2,u-n.harmonicsMax+1)*Math.sqrt(h);s<n.harmonicsControlPoints&&(f+=m),m*=Math.pow(k,d),m*=c[s+589],p[i-k]=m}Tt(p,i);const x=1/Math.pow(f,.7);for(let s=0;s<p.length;s++)p[s]*=x;return tn(p),p[i]=p[0],p}}class At{constructor(e){a(this,"spectrum",[]);a(this,"hash",-1);this.reset(e)}reset(e){for(let t=0;t<n.spectrumControlPoints;t++)if(e)this.spectrum[t]=Math.round(n.spectrumMax*(1/Math.sqrt(1+t/3)));else{const o=t==0||t==7||t==11||t==14||t==16||t==18||t==21||t==23||t>=25;this.spectrum[t]=o?Math.max(0,Math.round(n.spectrumMax*(1-t/30))):0}this.markCustomWaveDirty()}markCustomWaveDirty(){const e=X.fittingPowerOfTwo(n.spectrumMax+2)-1;let t=0;for(const o of this.spectrum)t=t*e+o>>>0;this.hash=t}}class Gt{constructor(){a(this,"wave",null);a(this,"_hash",-1)}getCustomWave(e,t){if(this._hash==e.hash)return this.wave;this._hash=e.hash;const o=n.spectrumNoiseLength;(this.wave==null||this.wave.length!=o+1)&&(this.wave=new Float32Array(o+1));const i=this.wave;for(let s=0;s<o;s++)i[s]=0;const c=14,p=.25,d=[0,1/7,Math.log2(5/4),3/7,Math.log2(3/2),5/7,6/7];function f(s){return t+Math.floor(s/n.spectrumControlPointsPerOctave)+d[(s+n.spectrumControlPointsPerOctave)%n.spectrumControlPointsPerOctave]}let x=1;for(let s=0;s<n.spectrumControlPoints+1;s++){const k=s<=0?0:e.spectrum[s-1],u=s>=n.spectrumControlPoints?e.spectrum[n.spectrumControlPoints-1]:e.spectrum[s],h=f(s-1);let m=f(s);s>=n.spectrumControlPoints&&(m=c+(m-c)*p),!(k==0&&u==0)&&(x+=.02*$e(i,o,h,m,k/n.spectrumMax,u/n.spectrumMax,-.5))}return e.spectrum[n.spectrumControlPoints-1]>0&&(x+=.02*$e(i,o,c+(f(n.spectrumControlPoints)-c)*p,c,e.spectrum[n.spectrumControlPoints-1]/n.spectrumMax,0,-.5)),Tt(i,o),Qt(i,5/(Math.sqrt(o)*Math.pow(x,.75))),i[o]=i[0],i}}class Me{constructor(){a(this,"controlPoints",[]);a(this,"controlPointCount",0);this.reset()}reset(){this.controlPointCount=0}addPoint(e,t,o){let i;this.controlPoints.length<=this.controlPointCount?(i=new Fe,this.controlPoints[this.controlPointCount]=i):i=this.controlPoints[this.controlPointCount],this.controlPointCount++,i.type=e,i.set(t,o)}toJsonObject(){const e=[];for(let t=0;t<this.controlPointCount;t++){const o=this.controlPoints[t];e.push({type:n.filterTypeNames[o.type],cutoffHz:Math.round(o.getHz()*100)/100,linearGain:Math.round(o.getLinearGain()*1e4)/1e4})}return e}fromJsonObject(e){if(this.controlPoints.length=0,e)for(const t of e){const o=new Fe;o.type=n.filterTypeNames.indexOf(t.type),o.type==-1&&(o.type=Pe.peak),t.cutoffHz!=null?o.freq=Fe.getRoundedSettingValueFromHz(t.cutoffHz):o.freq=0,t.linearGain!=null?o.gain=Fe.getRoundedSettingValueFromLinearGain(t.linearGain):o.gain=n.filterGainCenter,this.controlPoints.push(o)}this.controlPointCount=this.controlPoints.length}static filtersCanMorph(e,t){if(e.controlPointCount!=t.controlPointCount)return!1;for(let o=0;o<e.controlPointCount;o++)if(e.controlPoints[o].type!=t.controlPoints[o].type)return!1;return!0}static lerpFilters(e,t,o){let i=new Me;if(e==null)return e;if(t==null)return t;if(o=Math.max(0,Math.min(1,o)),this.filtersCanMorph(e,t)){for(let c=0;c<e.controlPointCount;c++)i.controlPoints[c]=new Fe,i.controlPoints[c].type=e.controlPoints[c].type,i.controlPoints[c].freq=e.controlPoints[c].freq+(t.controlPoints[c].freq-e.controlPoints[c].freq)*o,i.controlPoints[c].gain=e.controlPoints[c].gain+(t.controlPoints[c].gain-e.controlPoints[c].gain)*o;return i.controlPointCount=e.controlPointCount,i}else return o>=1?t:e}convertLegacySettings(e,t,o){this.reset();const i=8e3,p=Math.asin(.95/2)*2,d=.95,f=11,x=8,s=t>1,k=t==0,u=e==f-1,h=o.type==fe.flare||o.type==fe.twang||o.type==fe.decay||o.type==fe.noteSize,m=48e3,y=i*Math.pow(2,(e-(f-1))*.5),P=Math.min(p,2*Math.PI*y/m);if(!(o.type==fe.none&&!s&&u))if(k){const S=P*Math.pow(2,3.5),v=S/(1+S/Math.PI),D=m*v/(2*Math.PI),N=Fe.getRoundedSettingValueFromHz(D),L=Fe.getHzFromSettingValue(N),z=2*Math.PI*L/m,E=new Ue;E.lowPass1stOrderSimplified(P);const l=new rt;l.analyze(E,z);const g=l.magnitude();let F=Math.log2(g);F=-3.5+(F+3.5)*.82,h&&(F=Math.min(F,-1));const M=Math.pow(2,F),I=Fe.getRoundedSettingValueFromLinearGain(M);this.addPoint(Pe.lowPass,N,I)}else{const C=.5/(1-d*Math.sqrt(Math.max(0,t-1)/(x-2))),S=.5/C,v=2*Math.PI*i/m,D=P/v,N=P*(D*Math.pow(S,.9)+1),L=P+(N-P)*S;let z;h?z=m*Math.min(L,P*Math.pow(2,.25))/(2*Math.PI):z=m*L/(2*Math.PI);const E=Fe.getRoundedSettingValueFromHz(z);let l;if(h)l=C;else{const F=new Ue;F.lowPass2ndOrderSimplified(P,C);const M=new rt;M.analyze(F,L),l=M.magnitude()}s||(l=Math.min(l,Math.sqrt(.5)));const g=Fe.getRoundedSettingValueFromLinearGain(l);this.addPoint(Pe.lowPass,E,g)}this.controlPoints.length=this.controlPointCount}convertLegacySettingsForSynth(e,t,o=!1){this.reset();const i=8e3,p=Math.asin(.95/2)*2,d=.95,f=11,x=8,s=t==0&&o,k=48e3,u=i*Math.pow(2,(e-(f-1))*.5),h=Math.min(p,2*Math.PI*u/k);if(s){const y=h*Math.pow(2,3.5),P=y/(1+y/Math.PI),C=k*P/(2*Math.PI),S=Fe.getRoundedSettingValueFromHz(C),v=Fe.getHzFromSettingValue(S),D=2*Math.PI*v/k,N=new Ue;N.lowPass1stOrderSimplified(h);const L=new rt;L.analyze(N,D);const z=L.magnitude();let E=Math.log2(z);E=-3.5+(E+3.5)*.82;const l=Math.pow(2,E),g=Fe.getRoundedSettingValueFromLinearGain(l);this.addPoint(Pe.lowPass,S,g)}else{const m=.5/(1-d*Math.sqrt(Math.max(0,t-1)/(x-2))),y=.5/m,P=2*Math.PI*i/k,C=h/P,S=h*(C*Math.pow(y,.9)+1),v=h+(S-h)*y;let D;D=k*v/(2*Math.PI);const N=Fe.getSettingValueFromHz(D);let L;const z=new Ue;z.lowPass2ndOrderSimplified(h,m);const E=new rt;E.analyze(z,v),L=E.magnitude();const l=Fe.getRoundedSettingValueFromLinearGain(L);this.addPoint(Pe.lowPass,N,l)}}}class Fe{constructor(){a(this,"freq",0);a(this,"gain",n.filterGainCenter);a(this,"type",Pe.peak)}set(e,t){this.freq=e,this.gain=t}getHz(){return Fe.getHzFromSettingValue(this.freq)}static getHzFromSettingValue(e){return n.filterFreqReferenceHz*Math.pow(2,(e-n.filterFreqReferenceSetting)*n.filterFreqStep)}static getSettingValueFromHz(e){return Math.log2(e/n.filterFreqReferenceHz)/n.filterFreqStep+n.filterFreqReferenceSetting}static getRoundedSettingValueFromHz(e){return Math.max(0,Math.min(n.filterFreqRange-1,Math.round(Fe.getSettingValueFromHz(e))))}getLinearGain(e=1){const t=(this.gain-n.filterGainCenter)*n.filterGainStep,o=this.type==Pe.peak?0:-.5,i=o+(t-o)*e;return Math.pow(2,i)}static getRoundedSettingValueFromLinearGain(e){return Math.max(0,Math.min(n.filterGainRange-1,Math.round(Math.log2(e)/n.filterGainStep+n.filterGainCenter)))}toCoefficients(e,t,o=1,i=1){const c=2*Math.PI*Math.max(n.filterFreqMinHz,Math.min(n.filterFreqMaxHz,o*this.getHz()))/t,p=this.getLinearGain(i);switch(this.type){case Pe.lowPass:e.lowPass2ndOrderButterworth(c,p);break;case Pe.highPass:e.highPass2ndOrderButterworth(c,p);break;case Pe.peak:e.peak2ndOrder(c,p,1);break;default:throw new Error}}getVolumeCompensationMult(){const e=(this.freq-n.filterFreqReferenceSetting)*n.filterFreqStep,t=(this.gain-n.filterGainCenter)*n.filterGainStep;switch(this.type){case Pe.lowPass:const o=Math.pow(2,e)*n.filterFreqReferenceHz/8e3,i=(Math.sqrt(1+4*o)-1)/2,c=Math.log2(i);return Math.pow(.5,.2*Math.max(0,t+1)+Math.min(0,Math.max(-3,.595*c+.35*Math.min(0,t+1))));case Pe.highPass:return Math.pow(.5,.125*Math.max(0,t+1)+Math.min(0,.3*(-e-Math.log2(n.filterFreqReferenceHz/125))+.2*Math.min(0,t+1)));case Pe.peak:const p=e+Math.log2(n.filterFreqReferenceHz/2e3),d=Math.pow(1/(1+Math.pow(p/3,2)),2);return Math.pow(.5,.125*Math.max(0,t)+.1*d*Math.min(0,t));default:throw new Error}}}class Re{constructor(e,t){a(this,"type",T.chip);a(this,"preset",0);a(this,"chipWave",2);a(this,"chipNoise",1);a(this,"eqFilter",new Me);a(this,"eqFilterType",!1);a(this,"eqFilterSimpleCut",n.filterSimpleCutRange-1);a(this,"eqFilterSimplePeak",0);a(this,"noteFilter",new Me);a(this,"noteFilterType",!1);a(this,"noteFilterSimpleCut",n.filterSimpleCutRange-1);a(this,"noteFilterSimplePeak",0);a(this,"eqSubFilters",[]);a(this,"noteSubFilters",[]);a(this,"tmpEqFilterStart",null);a(this,"tmpEqFilterEnd",null);a(this,"tmpNoteFilterStart",null);a(this,"tmpNoteFilterEnd",null);a(this,"envelopes",[]);a(this,"fadeIn",0);a(this,"fadeOut",n.fadeOutNeutral);a(this,"envelopeCount",0);a(this,"transition",n.transitions.dictionary.normal.index);a(this,"pitchShift",0);a(this,"detune",0);a(this,"vibrato",0);a(this,"interval",0);a(this,"vibratoDepth",0);a(this,"vibratoSpeed",10);a(this,"vibratoDelay",0);a(this,"vibratoType",0);a(this,"unison",0);a(this,"effects",0);a(this,"chord",1);a(this,"volume",0);a(this,"pan",n.panCenter);a(this,"panDelay",10);a(this,"arpeggioSpeed",12);a(this,"fastTwoNoteArp",!1);a(this,"legacyTieOver",!1);a(this,"clicklessTransition",!1);a(this,"aliases",!1);a(this,"pulseWidth",n.pulseWidthRange);a(this,"stringSustain",10);a(this,"distortion",0);a(this,"bitcrusherFreq",0);a(this,"bitcrusherQuantization",0);a(this,"chorus",0);a(this,"reverb",0);a(this,"echoSustain",0);a(this,"echoDelay",0);a(this,"algorithm",0);a(this,"feedbackType",0);a(this,"feedbackAmplitude",0);a(this,"LFOtime",0);a(this,"nextLFOtime",0);a(this,"arpTime",0);a(this,"customChipWave",new Float32Array(64));a(this,"customChipWaveIntegral",new Float32Array(65));a(this,"operators",[]);a(this,"spectrumWave");a(this,"harmonicsWave",new mn);a(this,"drumsetEnvelopes",[]);a(this,"drumsetSpectrumWaves",[]);a(this,"modChannels",[]);a(this,"modInstruments",[]);a(this,"modulators",[]);a(this,"modFilterTypes",[]);a(this,"invalidModulators",[]);if(t)for(let d=0;d<n.modCount;d++)this.modChannels.push(0),this.modInstruments.push(0),this.modulators.push(n.modulators.dictionary.none.index);this.spectrumWave=new At(e);for(let d=0;d<n.operatorCount;d++)this.operators[d]=new vn(d);for(let d=0;d<n.drumCount;d++)this.drumsetEnvelopes[d]=n.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[d]=new At(!0);for(let d=0;d<64;d++)this.customChipWave[d]=24-Math.floor(d*(48/64));let o=0;for(let d=0;d<this.customChipWave.length;d++)o+=this.customChipWave[d];const i=o/this.customChipWave.length;let c=0,p=0;for(let d=0;d<this.customChipWave.length;d++)c+=p,p=this.customChipWave[d]-i,this.customChipWaveIntegral[d]=c;this.customChipWaveIntegral[64]=0}setTypeAndReset(e,t,o){o&&(e=T.mod),this.type=e,this.preset=e,this.volume=0,this.effects=1<<ce.panning,this.chorus=n.chorusRange-1,this.reverb=0,this.echoSustain=Math.floor((n.echoSustainRange-1)*.5),this.echoDelay=Math.floor((n.echoDelayRange-1)*.5),this.eqFilter.reset(),this.eqFilterType=!1,this.eqFilterSimpleCut=n.filterSimpleCutRange-1,this.eqFilterSimplePeak=0;for(let i=0;i<n.filterMorphCount;i++)this.eqSubFilters[i]=null,this.noteSubFilters[i]=null;switch(this.noteFilter.reset(),this.noteFilterType=!1,this.noteFilterSimpleCut=n.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.distortion=Math.floor((n.distortionRange-1)*.75),this.bitcrusherFreq=Math.floor((n.bitcrusherFreqRange-1)*.5),this.bitcrusherQuantization=Math.floor((n.bitcrusherQuantizationRange-1)*.5),this.pan=n.panCenter,this.panDelay=10,this.pitchShift=n.pitchShiftCenter,this.detune=n.detuneCenter,this.vibrato=0,this.unison=0,this.stringSustain=10,this.clicklessTransition=!1,this.arpeggioSpeed=12,this.legacyTieOver=!1,this.aliases=!1,this.fadeIn=0,this.fadeOut=n.fadeOutNeutral,this.transition=n.transitions.dictionary.normal.index,this.envelopeCount=0,e){case T.chip:this.chipWave=2,this.chord=n.chords.dictionary.arpeggio.index;break;case T.customChipWave:this.chipWave=2,this.chord=n.chords.dictionary.arpeggio.index;for(let f=0;f<64;f++)this.customChipWave[f]=24-Math.floor(f*(48/64));let i=0;for(let f=0;f<this.customChipWave.length;f++)i+=this.customChipWave[f];const c=i/this.customChipWave.length;let p=0,d=0;for(let f=0;f<this.customChipWave.length;f++)p+=d,d=this.customChipWave[f]-c,this.customChipWaveIntegral[f]=p;this.customChipWaveIntegral[64]=0;break;case T.fm:this.chord=n.chords.dictionary["custom interval"].index,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0;for(let f=0;f<this.operators.length;f++)this.operators[f].reset(f);break;case T.noise:this.chipNoise=1,this.chord=n.chords.dictionary.arpeggio.index;break;case T.spectrum:this.chord=n.chords.dictionary.simultaneous.index,this.spectrumWave.reset(t);break;case T.drumset:this.chord=n.chords.dictionary.simultaneous.index;for(let f=0;f<n.drumCount;f++)this.drumsetEnvelopes[f]=n.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[f]==null&&(this.drumsetSpectrumWaves[f]=new At(!0)),this.drumsetSpectrumWaves[f].reset(t);break;case T.harmonics:this.chord=n.chords.dictionary.simultaneous.index,this.harmonicsWave.reset();break;case T.pwm:this.chord=n.chords.dictionary.arpeggio.index,this.pulseWidth=n.pulseWidthRange;break;case T.pickedString:this.chord=n.chords.dictionary.strum.index,this.harmonicsWave.reset();break;case T.mod:this.transition=0,this.vibrato=0,this.interval=0,this.effects=0,this.chord=0,this.modChannels=[],this.modInstruments=[],this.modulators=[];for(let f=0;f<n.modCount;f++)this.modChannels.push(-2),this.modInstruments.push(0),this.modulators.push(n.modulators.dictionary.none.index),this.invalidModulators[f]=!1,this.modFilterTypes[f]=0;break;default:throw new Error("Unrecognized instrument type: "+e)}this.chord!=n.chords.dictionary.simultaneous.index&&(this.effects=this.effects|1<<ce.chord)}convertLegacySettings(e,t){let o=e.filterCutoff,i=e.filterResonance,c=e.filterEnvelope,p=e.pulseEnvelope,d=e.operatorEnvelopes,f=e.feedbackEnvelope;o==null&&(o=this.type==T.chip?6:10),i==null&&(i=0),c==null&&(c=n.envelopes.dictionary.none),p==null&&(p=n.envelopes.dictionary[this.type==T.pwm?"twang 2":"none"]),d==null&&(d=[n.envelopes.dictionary[this.type==T.fm?"note size":"none"],n.envelopes.dictionary.none,n.envelopes.dictionary.none,n.envelopes.dictionary.none]),f==null&&(f=n.envelopes.dictionary.none),o==11-1&&c.type==fe.punch&&(c=n.envelopes.dictionary.none);const k=n.algorithms[this.algorithm].carrierCount;let u=!0,h=!0,m=c.type==fe.noteSize||p.type==fe.noteSize;if(this.type==T.fm){m=m||f.type==fe.noteSize;for(let y=0;y<d.length;y++)y<k?d[y].type!=fe.noteSize?h=!1:u=!1:m=m||d[y].type==fe.noteSize}this.envelopeCount=0,this.type==T.fm&&(h&&m?this.addEnvelope(n.instrumentAutomationTargets.dictionary.noteVolume.index,0,n.envelopes.dictionary["note size"].index):u&&!m&&this.addEnvelope(n.instrumentAutomationTargets.dictionary.none.index,0,n.envelopes.dictionary["note size"].index)),c.type==fe.none?(this.noteFilter.reset(),this.noteFilterType=!1,this.eqFilter.convertLegacySettings(o,i,c),this.effects&=~(1<<ce.noteFilter),(t||this.eqFilterType)&&(this.eqFilterType=!0,this.eqFilterSimpleCut=o,this.eqFilterSimplePeak=i)):(this.eqFilter.reset(),this.eqFilterType=!1,this.noteFilterType=!1,this.noteFilter.convertLegacySettings(o,i,c),this.effects|=1<<ce.noteFilter,this.addEnvelope(n.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index,0,c.index),(t||this.noteFilterType)&&(this.noteFilterType=!0,this.noteFilterSimpleCut=o,this.noteFilterSimplePeak=i)),p.type!=fe.none&&this.addEnvelope(n.instrumentAutomationTargets.dictionary.pulseWidth.index,0,p.index);for(let y=0;y<d.length;y++)y<k&&h||d[y].type!=fe.none&&this.addEnvelope(n.instrumentAutomationTargets.dictionary.operatorAmplitude.index,y,d[y].index);f.type!=fe.none&&this.addEnvelope(n.instrumentAutomationTargets.dictionary.feedbackAmplitude.index,0,f.index)}toJsonObject(){const e={type:n.instrumentTypeNames[this.type],volume:this.volume,eqFilter:this.eqFilter.toJsonObject(),eqFilterType:this.eqFilterType,eqSimpleCut:this.eqFilterSimpleCut,eqSimplePeak:this.eqFilterSimplePeak};this.preset!=this.type&&(e.preset=this.preset);for(let i=0;i<n.filterMorphCount;i++)this.eqSubFilters[i]!=null&&(e["eqSubFilters"+i]=this.eqSubFilters[i].toJsonObject());const t=[];for(const i of n.effectOrder)this.effects&1<<i&&t.push(n.effectNames[i]);if(e.effects=t,gt(this.effects)&&(e.transition=n.transitions[this.transition].name,e.clicklessTransition=this.clicklessTransition),vt(this.effects)&&(e.chord=this.getChord().name,e.fastTwoNoteArp=this.fastTwoNoteArp,e.arpeggioSpeed=this.arpeggioSpeed),bt(this.effects)&&(e.pitchShiftSemitones=this.pitchShift),St(this.effects)&&(e.detuneCents=X.detuneToCents(this.detune)),Ft(this.effects)&&(this.vibrato==-1&&(this.vibrato=5),this.vibrato!=5?e.vibrato=n.vibratos[this.vibrato].name:e.vibrato="custom",e.vibratoDepth=this.vibratoDepth,e.vibratoDelay=this.vibratoDelay,e.vibratoSpeed=this.vibratoSpeed,e.vibratoType=this.vibratoType),ot(this.effects)){e.noteFilterType=this.noteFilterType,e.noteSimpleCut=this.noteFilterSimpleCut,e.noteSimplePeak=this.noteFilterSimplePeak,e.noteFilter=this.noteFilter.toJsonObject();for(let i=0;i<n.filterMorphCount;i++)this.noteSubFilters[i]!=null&&(e["noteSubFilters"+i]=this.noteSubFilters[i].toJsonObject())}if(Ze(this.effects)&&(e.distortion=Math.round(100*this.distortion/(n.distortionRange-1)),e.aliases=this.aliases),st(this.effects)&&(e.bitcrusherOctave=(n.bitcrusherFreqRange-1-this.bitcrusherFreq)*n.bitcrusherOctaveStep,e.bitcrusherQuantization=Math.round(100*this.bitcrusherQuantization/(n.bitcrusherQuantizationRange-1))),Xe(this.effects)&&(e.pan=Math.round(100*(this.pan-n.panCenter)/n.panCenter),e.panDelay=this.panDelay),je(this.effects)&&(e.chorus=Math.round(100*this.chorus/(n.chorusRange-1))),_e(this.effects)&&(e.echoSustain=Math.round(100*this.echoSustain/(n.echoSustainRange-1)),e.echoDelayBeats=Math.round(1e3*(this.echoDelay+1)*n.echoDelayStepTicks/(n.ticksPerPart*n.partsPerBeat))/1e3),Le(this.effects)&&(e.reverb=Math.round(100*this.reverb/(n.reverbRange-1))),this.type!=T.drumset&&(e.fadeInSeconds=Math.round(1e4*X.fadeInSettingToSeconds(this.fadeIn))/1e4,e.fadeOutTicks=X.fadeOutSettingToTicks(this.fadeOut)),this.type==T.harmonics||this.type==T.pickedString){e.harmonics=[];for(let i=0;i<n.harmonicsControlPoints;i++)e.harmonics[i]=Math.round(100*this.harmonicsWave.harmonics[i]/n.harmonicsMax)}if(this.type==T.noise)e.wave=n.chipNoises[this.chipNoise].name;else if(this.type==T.spectrum){e.spectrum=[];for(let i=0;i<n.spectrumControlPoints;i++)e.spectrum[i]=Math.round(100*this.spectrumWave.spectrum[i]/n.spectrumMax)}else if(this.type==T.drumset){e.drums=[];for(let i=0;i<n.drumCount;i++){const c=[];for(let p=0;p<n.spectrumControlPoints;p++)c[p]=Math.round(100*this.drumsetSpectrumWaves[i].spectrum[p]/n.spectrumMax);e.drums[i]={filterEnvelope:this.getDrumsetEnvelope(i).name,spectrum:c}}}else if(this.type==T.chip)e.wave=n.chipWaves[this.chipWave].name,e.unison=n.unisons[this.unison].name;else if(this.type==T.pwm)e.pulseWidth=this.pulseWidth;else if(this.type==T.pickedString)e.unison=n.unisons[this.unison].name,e.stringSustain=Math.round(100*this.stringSustain/(n.stringSustainRange-1));else if(this.type==T.harmonics)e.unison=n.unisons[this.unison].name;else if(this.type==T.fm){const i=[];for(const c of this.operators)i.push({frequency:n.operatorFrequencies[c.frequency].name,amplitude:c.amplitude,waveform:n.operatorWaves[c.waveform].name,pulseWidth:c.pulseWidth});e.algorithm=n.algorithms[this.algorithm].name,e.feedbackType=n.feedbacks[this.feedbackType].name,e.feedbackAmplitude=this.feedbackAmplitude,e.operators=i}else if(this.type==T.customChipWave){e.wave=n.chipWaves[this.chipWave].name,e.unison=n.unisons[this.unison].name,e.customChipWave=new Float64Array(64),e.customChipWaveIntegral=new Float64Array(65);for(let i=0;i<this.customChipWave.length;i++)e.customChipWave[i]=this.customChipWave[i]}else if(this.type==T.mod){e.modChannels=[],e.modInstruments=[],e.modSettings=[],e.modStatuses=[];for(let i=0;i<n.modCount;i++)e.modChannels[i]=this.modChannels[i],e.modInstruments[i]=this.modInstruments[i],e.modSettings[i]=this.modulators[i]}else throw new Error("Unrecognized instrument type");const o=[];for(let i=0;i<this.envelopeCount;i++)o.push(this.envelopes[i].toJsonObject());return e.envelopes=o,e}fromJsonObject(e,t,o,i,c,p=0){e==null&&(e={});let d=n.instrumentTypeNames.indexOf(e.type);if(d==-1&&(d=o?T.mod:t?T.noise:T.chip),this.setTypeAndReset(d,t,o),e.preset!=null&&(this.preset=e.preset>>>0),e.volume!=null?this.volume=q(-n.volumeRange/2,n.volumeRange/2+1,e.volume|0):this.volume=0,Array.isArray(e.effects)){let h=0;for(let m=0;m<e.effects.length;m++)h=h|1<<n.effectNames.indexOf(e.effects[m]);this.effects=h&(1<<ce.length)-1}else{const h=["none","reverb","chorus","chorus & reverb"];this.effects=h.indexOf(e.effects),this.effects==-1&&(this.effects=this.type==T.noise?0:1)}this.transition=n.transitions.dictionary.normal.index;const f=e.transition||e.envelope;if(f!=null){let h=n.transitions.dictionary[f];if(e.fadeInSeconds==null||e.fadeOutTicks==null){const m={binary:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},seamless:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},sudden:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},hard:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},smooth:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},soft:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},slide:{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},"cross fade":{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},"hard fade":{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},"medium fade":{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},"soft fade":{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}}[f];m!=null&&(h=n.transitions.dictionary[m.transition],this.fadeIn=X.secondsToFadeInSetting(m.fadeInSeconds),this.fadeOut=X.ticksToFadeOutSetting(m.fadeOutTicks))}h!=null&&(this.transition=h.index),this.transition!=n.transitions.dictionary.normal.index&&(this.effects=this.effects|1<<ce.transition)}e.fadeInSeconds!=null&&(this.fadeIn=X.secondsToFadeInSetting(+e.fadeInSeconds)),e.fadeOutTicks!=null&&(this.fadeOut=X.ticksToFadeOutSetting(+e.fadeOutTicks));{const h=e.chord,m={harmony:"simultaneous"},y=n.chords.dictionary[m[h]]||n.chords.dictionary[h];y!=null?this.chord=y.index:this.type==T.noise?this.chord=n.chords.dictionary.arpeggio.index:this.type==T.pickedString?this.chord=n.chords.dictionary.strum.index:this.type==T.chip?this.chord=n.chords.dictionary.arpeggio.index:this.type==T.fm?this.chord=n.chords.dictionary["custom interval"].index:this.chord=n.chords.dictionary.simultaneous.index}this.unison=n.unisons.dictionary.none.index;const x=e.unison||e.interval||e.chorus;if(x!=null){const h={union:"none",fifths:"fifth",octaves:"octave"},m=n.unisons.dictionary[h[x]]||n.unisons.dictionary[x];m!=null&&(this.unison=m.index)}e.chorus=="custom harmony"&&(this.unison=n.unisons.dictionary.hum.index,this.chord=n.chords.dictionary["custom interval"].index),this.chord!=n.chords.dictionary.simultaneous.index&&!Array.isArray(e.effects)&&(this.effects=this.effects|1<<ce.chord),e.pitchShiftSemitones!=null&&(this.pitchShift=q(0,n.pitchShiftRange,Math.round(+e.pitchShiftSemitones))),e.detuneCents!=null&&(this.detune=q(n.detuneMin,n.detuneMax+1,Math.round(X.centsToDetune(+e.detuneCents)))),this.vibrato=n.vibratos.dictionary.none.index;const s=e.vibrato||e.effect;if(s!=null){const h={"vibrato light":"light","vibrato delayed":"delayed","vibrato heavy":"heavy"},m=n.vibratos.dictionary[h[x]]||n.vibratos.dictionary[s];m!=null?this.vibrato=m.index:s=="custom"&&(this.vibrato=n.vibratos.length),this.vibrato==n.vibratos.length?(this.vibratoDepth=e.vibratoDepth,this.vibratoSpeed=e.vibratoSpeed,this.vibratoDelay=e.vibratoDelay,this.vibratoType=e.vibratoType):(this.vibratoDepth=n.vibratos[this.vibrato].amplitude,this.vibratoDelay=n.vibratos[this.vibrato].delayTicks/2,this.vibratoSpeed=10,this.vibratoType=n.vibratos[this.vibrato].type),m!=n.vibratos.dictionary.none&&(this.effects=this.effects|1<<ce.vibrato)}if(e.pan!=null?(this.pan=q(0,n.panMax+1,Math.round(n.panCenter+(e.pan|0)*n.panCenter/100)),this.pan!=n.panCenter&&(this.effects=this.effects|1<<ce.panning)):(this.pan=n.panCenter,this.effects=this.effects|1<<ce.panning),e.panDelay!=null?this.panDelay=e.panDelay|0:this.panDelay=10,e.detune!=null?this.detune=q(n.detuneMin,n.detuneMax+1,e.detune|0):e.detuneCents==null&&(this.detune=n.detuneCenter),e.distortion!=null&&(this.distortion=q(0,n.distortionRange,Math.round((n.distortionRange-1)*(e.distortion|0)/100))),e.bitcrusherOctave!=null&&(this.bitcrusherFreq=n.bitcrusherFreqRange-1-+e.bitcrusherOctave/n.bitcrusherOctaveStep),e.bitcrusherQuantization!=null&&(this.bitcrusherQuantization=q(0,n.bitcrusherQuantizationRange,Math.round((n.bitcrusherQuantizationRange-1)*(e.bitcrusherQuantization|0)/100))),e.echoSustain!=null&&(this.echoSustain=q(0,n.echoSustainRange,Math.round((n.echoSustainRange-1)*(e.echoSustain|0)/100))),e.echoDelayBeats!=null&&(this.echoDelay=q(0,n.echoDelayRange,Math.round(+e.echoDelayBeats*(n.ticksPerPart*n.partsPerBeat)/n.echoDelayStepTicks-1))),isNaN(e.chorus)||(this.chorus=q(0,n.chorusRange,Math.round((n.chorusRange-1)*(e.chorus|0)/100))),e.reverb!=null?this.reverb=q(0,n.reverbRange,Math.round((n.reverbRange-1)*(e.reverb|0)/100)):this.reverb=p,e.pulseWidth!=null?this.pulseWidth=q(1,n.pulseWidthRange+1,Math.round(e.pulseWidth)):this.pulseWidth=n.pulseWidthRange,e.harmonics!=null){for(let h=0;h<n.harmonicsControlPoints;h++)this.harmonicsWave.harmonics[h]=Math.max(0,Math.min(n.harmonicsMax,Math.round(n.harmonicsMax*+e.harmonics[h]/100)));this.harmonicsWave.markCustomWaveDirty()}else this.harmonicsWave.reset();if(e.spectrum!=null)for(let h=0;h<n.spectrumControlPoints;h++)this.spectrumWave.spectrum[h]=Math.max(0,Math.min(n.spectrumMax,Math.round(n.spectrumMax*+e.spectrum[h]/100)));else this.spectrumWave.reset(t);e.stringSustain!=null?this.stringSustain=q(0,n.stringSustainRange,Math.round((n.stringSustainRange-1)*(e.stringSustain|0)/100)):this.stringSustain=10,this.type==T.noise&&(this.chipNoise=n.chipNoises.findIndex(h=>h.name==e.wave),this.chipNoise==-1&&(this.chipNoise=1));const k={custom:"note size",steady:"none","pluck 1":"twang 1","pluck 2":"twang 2","pluck 3":"twang 3"},u=h=>k[h]!=null?n.envelopes.dictionary[k[h]]:n.envelopes.dictionary[h];if(this.type==T.drumset&&e.drums!=null)for(let h=0;h<n.drumCount;h++){const m=e.drums[h];if(m!=null){if(this.drumsetEnvelopes[h]=n.envelopes.dictionary["twang 2"].index,m.filterEnvelope!=null){const y=u(m.filterEnvelope);y!=null&&(this.drumsetEnvelopes[h]=y.index)}if(m.spectrum!=null)for(let y=0;y<n.spectrumControlPoints;y++)this.drumsetSpectrumWaves[h].spectrum[y]=Math.max(0,Math.min(n.spectrumMax,Math.round(n.spectrumMax*+m.spectrum[y]/100)))}}if(this.type==T.chip){const h={triangle:1,square:2,"pulse wide":3,"pulse narrow":4,sawtooth:5,"double saw":6,"double pulse":7,spiky:8,plateau:0};this.chipWave=h[e.wave]!=null?h[e.wave]:n.chipWaves.findIndex(m=>m.name==e.wave),this.chipWave==-1&&(this.chipWave=1)}if(this.type==T.fm){this.algorithm=n.algorithms.findIndex(h=>h.name==e.algorithm),this.algorithm==-1&&(this.algorithm=0),this.feedbackType=n.feedbacks.findIndex(h=>h.name==e.feedbackType),this.feedbackType==-1&&(this.feedbackType=0),e.feedbackAmplitude!=null?this.feedbackAmplitude=q(0,n.operatorAmplitudeMax+1,e.feedbackAmplitude|0):this.feedbackAmplitude=0;for(let h=0;h<n.operatorCount;h++){const m=this.operators[h];let y;e.operators!=null&&(y=e.operators[h]),y==null&&(y={}),m.frequency=n.operatorFrequencies.findIndex(P=>P.name==y.frequency),m.frequency==-1&&(m.frequency=0),y.amplitude!=null?m.amplitude=q(0,n.operatorAmplitudeMax+1,y.amplitude|0):m.amplitude=0,y.waveform!=null?(m.waveform=n.operatorWaves.findIndex(P=>P.name==y.waveform),m.waveform==-1&&(y.waveform=="square"?(m.waveform=n.operatorWaves.dictionary["pulse width"].index,m.pulseWidth=5):m.waveform=0)):m.waveform=0,y.pulseWidth!=null?m.pulseWidth=y.pulseWidth|0:m.pulseWidth=5}}else if(this.type==T.customChipWave){if(e.customChipWave){for(let C=0;C<64;C++)this.customChipWave[C]=e.customChipWave[C];let h=0;for(let C=0;C<this.customChipWave.length;C++)h+=this.customChipWave[C];const m=h/this.customChipWave.length;let y=0,P=0;for(let C=0;C<this.customChipWave.length;C++)y+=P,P=this.customChipWave[C]-m,this.customChipWaveIntegral[C]=y;this.customChipWaveIntegral[64]=0}}else if(this.type==T.mod&&e.modChannels!=null)for(let h=0;h<n.modCount;h++)this.modChannels[h]=e.modChannels[h],this.modInstruments[h]=e.modInstruments[h],this.modulators[h]=e.modSettings[h];if(this.type!=T.mod){this.chord==n.chords.dictionary.arpeggio.index&&e.arpeggioSpeed!=null?this.arpeggioSpeed=e.arpeggioSpeed:this.arpeggioSpeed=i?9:12,e.fastTwoNoteArp!=null?this.fastTwoNoteArp=e.fastTwoNoteArp:this.fastTwoNoteArp=c,e.clicklessTransition!=null?this.clicklessTransition=e.clicklessTransition:this.clicklessTransition=!1,e.aliases!=null?this.aliases=e.aliases:this.aliases=!1,e.noteFilterType!=null&&(this.noteFilterType=e.noteFilterType),e.noteSimpleCut!=null&&(this.noteFilterSimpleCut=e.noteSimpleCut),e.noteSimplePeak!=null&&(this.noteFilterSimplePeak=e.noteSimplePeak),e.noteFilter!=null?this.noteFilter.fromJsonObject(e.noteFilter):this.noteFilter.reset();for(let h=0;h<n.filterMorphCount;h++)Array.isArray(e["noteSubFilters"+h])&&(this.noteSubFilters[h]=new Me,this.noteSubFilters[h].fromJsonObject(e["noteSubFilters"+h]));if(e.eqFilterType!=null&&(this.eqFilterType=e.eqFilterType),e.eqSimpleCut!=null&&(this.eqFilterSimpleCut=e.eqSimpleCut),e.eqSimplePeak!=null&&(this.eqFilterSimplePeak=e.eqSimplePeak),Array.isArray(e.eqFilter))this.eqFilter.fromJsonObject(e.eqFilter);else{this.eqFilter.reset();const h={},m=8e3,y=11,P=8;if(e.filterCutoffHz!=null?h.filterCutoff=q(0,y,Math.round(y-1+2*Math.log((e.filterCutoffHz|0)/m)/Math.LN2)):h.filterCutoff=this.type==T.chip?6:10,e.filterResonance!=null?h.filterResonance=q(0,P,Math.round((P-1)*(e.filterResonance|0)/100)):h.filterResonance=0,h.filterEnvelope=u(e.filterEnvelope),h.pulseEnvelope=u(e.pulseEnvelope),h.feedbackEnvelope=u(e.feedbackEnvelope),Array.isArray(e.operators)){h.operatorEnvelopes=[];for(let C=0;C<n.operatorCount;C++){let S;e.operators[C]!=null&&(S=u(e.operators[C].envelope)),h.operatorEnvelopes[C]=S??n.envelopes.dictionary.none}}if(e.filter!=null){const C=[10,6,3,0,8,5,2],S=["none","none","none","none","decay 1","decay 2","decay 3"],v=["none","bright","medium","soft","decay bright","decay medium","decay soft"],D={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};let N=D[e.filter]!=null?D[e.filter]:v.indexOf(e.filter);N==-1&&(N=0),h.filterCutoff=C[N],h.filterEnvelope=u(S[N]),h.filterResonance=0}this.convertLegacySettings(h,!0)}for(let h=0;h<n.filterMorphCount;h++)Array.isArray(e["eqSubFilters"+h])&&(this.eqSubFilters[h]=new Me,this.eqSubFilters[h].fromJsonObject(e["eqSubFilters"+h]));if(Array.isArray(e.envelopes)){const h=e.envelopes;for(let m=0;m<h.length&&!(this.envelopeCount>=n.maxEnvelopeCount);m++){const y=new Wt;y.fromJsonObject(h[m]),this.addEnvelope(y.target,y.index,y.envelope)}}}}static frequencyFromPitch(e){return 440*Math.pow(2,(e-69)/12)}addEnvelope(e,t,o){let i=!1;if(this.supportsEnvelopeTarget(e,t)||(i=!0),this.envelopeCount>=n.maxEnvelopeCount)throw new Error;for(;this.envelopes.length<=this.envelopeCount;)this.envelopes[this.envelopes.length]=new Wt;const c=this.envelopes[this.envelopeCount];c.target=i?n.instrumentAutomationTargets.dictionary.none.index:e,c.index=i?0:t,c.envelope=o,this.envelopeCount++}supportsEnvelopeTarget(e,t){const o=n.instrumentAutomationTargets[e];if(t>=o.maxCount||o.compatibleInstruments!=null&&o.compatibleInstruments.indexOf(this.type)==-1||o.effect!=null&&!(this.effects&1<<o.effect))return!1;if(o.isFilter){let i=this.noteFilter.controlPointCount;if(this.noteFilterType&&(i=1),t>=i)return!1}return!0}clearInvalidEnvelopeTargets(){for(let e=0;e<this.envelopeCount;e++){const t=this.envelopes[e].target,o=this.envelopes[e].index;this.supportsEnvelopeTarget(t,o)||(this.envelopes[e].target=n.instrumentAutomationTargets.dictionary.none.index,this.envelopes[e].index=0)}}getTransition(){return gt(this.effects)?n.transitions[this.transition]:this.type==T.mod?n.transitions.dictionary.interrupt:n.transitions.dictionary.normal}getFadeInSeconds(){return this.type==T.drumset?0:X.fadeInSettingToSeconds(this.fadeIn)}getFadeOutTicks(){return this.type==T.drumset?n.drumsetFadeOutTicks:X.fadeOutSettingToTicks(this.fadeOut)}getChord(){return vt(this.effects)?n.chords[this.chord]:n.chords.dictionary.simultaneous}getDrumsetEnvelope(e){if(this.type!=T.drumset)throw new Error("Can't getDrumsetEnvelope() for non-drumset.");return n.envelopes[this.drumsetEnvelopes[e]]}}class lt{constructor(){a(this,"instrument",null);a(this,"awake",!1);a(this,"computed",!1);a(this,"tonesAddedInThisTick",!1);a(this,"flushingDelayLines",!1);a(this,"deactivateAfterThisTick",!1);a(this,"attentuationProgress",0);a(this,"flushedSamples",0);a(this,"activeTones",new at);a(this,"activeModTones",new at);a(this,"releasedTones",new at);a(this,"liveInputTones",new at);a(this,"type",T.chip);a(this,"synthesizer",null);a(this,"wave",null);a(this,"noisePitchFilterMult",1);a(this,"unison",null);a(this,"chord",null);a(this,"effects",0);a(this,"volumeScale",0);a(this,"aliases",!1);a(this,"eqFilterVolume",1);a(this,"eqFilterVolumeDelta",0);a(this,"mixVolume",1);a(this,"mixVolumeDelta",0);a(this,"delayInputMult",0);a(this,"delayInputMultDelta",0);a(this,"distortion",0);a(this,"distortionDelta",0);a(this,"distortionDrive",0);a(this,"distortionDriveDelta",0);a(this,"distortionFractionalInput1",0);a(this,"distortionFractionalInput2",0);a(this,"distortionFractionalInput3",0);a(this,"distortionPrevInput",0);a(this,"distortionNextOutput",0);a(this,"bitcrusherPrevInput",0);a(this,"bitcrusherCurrentOutput",0);a(this,"bitcrusherPhase",1);a(this,"bitcrusherPhaseDelta",0);a(this,"bitcrusherPhaseDeltaScale",1);a(this,"bitcrusherScale",1);a(this,"bitcrusherScaleScale",1);a(this,"bitcrusherFoldLevel",1);a(this,"bitcrusherFoldLevelScale",1);a(this,"eqFilters",[]);a(this,"eqFilterCount",0);a(this,"initialEqFilterInput1",0);a(this,"initialEqFilterInput2",0);a(this,"panningDelayLine",null);a(this,"panningDelayPos",0);a(this,"panningVolumeL",0);a(this,"panningVolumeR",0);a(this,"panningVolumeDeltaL",0);a(this,"panningVolumeDeltaR",0);a(this,"panningOffsetL",0);a(this,"panningOffsetR",0);a(this,"panningOffsetDeltaL",0);a(this,"panningOffsetDeltaR",0);a(this,"chorusDelayLineL",null);a(this,"chorusDelayLineR",null);a(this,"chorusDelayLineDirty",!1);a(this,"chorusDelayPos",0);a(this,"chorusPhase",0);a(this,"chorusVoiceMult",0);a(this,"chorusVoiceMultDelta",0);a(this,"chorusCombinedMult",0);a(this,"chorusCombinedMultDelta",0);a(this,"echoDelayLineL",null);a(this,"echoDelayLineR",null);a(this,"echoDelayLineDirty",!1);a(this,"echoDelayPos",0);a(this,"echoDelayOffsetStart",0);a(this,"echoDelayOffsetEnd",null);a(this,"echoDelayOffsetRatio",0);a(this,"echoDelayOffsetRatioDelta",0);a(this,"echoMult",0);a(this,"echoMultDelta",0);a(this,"echoShelfA1",0);a(this,"echoShelfB0",0);a(this,"echoShelfB1",0);a(this,"echoShelfSampleL",0);a(this,"echoShelfSampleR",0);a(this,"echoShelfPrevInputL",0);a(this,"echoShelfPrevInputR",0);a(this,"reverbDelayLine",null);a(this,"reverbDelayLineDirty",!1);a(this,"reverbDelayPos",0);a(this,"reverbMult",0);a(this,"reverbMultDelta",0);a(this,"reverbShelfA1",0);a(this,"reverbShelfB0",0);a(this,"reverbShelfB1",0);a(this,"reverbShelfSample0",0);a(this,"reverbShelfSample1",0);a(this,"reverbShelfSample2",0);a(this,"reverbShelfSample3",0);a(this,"reverbShelfPrevInput0",0);a(this,"reverbShelfPrevInput1",0);a(this,"reverbShelfPrevInput2",0);a(this,"reverbShelfPrevInput3",0);a(this,"spectrumWave",new Gt);a(this,"harmonicsWave",new fn);a(this,"drumsetSpectrumWaves",[]);for(let e=0;e<n.drumCount;e++)this.drumsetSpectrumWaves[e]=new Gt}allocateNecessaryBuffers(e,t,o){if(Xe(t.effects)&&(this.panningDelayLine==null||this.panningDelayLine.length<e.panningDelayBufferSize)&&(this.panningDelayLine=new Float32Array(e.panningDelayBufferSize)),je(t.effects)&&((this.chorusDelayLineL==null||this.chorusDelayLineL.length<e.chorusDelayBufferSize)&&(this.chorusDelayLineL=new Float32Array(e.chorusDelayBufferSize)),(this.chorusDelayLineR==null||this.chorusDelayLineR.length<e.chorusDelayBufferSize)&&(this.chorusDelayLineR=new Float32Array(e.chorusDelayBufferSize))),_e(t.effects)){const i=Math.max(n.echoDelayRange>>1,t.echoDelay+1),p=X.fittingPowerOfTwo(i*n.echoDelayStepTicks*o)*2;if(this.echoDelayLineL==null||this.echoDelayLineR==null)this.echoDelayLineL=new Float32Array(p),this.echoDelayLineR=new Float32Array(p);else if(this.echoDelayLineL.length<p||this.echoDelayLineR.length<p){const d=new Float32Array(p),f=new Float32Array(p),x=this.echoDelayLineL.length-1;for(let s=0;s<this.echoDelayLineL.length;s++)d[s]=this.echoDelayLineL[this.echoDelayPos+s&x],f[s]=this.echoDelayLineL[this.echoDelayPos+s&x];this.echoDelayPos=this.echoDelayLineL.length,this.echoDelayLineL=d,this.echoDelayLineR=f}}Le(t.effects)&&this.reverbDelayLine==null&&(this.reverbDelayLine=new Float32Array(n.reverbDelayBufferSize))}deactivate(){this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1;for(let e=0;e<this.eqFilterCount;e++)this.eqFilters[e].resetOutput();if(this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.panningDelayPos=0,this.panningDelayLine!=null)for(let e=0;e<this.panningDelayLine.length;e++)this.panningDelayLine[e]=0;this.echoDelayOffsetEnd=null,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.volumeScale=1,this.aliases=!1,this.awake=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0}resetAllEffects(){if(this.deactivate(),this.chorusDelayLineDirty){for(let e=0;e<this.chorusDelayLineL.length;e++)this.chorusDelayLineL[e]=0;for(let e=0;e<this.chorusDelayLineR.length;e++)this.chorusDelayLineR[e]=0}if(this.echoDelayLineDirty){for(let e=0;e<this.echoDelayLineL.length;e++)this.echoDelayLineL[e]=0;for(let e=0;e<this.echoDelayLineR.length;e++)this.echoDelayLineR[e]=0}if(this.reverbDelayLineDirty)for(let e=0;e<this.reverbDelayLine.length;e++)this.reverbDelayLine[e]=0;this.chorusPhase=0}compute(e,t,o,i,c,p,d){this.computed=!0,this.type=t.type,this.synthesizer=X.getInstrumentSynthFunction(t),this.unison=n.unisons[t.unison],this.chord=t.getChord(),this.noisePitchFilterMult=n.chipNoises[t.chipNoise].pitchFilterMult,this.effects=t.effects,this.aliases=t.aliases,this.volumeScale=1,this.allocateNecessaryBuffers(e,t,o);const f=e.samplesPerSecond;this.updateWaves(t,f);const x=Ze(this.effects),s=st(this.effects),k=Xe(this.effects),u=je(this.effects),h=_e(this.effects),m=Le(this.effects);if(x){let l=t.distortion,g=t.distortion;e.isModActive(n.modulators.dictionary.distortion.index,p,d)&&(l=e.getModValue(n.modulators.dictionary.distortion.index,p,d,!1),g=e.getModValue(n.modulators.dictionary.distortion.index,p,d,!0));const F=Math.min(1,l/(n.distortionRange-1)),M=Math.min(1,g/(n.distortionRange-1)),I=Math.pow(1-.895*(Math.pow(20,F)-1)/19,2),A=Math.pow(1-.895*(Math.pow(20,M)-1)/19,2),V=(1+2*F)/n.distortionBaseVolume,Y=(1+2*M)/n.distortionBaseVolume;this.distortion=I,this.distortionDelta=(A-I)/i,this.distortionDrive=V,this.distortionDriveDelta=(Y-V)/i}if(s){let l=t.bitcrusherFreq,g=t.bitcrusherFreq;e.isModActive(n.modulators.dictionary["freq crush"].index,p,d)&&(l=e.getModValue(n.modulators.dictionary["freq crush"].index,p,d,!1),g=e.getModValue(n.modulators.dictionary["freq crush"].index,p,d,!0));let F=t.bitcrusherQuantization,M=t.bitcrusherQuantization;e.isModActive(n.modulators.dictionary["bit crush"].index,p,d)&&(F=e.getModValue(n.modulators.dictionary["bit crush"].index,p,d,!1),M=e.getModValue(n.modulators.dictionary["bit crush"].index,p,d,!0));const I=n.keys[e.song.key].basePitch,A=Re.frequencyFromPitch(I+60)*Math.pow(2,(n.bitcrusherFreqRange-1-l)*n.bitcrusherOctaveStep),V=Re.frequencyFromPitch(I+60)*Math.pow(2,(n.bitcrusherFreqRange-1-g)*n.bitcrusherOctaveStep),Y=Math.min(1,A/f),Q=Math.min(1,V/f);this.bitcrusherPhaseDelta=Y,this.bitcrusherPhaseDeltaScale=Math.pow(Q/Y,1/i);const G=2*n.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,(n.bitcrusherQuantizationRange-1-F)*.5)),W=2*n.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,(n.bitcrusherQuantizationRange-1-M)*.5));this.bitcrusherScale=G,this.bitcrusherScaleScale=Math.pow(W/G,1/i);const ae=2*n.bitcrusherBaseVolume*Math.pow(1.5,n.bitcrusherQuantizationRange-1-F),$=2*n.bitcrusherBaseVolume*Math.pow(1.5,n.bitcrusherQuantizationRange-1-M);this.bitcrusherFoldLevel=ae,this.bitcrusherFoldLevelScale=Math.pow($/ae,1/i)}let y=1;if(t.eqFilterType){const l=t.eqFilter;t.eqSubFilters[1]==null&&(t.eqSubFilters[1]=new Me);const g=t.eqSubFilters[1];let F=t.eqFilterSimpleCut,M=t.eqFilterSimplePeak,I=t.eqFilterSimpleCut,A=t.eqFilterSimplePeak,V=!1;e.isModActive(n.modulators.dictionary["eq filt cut"].index,p,d)&&(F=e.getModValue(n.modulators.dictionary["eq filt cut"].index,p,d,!1),I=e.getModValue(n.modulators.dictionary["eq filt cut"].index,p,d,!0),V=!0),e.isModActive(n.modulators.dictionary["eq filt peak"].index,p,d)&&(M=e.getModValue(n.modulators.dictionary["eq filt peak"].index,p,d,!1),A=e.getModValue(n.modulators.dictionary["eq filt peak"].index,p,d,!0),V=!0);let Y;if(V){l.convertLegacySettingsForSynth(F,M),g.convertLegacySettingsForSynth(I,A),Y=l.controlPoints[0];let Q=g.controlPoints[0];Y.toCoefficients(X.tempFilterStartCoefficients,f,1,1),Q.toCoefficients(X.tempFilterEndCoefficients,f,1,1),this.eqFilters.length<1&&(this.eqFilters[0]=new Qe),this.eqFilters[0].loadCoefficientsWithGradient(X.tempFilterStartCoefficients,X.tempFilterEndCoefficients,1/i,Y.type==Pe.lowPass)}else l.convertLegacySettingsForSynth(F,M,!0),Y=l.controlPoints[0],Y.toCoefficients(X.tempFilterStartCoefficients,f,1,1),this.eqFilters.length<1&&(this.eqFilters[0]=new Qe),this.eqFilters[0].loadCoefficientsWithGradient(X.tempFilterStartCoefficients,X.tempFilterStartCoefficients,1/i,Y.type==Pe.lowPass);y*=Y.getVolumeCompensationMult(),this.eqFilterCount=1,y=Math.min(3,y)}else{const l=t.tmpEqFilterStart!=null?t.tmpEqFilterStart:t.eqFilter;for(let g=0;g<l.controlPointCount;g++){let F=l.controlPoints[g],M=t.tmpEqFilterEnd!=null&&t.tmpEqFilterEnd.controlPoints[g]!=null?t.tmpEqFilterEnd.controlPoints[g]:l.controlPoints[g];F.type!=M.type&&(F=M),F.toCoefficients(X.tempFilterStartCoefficients,f,1,1),M.toCoefficients(X.tempFilterEndCoefficients,f,1,1),this.eqFilters.length<=g&&(this.eqFilters[g]=new Qe),this.eqFilters[g].loadCoefficientsWithGradient(X.tempFilterStartCoefficients,X.tempFilterEndCoefficients,1/i,F.type==Pe.lowPass),y*=F.getVolumeCompensationMult()}this.eqFilterCount=l.controlPointCount,y=Math.min(3,y)}const P=X.instrumentVolumeToVolumeMult(t.volume);this.mixVolume=P;let C=P;if(e.isModActive(n.modulators.dictionary["mix volume"].index,p,d)){const l=e.getModValue(n.modulators.dictionary["mix volume"].index,p,d,!1),g=e.getModValue(n.modulators.dictionary["mix volume"].index,p,d,!0);this.mixVolume*=l<=0?(l+n.volumeRange/2)/(n.volumeRange/2):X.instrumentVolumeToVolumeMult(l),C*=g<=0?(g+n.volumeRange/2)/(n.volumeRange/2):X.instrumentVolumeToVolumeMult(g)}e.isModActive(n.modulators.dictionary["song volume"].index)&&(this.mixVolume*=e.getModValue(n.modulators.dictionary["song volume"].index,void 0,void 0,!1)/100,C*=e.getModValue(n.modulators.dictionary["song volume"].index,void 0,void 0,!0)/100),this.mixVolumeDelta=(C-this.mixVolume)/i;let S=y,v=y,D=1,N=1;if(k){let l=t.pan,g=t.pan;e.isModActive(n.modulators.dictionary.pan.index,p,d)&&(l=e.getModValue(n.modulators.dictionary.pan.index,p,d,!1),g=e.getModValue(n.modulators.dictionary.pan.index,p,d,!0));let F=Math.max(-1,Math.min(1,(l-n.panCenter)/n.panCenter)),M=Math.max(-1,Math.min(1,(g-n.panCenter)/n.panCenter));const I=Math.cos((1+F)*Math.PI*.25)*1.414,A=Math.cos((1-F)*Math.PI*.25)*1.414,V=Math.cos((1+M)*Math.PI*.25)*1.414,Y=Math.cos((1-M)*Math.PI*.25)*1.414,Q=f*n.panDelaySecondsMax;let G=t.panDelay,W=t.panDelay;e.isModActive(n.modulators.dictionary["pan delay"].index,p,d)&&(G=e.getModValue(n.modulators.dictionary["pan delay"].index,p,d,!1),W=e.getModValue(n.modulators.dictionary["pan delay"].index,p,d,!0));const ae=F*G*Q/10,$=M*W*Q/10,pe=Math.max(0,ae),J=Math.max(0,-ae),ee=Math.max(0,$),le=Math.max(0,-$);this.panningVolumeL=I,this.panningVolumeR=A,this.panningVolumeDeltaL=(V-I)/i,this.panningVolumeDeltaR=(Y-A)/i,this.panningOffsetL=this.panningDelayPos-pe+e.panningDelayBufferSize,this.panningOffsetR=this.panningDelayPos-J+e.panningDelayBufferSize,this.panningOffsetDeltaL=(ee-pe)/i,this.panningOffsetDeltaR=(le-J)/i}if(u){let l=t.chorus,g=t.chorus;e.isModActive(n.modulators.dictionary.chorus.index,p,d)&&(l=e.getModValue(n.modulators.dictionary.chorus.index,p,d,!1),g=e.getModValue(n.modulators.dictionary.chorus.index,p,d,!0));let F=Math.min(1,l/(n.chorusRange-1)),M=Math.min(1,g/(n.chorusRange-1));F=F*.6+Math.pow(F,6)*.4,M=M*.6+Math.pow(M,6)*.4;const I=1/Math.sqrt(3*F*F+1),A=1/Math.sqrt(3*M*M+1);this.chorusVoiceMult=F,this.chorusVoiceMultDelta=(M-F)/i,this.chorusCombinedMult=I,this.chorusCombinedMultDelta=(A-I)/i}let L=0,z=0;if(h){let l=t.echoSustain,g=t.echoSustain;e.isModActive(n.modulators.dictionary.echo.index,p,d)&&(l=Math.max(0,e.getModValue(n.modulators.dictionary.echo.index,p,d,!1)),g=Math.max(0,e.getModValue(n.modulators.dictionary.echo.index,p,d,!0)));const F=Math.min(1,Math.pow(l/n.echoSustainRange,1.1))*.9,M=Math.min(1,Math.pow(g/n.echoSustainRange,1.1))*.9;this.echoMult=F,this.echoMultDelta=Math.max(0,(M-F)/i),L=Math.max(F,M);let I=t.echoDelay,A=t.echoDelay,V=!1;e.isModActive(n.modulators.dictionary["echo delay"].index,p,d)&&(I=e.getModValue(n.modulators.dictionary["echo delay"].index,p,d,!1),A=e.getModValue(n.modulators.dictionary["echo delay"].index,p,d,!0),V=!0);const Y=Math.round((I+1)*n.echoDelayStepTicks*o),Q=Math.round((A+1)*n.echoDelayStepTicks*o);this.echoDelayOffsetEnd!=null&&!V?this.echoDelayOffsetStart=this.echoDelayOffsetEnd:this.echoDelayOffsetStart=Y,this.echoDelayOffsetEnd=Q,z=(this.echoDelayOffsetStart+this.echoDelayOffsetEnd)*.5/f,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=1/i;const G=2*Math.PI*n.echoShelfHz/e.samplesPerSecond;X.tempFilterStartCoefficients.highShelf1stOrder(G,n.echoShelfGain),this.echoShelfA1=X.tempFilterStartCoefficients.a[1],this.echoShelfB0=X.tempFilterStartCoefficients.b[0],this.echoShelfB1=X.tempFilterStartCoefficients.b[1]}let E=0;if(m){let l=t.reverb,g=t.reverb;e.isModActive(n.modulators.dictionary.reverb.index,p,d)&&(l=e.getModValue(n.modulators.dictionary.reverb.index,p,d,!1),g=e.getModValue(n.modulators.dictionary.reverb.index,p,d,!0)),e.isModActive(n.modulators.dictionary["song reverb"].index,p,d)&&(l*=(e.getModValue(n.modulators.dictionary["song reverb"].index,void 0,void 0,!1)-n.modulators.dictionary["song reverb"].convertRealFactor)/n.reverbRange,g*=(e.getModValue(n.modulators.dictionary["song reverb"].index,void 0,void 0,!0)-n.modulators.dictionary["song reverb"].convertRealFactor)/n.reverbRange);const F=Math.min(1,Math.pow(l/n.reverbRange,.667))*.425,M=Math.min(1,Math.pow(g/n.reverbRange,.667))*.425;this.reverbMult=F,this.reverbMultDelta=(M-F)/i,E=Math.max(F,M);const I=2*Math.PI*n.reverbShelfHz/e.samplesPerSecond;X.tempFilterStartCoefficients.highShelf1stOrder(I,n.reverbShelfGain),this.reverbShelfA1=X.tempFilterStartCoefficients.a[1],this.reverbShelfB0=X.tempFilterStartCoefficients.b[0],this.reverbShelfB1=X.tempFilterStartCoefficients.b[1]}if(this.tonesAddedInThisTick)this.attentuationProgress=0,this.flushedSamples=0,this.flushingDelayLines=!1;else if(this.flushingDelayLines){S=0,v=0,D=0,N=0;let l=0;u&&(l+=e.chorusDelayBufferSize),h&&(l+=this.echoDelayLineL.length),m&&(l+=n.reverbDelayBufferSize),this.flushedSamples+=i,this.flushedSamples>=l&&(this.deactivateAfterThisTick=!0)}else{this.attentuationProgress==0||(S=0),v=0;const l=1/256,g=-Math.log2(l);let F=0;if(u&&(F+=n.chorusMaxDelay),h){const V=Math.pow(L,1/z),Q=-1/Math.log2(V)*g;F+=Q}if(m){const V=E*2,Y=n.reverbDelayBufferSize/4/f,Q=Math.pow(V,1/Y),W=-1/Math.log2(Q)*g;F+=W}const I=o/f/F,A=this.attentuationProgress+I;A>=1&&(N=0),this.attentuationProgress=A,this.attentuationProgress>=1&&(this.flushingDelayLines=!0)}this.eqFilterVolume=S,this.eqFilterVolumeDelta=(v-S)/i,this.delayInputMult=D,this.delayInputMultDelta=(N-D)/i}updateWaves(e,t){if(this.volumeScale=1,e.type==T.chip)this.wave=this.aliases?n.rawChipWaves[e.chipWave].samples:n.chipWaves[e.chipWave].samples;else if(e.type==T.customChipWave)this.wave=this.aliases?e.customChipWave:e.customChipWaveIntegral,this.volumeScale=.05;else if(e.type==T.noise)this.wave=Et(e.chipNoise,Tt,Qt);else if(e.type==T.harmonics)this.wave=this.harmonicsWave.getCustomWave(e.harmonicsWave,e.type);else if(e.type==T.pickedString)this.wave=this.harmonicsWave.getCustomWave(e.harmonicsWave,e.type);else if(e.type==T.spectrum)this.wave=this.spectrumWave.getCustomWave(e.spectrumWave,8);else if(e.type==T.drumset){for(let o=0;o<n.drumCount;o++)this.drumsetSpectrumWaves[o].getCustomWave(e.drumsetSpectrumWaves[o],lt._drumsetIndexToSpectrumOctave(o));this.wave=null}else this.wave=null}getDrumsetWave(e){if(this.type==T.drumset)return this.drumsetSpectrumWaves[e].wave;throw new Error("Unhandled instrument type in getDrumsetWave")}static drumsetIndexReferenceDelta(e){return Re.frequencyFromPitch(n.spectrumBasePitch+e*6)/44100}static _drumsetIndexToSpectrumOctave(e){return 15+Math.log2(lt.drumsetIndexReferenceDelta(e))}}var yt=(r=>(r[r.SPACE=32]="SPACE",r[r.HASH=35]="HASH",r[r.PERCENT=37]="PERCENT",r[r.AMPERSAND=38]="AMPERSAND",r[r.PLUS=43]="PLUS",r[r.DASH=45]="DASH",r[r.DOT=46]="DOT",r[r.NUM_0=48]="NUM_0",r[r.NUM_1=49]="NUM_1",r[r.NUM_2=50]="NUM_2",r[r.NUM_3=51]="NUM_3",r[r.NUM_4=52]="NUM_4",r[r.NUM_5=53]="NUM_5",r[r.NUM_6=54]="NUM_6",r[r.NUM_7=55]="NUM_7",r[r.NUM_8=56]="NUM_8",r[r.NUM_9=57]="NUM_9",r[r.EQUALS=61]="EQUALS",r[r.A=65]="A",r[r.B=66]="B",r[r.C=67]="C",r[r.D=68]="D",r[r.E=69]="E",r[r.F=70]="F",r[r.G=71]="G",r[r.H=72]="H",r[r.I=73]="I",r[r.J=74]="J",r[r.K=75]="K",r[r.L=76]="L",r[r.M=77]="M",r[r.N=78]="N",r[r.O=79]="O",r[r.P=80]="P",r[r.Q=81]="Q",r[r.R=82]="R",r[r.S=83]="S",r[r.T=84]="T",r[r.U=85]="U",r[r.V=86]="V",r[r.W=87]="W",r[r.X=88]="X",r[r.Y=89]="Y",r[r.Z=90]="Z",r[r.UNDERSCORE=95]="UNDERSCORE",r[r.a=97]="a",r[r.b=98]="b",r[r.c=99]="c",r[r.d=100]="d",r[r.e=101]="e",r[r.f=102]="f",r[r.g=103]="g",r[r.h=104]="h",r[r.i=105]="i",r[r.j=106]="j",r[r.k=107]="k",r[r.l=108]="l",r[r.m=109]="m",r[r.n=110]="n",r[r.o=111]="o",r[r.p=112]="p",r[r.q=113]="q",r[r.r=114]="r",r[r.s=115]="s",r[r.t=116]="t",r[r.u=117]="u",r[r.v=118]="v",r[r.w=119]="w",r[r.x=120]="x",r[r.y=121]="y",r[r.z=122]="z",r[r.LEFT_CURLY_BRACE=123]="LEFT_CURLY_BRACE",r[r.RIGHT_CURLY_BRACE=125]="RIGHT_CURLY_BRACE",r))(yt||{}),O=(r=>(r[r.beatCount=97]="beatCount",r[r.bars=98]="bars",r[r.vibrato=99]="vibrato",r[r.fadeInOut=100]="fadeInOut",r[r.loopEnd=101]="loopEnd",r[r.eqFilter=102]="eqFilter",r[r.barCount=103]="barCount",r[r.unison=104]="unison",r[r.instrumentCount=105]="instrumentCount",r[r.patternCount=106]="patternCount",r[r.key=107]="key",r[r.loopStart=108]="loopStart",r[r.reverb=109]="reverb",r[r.channelCount=110]="channelCount",r[r.channelOctave=111]="channelOctave",r[r.patterns=112]="patterns",r[r.effects=113]="effects",r[r.rhythm=114]="rhythm",r[r.scale=115]="scale",r[r.tempo=116]="tempo",r[r.preset=117]="preset",r[r.volume=118]="volume",r[r.wave=119]="wave",r[r.filterResonance=121]="filterResonance",r[r.drumsetEnvelopes=122]="drumsetEnvelopes",r[r.algorithm=65]="algorithm",r[r.feedbackAmplitude=66]="feedbackAmplitude",r[r.chord=67]="chord",r[r.detune=68]="detune",r[r.envelopes=69]="envelopes",r[r.feedbackType=70]="feedbackType",r[r.arpeggioSpeed=71]="arpeggioSpeed",r[r.harmonics=72]="harmonics",r[r.stringSustain=73]="stringSustain",r[r.pan=76]="pan",r[r.customChipWave=77]="customChipWave",r[r.songTitle=78]="songTitle",r[r.limiterSettings=79]="limiterSettings",r[r.operatorAmplitudes=80]="operatorAmplitudes",r[r.operatorFrequencies=81]="operatorFrequencies",r[r.operatorWaves=82]="operatorWaves",r[r.spectrum=83]="spectrum",r[r.startInstrument=84]="startInstrument",r[r.channelNames=85]="channelNames",r[r.feedbackEnvelope=86]="feedbackEnvelope",r[r.pulseWidth=87]="pulseWidth",r[r.aliases=88]="aliases",r))(O||{});const B=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95],w=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0];class ze{constructor(e,t,o){a(this,"_bits",[]);a(this,"_readIndex",0);for(let i=t;i<o;i++){const c=w[e.charCodeAt(i)];this._bits.push(c>>5&1),this._bits.push(c>>4&1),this._bits.push(c>>3&1),this._bits.push(c>>2&1),this._bits.push(c>>1&1),this._bits.push(c&1)}}read(e){let t=0;for(;e>0;)t=t<<1,t+=this._bits[this._readIndex++],e--;return t}readLongTail(e,t){let o=e,i=t;for(;this._bits[this._readIndex++];)o+=1<<i,i++;for(;i>0;)i--,this._bits[this._readIndex++]&&(o+=1<<i);return o}readPartDuration(){return this.readLongTail(1,3)}readLegacyPartDuration(){return this.readLongTail(1,2)}readPinCount(){return this.readLongTail(1,0)}readPitchInterval(){return this.read(1)?-this.readLongTail(1,3):this.readLongTail(1,3)}}class Ge{constructor(){a(this,"_index",0);a(this,"_bits",[])}clear(){this._index=0}write(e,t){for(e--;e>=0;)this._bits[this._index++]=t>>>e&1,e--}writeLongTail(e,t,o){if(o<e)throw new Error("value out of bounds");o-=e;let i=t;for(;o>=1<<i;)this._bits[this._index++]=1,o-=1<<i,i++;for(this._bits[this._index++]=0;i>0;)i--,this._bits[this._index++]=o>>>i&1}writePartDuration(e){this.writeLongTail(1,3,e)}writePinCount(e){this.writeLongTail(1,0,e)}writePitchInterval(e){e<0?(this.write(1,1),this.writeLongTail(1,3,-e)):(this.write(1,0),this.writeLongTail(1,3,e))}concat(e){for(let t=0;t<e._index;t++)this._bits[this._index++]=e._bits[t]}encodeBase64(e){for(let t=0;t<this._index;t+=6){const o=this._bits[t]<<5|this._bits[t+1]<<4|this._bits[t+2]<<3|this._bits[t+3]<<2|this._bits[t+4]<<1|this._bits[t+5];e.push(B[o])}return e}lengthBase64(){return Math.ceil(this._index/6)}}class Ke{constructor(e,t,o,i,c=!1){a(this,"pitches");a(this,"pins");a(this,"start");a(this,"end");a(this,"continuesLastPattern");this.pitches=[e],this.pins=[Ye(0,0,i),Ye(0,o-t,c?0:i)],this.start=t,this.end=o,this.continuesLastPattern=!1}pickMainInterval(){let e=0,t=0;for(let o=1;o<this.pins.length;o++){const i=this.pins[o-1],c=this.pins[o];if(i.interval==c.interval){const p=c.time-i.time;e<p&&(e=p,t=i.interval)}}if(e==0){let o=0;for(let i=0;i<this.pins.length;i++){const c=this.pins[i];o<c.size&&(o=c.size,t=c.interval)}}return t}clone(){const e=new Ke(-1,this.start,this.end,3);e.pitches=this.pitches.concat(),e.pins=[];for(const t of this.pins)e.pins.push(Ye(t.interval,t.time,t.size));return e.continuesLastPattern=this.continuesLastPattern,e}getEndPinIndex(e){let t;for(t=1;t<this.pins.length-1&&!(this.pins[t].time+this.start>e);t++);return t}}function Ye(r,e,t){return{interval:r,time:e,size:t}}class it{constructor(){a(this,"notes",[]);a(this,"instruments",[0])}cloneNotes(){const e=[];for(const t of this.notes)e.push(t.clone());return e}reset(){this.notes.length=0,this.instruments[0]=0,this.instruments.length=1}toJsonObject(e,t,o){const i=[];for(const p of this.notes){let d=t.instruments[this.instruments[0]],f=Math.max(0,n.modCount-p.pitches[0]-1),x=e.getVolumeCapForSetting(o,d.modulators[f],d.modFilterTypes[f]);const s=[];for(const u of p.pins){let h=Math.round(o?u.size:u.size*100/x);s.push({tick:(u.time+p.start)*n.rhythms[e.rhythm].stepsPerBeat/n.partsPerBeat,pitchBend:u.interval,volume:h,forMod:o})}const k={pitches:p.pitches,points:s};p.start==0&&(k.continuesLastPattern=p.continuesLastPattern),i.push(k)}const c={notes:i};return e.patternInstruments&&(c.instruments=this.instruments.map(p=>p+1)),c}fromJsonObject(e,t,o,i,c,p){if(t.patternInstruments)if(Array.isArray(e.instruments)){const d=e.instruments,f=q(n.instrumentCountMin,t.getMaxInstrumentsPerPatternForChannel(o)+1,d.length);for(let x=0;x<f;x++)this.instruments[x]=q(0,o.instruments.length,(d[x]|0)-1);this.instruments.length=f}else this.instruments[0]=q(0,o.instruments.length,(e.instrument|0)-1),this.instruments.length=1;if(e.notes&&e.notes.length>0){const d=Math.min(t.beatsPerBar*n.partsPerBeat*(p?n.modCount:1),e.notes.length>>>0);for(let f=0;f<e.notes.length&&!(f>=d);f++){const x=e.notes[f];if(!x||!x.pitches||!(x.pitches.length>=1)||!x.points||!(x.points.length>=2))continue;const s=new Ke(0,0,0,0);s.pitches=[],s.pins=[];for(let y=0;y<x.pitches.length;y++){const P=x.pitches[y]|0;if(s.pitches.indexOf(P)==-1&&(s.pitches.push(P),s.pitches.length>=n.maxChordSize))break}if(s.pitches.length<1)continue;let k=0;for(let y=0;y<x.points.length;y++){const P=x.points[y];if(P==null||P.tick==null)continue;const C=P.pitchBend==null?0:P.pitchBend|0,S=Math.round(+P.tick*n.partsPerBeat/i);let v=o.instruments[this.instruments[0]],D=Math.max(0,n.modCount-s.pitches[0]-1),N=t.getVolumeCapForSetting(p,v.modulators[D],v.modFilterTypes[D]),L;P.volume==null?L=N:P.forMod==null?L=Math.max(0,Math.min(N,Math.round((P.volume|0)*N/100))):L=(P.forMod|0)>0?Math.round(P.volume|0):Math.max(0,Math.min(N,Math.round((P.volume|0)*N/100))),!(S>t.beatsPerBar*n.partsPerBeat)&&(s.pins.length==0&&(s.start=S,k=C),s.pins.push(Ye(C-k,S-s.start,L)))}if(s.pins.length<2)continue;s.end=s.pins[s.pins.length-1].time+s.start;const u=c?n.drumCount-1:n.maxPitch;let h=u,m=0;for(let y=0;y<s.pitches.length;y++)s.pitches[y]+=k,(s.pitches[y]<0||s.pitches[y]>u)&&(s.pitches.splice(y,1),y--),s.pitches[y]<h&&(h=s.pitches[y]),s.pitches[y]>m&&(m=s.pitches[y]);if(!(s.pitches.length<1)){for(let y=0;y<s.pins.length;y++){const P=s.pins[y];P.interval+h<0&&(P.interval=-h),P.interval+m>u&&(P.interval=u-m),y>=2&&P.interval==s.pins[y-1].interval&&P.interval==s.pins[y-2].interval&&P.size==s.pins[y-1].size&&P.size==s.pins[y-2].size&&(s.pins.splice(y-1,1),y--)}s.start==0?s.continuesLastPattern=x.continuesLastPattern===!0:s.continuesLastPattern=!1,this.notes.push(s)}}}}}const ve=class ve{constructor(e){a(this,"title","");a(this,"scale",0);a(this,"key",0);a(this,"tempo",0);a(this,"reverb",0);a(this,"beatsPerBar",0);a(this,"barCount",0);a(this,"patternsPerChannel",0);a(this,"rhythm",0);a(this,"layeredInstruments",!1);a(this,"patternInstruments",!1);a(this,"loopStart",0);a(this,"loopLength",0);a(this,"pitchChannelCount",0);a(this,"noiseChannelCount",0);a(this,"modChannelCount",0);a(this,"channels",[]);a(this,"limitDecay",4);a(this,"limitRise",4e3);a(this,"compressionThreshold",1);a(this,"limitThreshold",1);a(this,"compressionRatio",1);a(this,"limitRatio",1);a(this,"masterGain",1);a(this,"inVolumeCap",0);a(this,"outVolumeCap",0);a(this,"getNewNoteVolume",(e,t,o,i)=>{if(!e||t==null||o==null||i==null)return 6;{i=n.modCount-i-1;let c=n.modulators[this.channels[t].instruments[o].modulators[i]].newNoteVol,p=n.modulators.dictionary.tempo.index;return this.channels[t].instruments[o].modulators[i]==p&&(c=this.tempo-n.modulators[p].convertRealFactor),c??6}});a(this,"getVolumeCap",(e,t,o,i)=>{if(!e||t==null||o==null||i==null)return 6;{i=n.modCount-i-1;let c=this.channels[t].instruments[o],p=n.modulators[c.modulators[i]],d=p.maxRawVol;return d!=null?((p.name=="eq filter"||p.name=="note filter")&&(d=n.filterMorphCount-1,c.modFilterTypes[i]>0&&c.modFilterTypes[i]%2?d=n.filterFreqRange:c.modFilterTypes[i]>0&&(d=n.filterGainRange)),d):6}});a(this,"getVolumeCapForSetting",(e,t,o)=>{if(e){let i=n.modulators[t].maxRawVol;return i!=null?(o!=null&&(n.modulators[t].name=="eq filter"||n.modulators[t].name=="note filter")&&(i=n.filterMorphCount-1,o>0&&o%2?i=n.filterFreqRange:o>0&&(i=n.filterGainRange)),i):n.noteSizeMax}else return n.noteSizeMax});e!=null?this.fromBase64String(e):this.initToDefault(!0)}getChannelCount(){return this.pitchChannelCount+this.noiseChannelCount+this.modChannelCount}getMaxInstrumentsPerChannel(){return Math.max(this.layeredInstruments?n.layeredInstrumentCountMax:n.instrumentCountMin,this.patternInstruments?n.patternInstrumentCountMax:n.instrumentCountMin)}getMaxInstrumentsPerPattern(e){return this.getMaxInstrumentsPerPatternForChannel(this.channels[e])}getMaxInstrumentsPerPatternForChannel(e){return this.layeredInstruments?Math.min(n.layeredInstrumentCountMax,e.instruments.length):1}getChannelIsNoise(e){return e>=this.pitchChannelCount&&e<this.pitchChannelCount+this.noiseChannelCount}getChannelIsMod(e){return e>=this.pitchChannelCount+this.noiseChannelCount}initToDefault(e=!0){if(this.scale=0,this.key=0,this.loopStart=0,this.loopLength=4,this.tempo=150,this.reverb=0,this.beatsPerBar=8,this.barCount=16,this.patternsPerChannel=8,this.rhythm=1,this.layeredInstruments=!1,this.patternInstruments=!1,this.title="Unnamed",document.title=Pt.versionDisplayName,e){this.pitchChannelCount=3,this.noiseChannelCount=1,this.modChannelCount=0;for(let t=0;t<this.getChannelCount();t++){const o=t>=this.pitchChannelCount&&t<this.pitchChannelCount+this.noiseChannelCount,i=t>=this.pitchChannelCount+this.noiseChannelCount;this.channels.length<=t&&(this.channels[t]=new Dt);const c=this.channels[t];c.octave=Math.max(3-t,0);for(let p=0;p<this.patternsPerChannel;p++)c.patterns.length<=p?c.patterns[p]=new it:c.patterns[p].reset();c.patterns.length=this.patternsPerChannel;for(let p=0;p<n.instrumentCountMin;p++)c.instruments.length<=p&&(c.instruments[p]=new Re(o,i)),c.instruments[p].setTypeAndReset(i?T.mod:o?T.noise:T.chip,o,i);c.instruments.length=n.instrumentCountMin;for(let p=0;p<this.barCount;p++)c.bars[p]=p<4?1:0;c.bars.length=this.barCount}this.channels.length=this.getChannelCount()}}toBase64String(){let e,t=[];t.push(ve._variant),t.push(B[ve._latestJummBoxVersion]),t.push(O.songTitle);var o=encodeURIComponent(this.title);t.push(B[o.length>>6],B[o.length&63]);for(let k=0;k<o.length;k++)t.push(o.charCodeAt(k));t.push(O.channelCount,B[this.pitchChannelCount],B[this.noiseChannelCount],B[this.modChannelCount]),t.push(O.scale,B[this.scale]),t.push(O.key,B[this.key]),t.push(O.loopStart,B[this.loopStart>>6],B[this.loopStart&63]),t.push(O.loopEnd,B[this.loopLength-1>>6],B[this.loopLength-1&63]),t.push(O.tempo,B[this.tempo>>6],B[this.tempo&63]),t.push(O.beatCount,B[this.beatsPerBar-1]),t.push(O.barCount,B[this.barCount-1>>6],B[this.barCount-1&63]),t.push(O.patternCount,B[this.patternsPerChannel-1>>6],B[this.patternsPerChannel-1&63]),t.push(O.rhythm,B[this.rhythm]),t.push(O.limiterSettings),this.compressionRatio!=1||this.limitRatio!=1||this.limitRise!=4e3||this.limitDecay!=4||this.limitThreshold!=1||this.compressionThreshold!=1||this.masterGain!=1?(t.push(B[Math.round(this.compressionRatio<1?this.compressionRatio*10:10+(this.compressionRatio-1)*60)]),t.push(B[Math.round(this.limitRatio<1?this.limitRatio*10:9+this.limitRatio)]),t.push(B[this.limitDecay]),t.push(B[Math.round((this.limitRise-2e3)/250)]),t.push(B[Math.round(this.compressionThreshold*20)]),t.push(B[Math.round(this.limitThreshold*20)]),t.push(B[Math.round(this.masterGain*50)>>6],B[Math.round(this.masterGain*50)&63])):t.push(B[63]),t.push(O.channelNames);for(let k=0;k<this.getChannelCount();k++){var i=encodeURIComponent(this.channels[k].name);t.push(B[i.length>>6],B[i.length&63]);for(let u=0;u<i.length;u++)t.push(i.charCodeAt(u))}if(t.push(O.instrumentCount,B[this.layeredInstruments<<1|this.patternInstruments]),this.layeredInstruments||this.patternInstruments)for(let k=0;k<this.getChannelCount();k++)t.push(B[this.channels[k].instruments.length-n.instrumentCountMin]);t.push(O.channelOctave);for(let k=0;k<this.pitchChannelCount;k++)t.push(B[this.channels[k].octave]);for(let k=0;k<this.getChannelCount();k++)for(let u=0;u<this.channels[k].instruments.length;u++){const h=this.channels[k].instruments[u];if(t.push(O.startInstrument,B[h.type]),t.push(O.volume,B[h.volume+n.volumeRange/2>>6],B[h.volume+n.volumeRange/2&63]),t.push(O.preset,B[h.preset>>6],B[h.preset&63]),t.push(O.eqFilter),t.push(B[+h.eqFilterType]),h.eqFilterType)t.push(B[h.eqFilterSimpleCut]),t.push(B[h.eqFilterSimplePeak]);else{if(h.eqFilter==null)t.push(B[0]),console.log("Null EQ filter settings detected in toBase64String for channelIndex "+k+", instrumentIndex "+u);else{t.push(B[h.eqFilter.controlPointCount]);for(let y=0;y<h.eqFilter.controlPointCount;y++){const P=h.eqFilter.controlPoints[y];t.push(B[P.type],B[Math.round(P.freq)],B[Math.round(P.gain)])}}let m=0;for(let y=0;y<n.filterMorphCount-1;y++)m|=+(h.eqSubFilters[y+1]!=null)<<y;t.push(B[m>>6],B[m&63]);for(let y=0;y<n.filterMorphCount-1;y++)if(m&1<<y){t.push(B[h.eqSubFilters[y+1].controlPointCount]);for(let P=0;P<h.eqSubFilters[y+1].controlPointCount;P++){const C=h.eqSubFilters[y+1].controlPoints[P];t.push(B[C.type],B[Math.round(C.freq)],B[Math.round(C.gain)])}}}if(t.push(O.effects,B[h.effects>>6],B[h.effects&63]),ot(h.effects))if(t.push(B[+h.noteFilterType]),h.noteFilterType)t.push(B[h.noteFilterSimpleCut]),t.push(B[h.noteFilterSimplePeak]);else{if(h.noteFilter==null)t.push(B[0]),console.log("Null note filter settings detected in toBase64String for channelIndex "+k+", instrumentIndex "+u);else{t.push(B[h.noteFilter.controlPointCount]);for(let y=0;y<h.noteFilter.controlPointCount;y++){const P=h.noteFilter.controlPoints[y];t.push(B[P.type],B[Math.round(P.freq)],B[Math.round(P.gain)])}}let m=0;for(let y=0;y<n.filterMorphCount-1;y++)m|=+(h.noteSubFilters[y+1]!=null)<<y;t.push(B[m>>6],B[m&63]);for(let y=0;y<n.filterMorphCount-1;y++)if(m&1<<y){t.push(B[h.noteSubFilters[y+1].controlPointCount]);for(let P=0;P<h.noteSubFilters[y+1].controlPointCount;P++){const C=h.noteSubFilters[y+1].controlPoints[P];t.push(B[C.type],B[Math.round(C.freq)],B[Math.round(C.gain)])}}}if(gt(h.effects)&&t.push(B[h.transition]),vt(h.effects)&&(t.push(B[h.chord]),h.chord==n.chords.dictionary.arpeggio.index&&(t.push(B[h.arpeggioSpeed]),t.push(B[+h.fastTwoNoteArp]))),bt(h.effects)&&t.push(B[h.pitchShift]),St(h.effects)&&t.push(B[h.detune-n.detuneMin>>6],B[h.detune-n.detuneMin&63]),Ft(h.effects)&&(t.push(B[h.vibrato]),h.vibrato==n.vibratos.length&&(t.push(B[Math.round(h.vibratoDepth*25)]),t.push(B[h.vibratoSpeed]),t.push(B[Math.round(h.vibratoDelay)]),t.push(B[h.vibratoType]))),Ze(h.effects)&&(t.push(B[h.distortion]),t.push(B[+h.aliases])),st(h.effects)&&t.push(B[h.bitcrusherFreq],B[h.bitcrusherQuantization]),Xe(h.effects)&&(t.push(B[h.pan>>6],B[h.pan&63]),t.push(B[h.panDelay])),je(h.effects)&&t.push(B[h.chorus]),_e(h.effects)&&t.push(B[h.echoSustain],B[h.echoDelay]),Le(h.effects)&&t.push(B[h.reverb]),h.type!=T.drumset&&(t.push(O.fadeInOut,B[h.fadeIn],B[h.fadeOut]),t.push(B[+h.clicklessTransition])),h.type==T.harmonics||h.type==T.pickedString){t.push(O.harmonics);const m=new Ge;for(let y=0;y<n.harmonicsControlPoints;y++)m.write(n.harmonicsControlPointBits,h.harmonicsWave.harmonics[y]);m.encodeBase64(t)}if(h.type==T.chip)t.push(O.wave,B[h.chipWave]),t.push(O.unison,B[h.unison]);else if(h.type==T.fm){t.push(O.algorithm,B[h.algorithm]),t.push(O.feedbackType,B[h.feedbackType]),t.push(O.feedbackAmplitude,B[h.feedbackAmplitude]),t.push(O.operatorFrequencies);for(let m=0;m<n.operatorCount;m++)t.push(B[h.operators[m].frequency]);t.push(O.operatorAmplitudes);for(let m=0;m<n.operatorCount;m++)t.push(B[h.operators[m].amplitude]);t.push(O.operatorWaves);for(let m=0;m<n.operatorCount;m++)t.push(B[h.operators[m].waveform]),h.operators[m].waveform==3&&t.push(B[h.operators[m].pulseWidth])}else if(h.type==T.customChipWave){t.push(O.wave,B[h.chipWave]),t.push(O.unison,B[h.unison]),t.push(O.customChipWave);for(let m=0;m<64;m++)t.push(B[h.customChipWave[m]+24])}else if(h.type==T.noise)t.push(O.wave,B[h.chipNoise]);else if(h.type==T.spectrum){t.push(O.spectrum);const m=new Ge;for(let y=0;y<n.spectrumControlPoints;y++)m.write(n.spectrumControlPointBits,h.spectrumWave.spectrum[y]);m.encodeBase64(t)}else if(h.type==T.drumset){t.push(O.drumsetEnvelopes);for(let y=0;y<n.drumCount;y++)t.push(B[h.drumsetEnvelopes[y]]);t.push(O.spectrum);const m=new Ge;for(let y=0;y<n.drumCount;y++)for(let P=0;P<n.spectrumControlPoints;P++)m.write(n.spectrumControlPointBits,h.drumsetSpectrumWaves[y].spectrum[P]);m.encodeBase64(t)}else if(h.type==T.harmonics)t.push(O.unison,B[h.unison]);else if(h.type==T.pwm)t.push(O.pulseWidth,B[h.pulseWidth]);else if(h.type==T.pickedString)t.push(O.unison,B[h.unison]),t.push(O.stringSustain,B[h.stringSustain]);else if(h.type!=T.mod)throw new Error("Unknown instrument type.");t.push(O.envelopes,B[h.envelopeCount]);for(let m=0;m<h.envelopeCount;m++)t.push(B[h.envelopes[m].target]),n.instrumentAutomationTargets[h.envelopes[m].target].maxCount>1&&t.push(B[h.envelopes[m].index]),t.push(B[h.envelopes[m].envelope])}t.push(O.bars),e=new Ge;let c=0;for(;1<<c<this.patternsPerChannel+1;)c++;for(let k=0;k<this.getChannelCount();k++)for(let u=0;u<this.barCount;u++)e.write(c,this.channels[k].bars[u]);e.encodeBase64(t),t.push(O.patterns),e=new Ge;const p=new Ge,d=ve.getNeededBits(n.noteSizeMax);for(let k=0;k<this.getChannelCount();k++){const u=this.channels[k],h=this.getMaxInstrumentsPerPattern(k),m=this.getChannelIsNoise(k),y=this.getChannelIsMod(k),P=ve.getNeededBits(h-n.instrumentCountMin),C=ve.getNeededBits(u.instruments.length-1);if(y){const L=ve.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let z=0;z<u.instruments.length;z++){let E=this.channels[k].instruments[z];for(let l=0;l<n.modCount;l++){const g=E.modChannels[l],F=E.modInstruments[l],M=E.modulators[l],I=E.modFilterTypes[l];let A=n.modulators[M].forSong?2:0;M==n.modulators.dictionary.none.index&&(A=3),e.write(2,A),(A==0||A==1)&&(e.write(8,g),e.write(L,F)),A!=3&&e.write(6,M),(n.modulators[E.modulators[l]].name=="eq filter"||n.modulators[E.modulators[l]].name=="note filter")&&e.write(6,I)}}}const S=m||y?0:u.octave*n.pitchesPerOctave;let v=m?4:S;const D=y?[0,1,2,3,4,5]:m?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],N=[];for(let L=0;L<D.length;L++)D[L]+=S;for(const L of u.patterns){if(this.patternInstruments){const z=Ce(n.instrumentCountMin,h,L.instruments.length);e.write(P,z-n.instrumentCountMin);for(let E=0;E<z;E++)e.write(C,L.instruments[E])}if(L.notes.length>0){e.write(1,1);let z=0;for(const E of L.notes){E.start<z&&y&&(e.write(2,0),e.write(1,1),e.writePartDuration(z-E.start)),E.start>z&&(e.write(2,0),y&&e.write(1,0),e.writePartDuration(E.start-z)),p.clear(),E.pitches.length==1?p.write(1,0):(p.write(1,1),p.write(3,E.pitches.length-2)),p.writePinCount(E.pins.length-1),y?p.write(9,E.pins[0].size):p.write(d,E.pins[0].size);let l=0,g=E.pitches[0],F=g;const M=[];for(let Y=1;Y<E.pins.length;Y++){const Q=E.pins[Y],G=g+Q.interval;F!=G?(p.write(1,1),M.push(G),F=G):p.write(1,0),p.writePartDuration(Q.time-l),l=Q.time,y?p.write(9,Q.size):p.write(d,Q.size)}const I=String.fromCharCode.apply(null,p.encodeBase64([])),A=N.indexOf(I);A==-1?(e.write(2,1),e.concat(p)):(e.write(1,1),e.writeLongTail(0,0,A),N.splice(A,1)),N.unshift(I),N.length>10&&N.pop();const V=E.pitches.concat(M);for(let Y=0;Y<V.length;Y++){const Q=V[Y],G=D.indexOf(Q);if(G==-1){let W=0,ae=v;if(ae<Q)for(;ae!=Q;)ae++,D.indexOf(ae)==-1&&W++;else for(;ae!=Q;)ae--,D.indexOf(ae)==-1&&W--;e.write(1,0),e.writePitchInterval(W)}else e.write(1,1),e.write(4,G),D.splice(G,1);D.unshift(Q),D.length>16&&D.pop(),Y==E.pitches.length-1?v=E.pitches[0]:v=Q}E.start==0&&e.write(1,E.continuesLastPattern?1:0),z=E.end}z<this.beatsPerBar*n.partsPerBeat+ +y&&(e.write(2,0),y&&e.write(1,0),e.writePartDuration(this.beatsPerBar*n.partsPerBeat+ +y-z))}else e.write(1,0)}}let f=e.lengthBase64(),x=[];for(;f>0;)x.unshift(B[f&63]),f=f>>6;t.push(B[x.length]),Array.prototype.push.apply(t,x),e.encodeBase64(t);const s=64e3;if(t.length<s)return String.fromCharCode.apply(null,t);{let k="";for(let u=0;u<t.length;u+=s)k+=String.fromCharCode.apply(null,t.slice(u,u+s));return k}}static _envelopeFromLegacyIndex(e){return e==0?e=1:e==1&&(e=0),n.envelopes[q(0,n.envelopes.length,e)]}fromBase64String(e){if(e==null||e==""){this.initToDefault(!0);return}let t=0;for(;e.charCodeAt(t)<=yt.SPACE;)t++;if(e.charCodeAt(t)==yt.HASH&&t++,e.charCodeAt(t)==yt.LEFT_CURLY_BRACE){this.fromJsonObject(JSON.parse(t==0?e:e.substring(t)));return}const o=e.charCodeAt(t);let i,c;o==106?(i=!1,c=!0,t++):(i=!0,c=!1);const p=w[e.charCodeAt(t++)];if(i&&(p==-1||p>ve._latestBeepboxVersion||p<ve._oldestBeepboxVersion)||c&&(p==-1||p>ve._latestJummBoxVersion||p<ve._oldestJummBoxVersion))return;const d=p<2,f=p<3,x=p<4,s=p<5,k=p<6,u=p<7,h=p<8,m=p<9;this.initToDefault(i&&m||c&&s);const y=i&&m||c&&s;if(f&&i){for(const l of this.channels)l.instruments[0].transition=n.transitions.dictionary.interrupt.index,l.instruments[0].effects|=1<<ce.transition;this.channels[3].instruments[0].chipNoise=0}let P=null;if(i&&m||c&&s){P=[];for(let l=P.length;l<this.getChannelCount();l++){P[l]=[];for(let g=0;g<n.instrumentCountMin;g++)P[l][g]={}}}let C=0,S=0,v=-1,D,N=!1,L=!1;for(;t<e.length;)switch(D=e.charCodeAt(t++)){case O.songTitle:{var z=(w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)];this.title=decodeURIComponent(e.substring(t,t+z)),document.title=this.title+" - "+Pt.versionDisplayName,t+=z}break;case O.channelCount:{this.pitchChannelCount=w[e.charCodeAt(t++)],this.noiseChannelCount=w[e.charCodeAt(t++)],i||d?this.modChannelCount=0:this.modChannelCount=w[e.charCodeAt(t++)],this.pitchChannelCount=Ce(n.pitchChannelCountMin,n.pitchChannelCountMax,this.pitchChannelCount),this.noiseChannelCount=Ce(n.noiseChannelCountMin,n.noiseChannelCountMax,this.noiseChannelCount),this.modChannelCount=Ce(n.modChannelCountMin,n.modChannelCountMax,this.modChannelCount);for(let l=this.channels.length;l<this.getChannelCount();l++)this.channels[l]=new Dt;if(this.channels.length=this.getChannelCount(),i&&m||c&&s)for(let l=P.length;l<this.getChannelCount();l++){P[l]=[];for(let g=0;g<n.instrumentCountMin;g++)P[l][g]={}}}break;case O.scale:this.scale=w[e.charCodeAt(t++)],i&&(this.scale=0);break;case O.key:u&&i?this.key=q(0,n.keys.length,11-w[e.charCodeAt(t++)]):this.key=q(0,n.keys.length,w[e.charCodeAt(t++)]);break;case O.loopStart:s&&i?this.loopStart=w[e.charCodeAt(t++)]:this.loopStart=(w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)];break;case O.loopEnd:s&&i?this.loopLength=w[e.charCodeAt(t++)]:this.loopLength=(w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)]+1;break;case O.tempo:x&&i?this.tempo=[95,120,151,190][w[e.charCodeAt(t++)]]:u&&i?this.tempo=[88,95,103,111,120,130,140,151,163,176,190,206,222,240,259][w[e.charCodeAt(t++)]]:this.tempo=w[e.charCodeAt(t++)]<<6|w[e.charCodeAt(t++)],this.tempo=q(n.tempoMin,n.tempoMax+1,this.tempo);break;case O.reverb:m&&i?(C=w[e.charCodeAt(t++)]*12,C=q(0,n.reverbRange,C)):s&&c&&(C=w[e.charCodeAt(t++)],C=q(0,n.reverbRange,C));break;case O.beatCount:f&&i?this.beatsPerBar=[6,7,8,9,10][w[e.charCodeAt(t++)]]:this.beatsPerBar=w[e.charCodeAt(t++)]+1,this.beatsPerBar=Math.max(n.beatsPerBarMin,Math.min(n.beatsPerBarMax,this.beatsPerBar));break;case O.barCount:{const l=(w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)]+1;this.barCount=Ce(n.barCountMin,n.barCountMax,l);for(let g=0;g<this.getChannelCount();g++){for(let F=this.channels[g].bars.length;F<this.barCount;F++)this.channels[g].bars[F]=F<4?1:0;this.channels[g].bars.length=this.barCount}}break;case O.patternCount:{let l;h&&i?l=w[e.charCodeAt(t++)]+1:l=(w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)]+1,this.patternsPerChannel=Ce(1,n.barCountMax,l);const g=this.getChannelCount();for(let F=0;F<g;F++){const M=this.channels[F].patterns;for(let I=M.length;I<this.patternsPerChannel;I++)M[I]=new it;M.length=this.patternsPerChannel}}break;case O.instrumentCount:if(m&&i||s&&c){const l=Ce(n.instrumentCountMin,n.patternInstrumentCountMax,w[e.charCodeAt(t++)]+n.instrumentCountMin);this.layeredInstruments=!1,this.patternInstruments=l>1;for(let g=0;g<this.getChannelCount();g++){const F=g>=this.pitchChannelCount&&g<this.pitchChannelCount+this.noiseChannelCount,M=g>=this.pitchChannelCount+this.noiseChannelCount;for(let I=this.channels[g].instruments.length;I<l;I++)this.channels[g].instruments[I]=new Re(F,M);if(this.channels[g].instruments.length=l,k&&i)for(let I=0;I<l;I++)this.channels[g].instruments[I].setTypeAndReset(F?T.noise:T.chip,F,M);for(let I=P[g].length;I<l;I++)P[g][I]={}}}else{const l=w[e.charCodeAt(t++)];this.layeredInstruments=(l&2)!=0,this.patternInstruments=(l&1)!=0;for(let g=0;g<this.getChannelCount();g++){let F=1;(this.layeredInstruments||this.patternInstruments)&&(F=Ce(n.instrumentCountMin,this.getMaxInstrumentsPerChannel(),w[e.charCodeAt(t++)]+n.instrumentCountMin));const M=this.channels[g],I=this.getChannelIsNoise(g),A=this.getChannelIsMod(g);for(let V=M.instruments.length;V<F;V++)M.instruments[V]=new Re(I,A);M.instruments.length=F}}break;case O.rhythm:this.rhythm=w[e.charCodeAt(t++)],(c&&f||i)&&((this.rhythm==n.rhythms.dictionary["÷3 (triplets)"].index||this.rhythm==n.rhythms.dictionary["÷6"].index)&&(N=!0),this.rhythm>=n.rhythms.dictionary["÷6"].index&&(L=!0));break;case O.channelOctave:if(f&&i){const l=w[e.charCodeAt(t++)];this.channels[l].octave=q(0,n.pitchOctaves,w[e.charCodeAt(t++)]+1),l>=this.pitchChannelCount&&(this.channels[l].octave=0)}else if(m&&i||s&&c)for(let l=0;l<this.getChannelCount();l++)this.channels[l].octave=q(0,n.pitchOctaves,w[e.charCodeAt(t++)]+1),l>=this.pitchChannelCount&&(this.channels[l].octave=0);else{for(let l=0;l<this.pitchChannelCount;l++)this.channels[l].octave=q(0,n.pitchOctaves,w[e.charCodeAt(t++)]);for(let l=this.pitchChannelCount;l<this.getChannelCount();l++)this.channels[l].octave=0}break;case O.startInstrument:{v++,v>=this.channels[S].instruments.length&&(S++,v=0),Ce(0,this.channels.length-1,S);const l=this.channels[S].instruments[v];let g=Ce(0,T.length-1,w[e.charCodeAt(t++)]);c&&s&&(g==T.pickedString?g=T.customChipWave:g==T.customChipWave&&(g=T.mod)),l.setTypeAndReset(g,S>=this.pitchChannelCount&&S<this.pitchChannelCount+this.noiseChannelCount,S>=this.pitchChannelCount+this.noiseChannelCount),(u&&i||d&&c)&&(g==T.chip||g==T.customChipWave||g==T.pwm)&&(l.aliases=!0,l.distortion=0,l.effects|=1<<ce.distortion),N&&(l.arpeggioSpeed=9),L&&(l.fastTwoNoteArp=!0),u&&i&&(l.effects=0,l.chord!=n.chords.dictionary.simultaneous.index&&(l.effects|=1<<ce.chord))}break;case O.preset:{const l=w[e.charCodeAt(t++)]<<6|w[e.charCodeAt(t++)];this.channels[S].instruments[v].preset=l,c&&s&&this.channels[S].instruments[v].preset==T.pickedString&&(this.channels[S].instruments[v].preset=T.customChipWave)}break;case O.wave:if(f&&i){const l=[1,2,3,4,5,6,7,8,0],g=w[e.charCodeAt(t++)],F=this.channels[g].instruments[0];F.chipWave=q(0,n.chipWaves.length,l[w[e.charCodeAt(t++)]]|0),F.convertLegacySettings(P[g][0],y)}else if(k&&i){const l=[1,2,3,4,5,6,7,8,0];for(let g=0;g<this.getChannelCount();g++)for(const F of this.channels[g].instruments)g>=this.pitchChannelCount?F.chipNoise=q(0,n.chipNoises.length,w[e.charCodeAt(t++)]):F.chipWave=q(0,n.chipWaves.length,l[w[e.charCodeAt(t++)]]|0)}else if(u&&i){const l=[1,2,3,4,5,6,7,8,0];S>=this.pitchChannelCount?this.channels[S].instruments[v].chipNoise=q(0,n.chipNoises.length,w[e.charCodeAt(t++)]):this.channels[S].instruments[v].chipWave=q(0,n.chipWaves.length,l[w[e.charCodeAt(t++)]]|0)}else S>=this.pitchChannelCount?this.channels[S].instruments[v].chipNoise=q(0,n.chipNoises.length,w[e.charCodeAt(t++)]):this.channels[S].instruments[v].chipWave=q(0,n.chipWaves.length,w[e.charCodeAt(t++)]);break;case O.eqFilter:if(m&&i||s&&c)if(u&&i){const l=[10,6,3,0,8,5,2],g=["none","none","none","none","decay 1","decay 2","decay 3"];if(f&&i){const F=w[e.charCodeAt(t++)],M=this.channels[F].instruments[0],I=P[F][0],A=[1,3,4,5][q(0,l.length,w[e.charCodeAt(t++)])];I.filterCutoff=l[A],I.filterResonance=0,I.filterEnvelope=n.envelopes.dictionary[g[A]],M.convertLegacySettings(I,y)}else if(k&&i)for(let F=0;F<this.getChannelCount();F++)for(let M=0;M<this.channels[F].instruments.length;M++){const I=this.channels[F].instruments[M],A=P[F][M],V=q(0,l.length,w[e.charCodeAt(t++)]+1);F<this.pitchChannelCount?(A.filterCutoff=l[V],A.filterResonance=0,A.filterEnvelope=n.envelopes.dictionary[g[V]]):(A.filterCutoff=10,A.filterResonance=0,A.filterEnvelope=n.envelopes.dictionary.none),I.convertLegacySettings(A,y)}else{const F=q(0,l.length,w[e.charCodeAt(t++)]),M=this.channels[S].instruments[v],I=P[S][v];I.filterCutoff=l[F],I.filterResonance=0,I.filterEnvelope=n.envelopes.dictionary[g[F]],M.convertLegacySettings(I,y)}}else{const g=this.channels[S].instruments[v],F=P[S][v];F.filterCutoff=q(0,11,w[e.charCodeAt(t++)]),g.convertLegacySettings(F,y)}else{const l=this.channels[S].instruments[v];let g=w[e.charCodeAt(t++)];if(i||g==0){l.eqFilterType=!1,c&&(g=w[e.charCodeAt(t++)]);const F=g;l.eqFilter.controlPointCount=q(0,n.filterMaxPoints+1,F);for(let M=l.eqFilter.controlPoints.length;M<l.eqFilter.controlPointCount;M++)l.eqFilter.controlPoints[M]=new Fe;for(let M=0;M<l.eqFilter.controlPointCount;M++){const I=l.eqFilter.controlPoints[M];I.type=q(0,Pe.length,w[e.charCodeAt(t++)]),I.freq=q(0,n.filterFreqRange,w[e.charCodeAt(t++)]),I.gain=q(0,n.filterGainRange,w[e.charCodeAt(t++)])}for(let M=l.eqFilter.controlPointCount;M<F;M++)t+=3;if(l.eqSubFilters[0]=l.eqFilter,c&&!s){let M=w[e.charCodeAt(t++)]<<6|w[e.charCodeAt(t++)];for(let I=0;I<n.filterMorphCount-1;I++)if(M&1<<I){const A=w[e.charCodeAt(t++)];l.eqSubFilters[I+1]==null&&(l.eqSubFilters[I+1]=new Me),l.eqSubFilters[I+1].controlPointCount=q(0,n.filterMaxPoints+1,A);for(let V=l.eqSubFilters[I+1].controlPoints.length;V<l.eqSubFilters[I+1].controlPointCount;V++)l.eqSubFilters[I+1].controlPoints[V]=new Fe;for(let V=0;V<l.eqSubFilters[I+1].controlPointCount;V++){const Y=l.eqSubFilters[I+1].controlPoints[V];Y.type=q(0,Pe.length,w[e.charCodeAt(t++)]),Y.freq=q(0,n.filterFreqRange,w[e.charCodeAt(t++)]),Y.gain=q(0,n.filterGainRange,w[e.charCodeAt(t++)])}for(let V=l.eqSubFilters[I+1].controlPointCount;V<A;V++)t+=3}}}else l.eqFilterType=!0,l.eqFilterSimpleCut=q(0,n.filterSimpleCutRange,w[e.charCodeAt(t++)]),l.eqFilterSimplePeak=q(0,n.filterSimplePeakRange,w[e.charCodeAt(t++)])}break;case O.filterResonance:if(m&&i||s&&c){const g=this.channels[S].instruments[v],F=P[S][v];F.filterResonance=q(0,8,w[e.charCodeAt(t++)]),g.convertLegacySettings(F,y)}break;case O.drumsetEnvelopes:{const l=this.channels[S].instruments[v];if(m&&i||s&&c)if(l.type==T.drumset)for(let g=0;g<n.drumCount;g++)l.drumsetEnvelopes[g]=ve._envelopeFromLegacyIndex(w[e.charCodeAt(t++)]).index;else{const g=P[S][v];g.filterEnvelope=ve._envelopeFromLegacyIndex(w[e.charCodeAt(t++)]),l.convertLegacySettings(g,y)}else for(let g=0;g<n.drumCount;g++)l.drumsetEnvelopes[g]=q(0,n.envelopes.length,w[e.charCodeAt(t++)])}break;case O.pulseWidth:{const l=this.channels[S].instruments[v];if(l.pulseWidth=q(0,n.pulseWidthRange+ +c,w[e.charCodeAt(t++)]),i&&(l.pulseWidth=Math.round(Math.pow(.5,(7-l.pulseWidth)*n.pulseWidthStepPower)*n.pulseWidthRange)),m&&i||s&&c){const g=P[S][v];g.pulseEnvelope=ve._envelopeFromLegacyIndex(w[e.charCodeAt(t++)]),l.convertLegacySettings(g,y)}}break;case O.stringSustain:{const l=this.channels[S].instruments[v];l.stringSustain=q(0,n.stringSustainRange,w[e.charCodeAt(t++)])}break;case O.fadeInOut:if(m&&i||s&&c){const l=[{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}];if(f&&i){const g=w[e.charCodeAt(t++)],F=l[q(0,l.length,w[e.charCodeAt(t++)])],M=this.channels[g].instruments[0];M.fadeIn=X.secondsToFadeInSetting(F.fadeInSeconds),M.fadeOut=X.ticksToFadeOutSetting(F.fadeOutTicks),M.transition=n.transitions.dictionary[F.transition].index,M.transition!=n.transitions.dictionary.normal.index&&(M.effects|=1<<ce.transition)}else if(k&&i)for(let g=0;g<this.getChannelCount();g++)for(const F of this.channels[g].instruments){const M=l[q(0,l.length,w[e.charCodeAt(t++)])];F.fadeIn=X.secondsToFadeInSetting(M.fadeInSeconds),F.fadeOut=X.ticksToFadeOutSetting(M.fadeOutTicks),F.transition=n.transitions.dictionary[M.transition].index,F.transition!=n.transitions.dictionary.normal.index&&(F.effects|=1<<ce.transition)}else if(x||i){const g=l[q(0,l.length,w[e.charCodeAt(t++)])],F=this.channels[S].instruments[v];F.fadeIn=X.secondsToFadeInSetting(g.fadeInSeconds),F.fadeOut=X.ticksToFadeOutSetting(g.fadeOutTicks),F.transition=n.transitions.dictionary[g.transition].index,F.transition!=n.transitions.dictionary.normal.index&&(F.effects|=1<<ce.transition)}else{const g=l[q(0,l.length,w[e.charCodeAt(t++)])],F=this.channels[S].instruments[v];F.fadeIn=X.secondsToFadeInSetting(g.fadeInSeconds),F.fadeOut=X.ticksToFadeOutSetting(g.fadeOutTicks),F.transition=n.transitions.dictionary[g.transition].index,w[e.charCodeAt(t++)]>0&&(F.legacyTieOver=!0),F.clicklessTransition=!!w[e.charCodeAt(t++)],(F.transition!=n.transitions.dictionary.normal.index||F.clicklessTransition)&&(F.effects|=1<<ce.transition)}}else{const l=this.channels[S].instruments[v];l.fadeIn=q(0,n.fadeInRange,w[e.charCodeAt(t++)]),l.fadeOut=q(0,n.fadeOutTicks.length,w[e.charCodeAt(t++)]),c&&(l.clicklessTransition=!!w[e.charCodeAt(t++)])}break;case O.vibrato:if(m&&i||s&&c)if(u&&i)if(f&&i){const l=[0,3,2,0],g=["none","none","none","tremolo2"],F=w[e.charCodeAt(t++)],M=q(0,l.length,w[e.charCodeAt(t++)]),I=this.channels[F].instruments[0],A=P[F][0];I.vibrato=l[M],(A.filterEnvelope==null||A.filterEnvelope.type==fe.none)&&(A.filterEnvelope=n.envelopes.dictionary[g[M]],I.convertLegacySettings(A,y)),I.vibrato!=n.vibratos.dictionary.none.index&&(I.effects|=1<<ce.vibrato)}else if(k&&i){const l=[0,1,2,3,0,0],g=["none","none","none","none","tremolo5","tremolo2"];for(let F=0;F<this.getChannelCount();F++)for(let M=0;M<this.channels[F].instruments.length;M++){const I=q(0,l.length,w[e.charCodeAt(t++)]),A=this.channels[F].instruments[M],V=P[F][M];A.vibrato=l[I],(V.filterEnvelope==null||V.filterEnvelope.type==fe.none)&&(V.filterEnvelope=n.envelopes.dictionary[g[I]],A.convertLegacySettings(V,y)),A.vibrato!=n.vibratos.dictionary.none.index&&(A.effects|=1<<ce.vibrato),(C!=0||c&&s)&&!this.getChannelIsNoise(F)&&(A.effects|=1<<ce.reverb,A.reverb=C)}}else{const l=[0,1,2,3,0,0],g=["none","none","none","none","tremolo5","tremolo2"],F=q(0,l.length,w[e.charCodeAt(t++)]),M=this.channels[S].instruments[v],I=P[S][v];M.vibrato=l[F],(I.filterEnvelope==null||I.filterEnvelope.type==fe.none)&&(I.filterEnvelope=n.envelopes.dictionary[g[F]],M.convertLegacySettings(I,y)),M.vibrato!=n.vibratos.dictionary.none.index&&(M.effects|=1<<ce.vibrato),(C!=0||c&&s)&&(M.effects|=1<<ce.reverb,M.reverb=C)}else{const l=this.channels[S].instruments[v],g=q(0,n.vibratos.length+1,w[e.charCodeAt(t++)]);l.vibrato=g,l.vibrato!=n.vibratos.dictionary.none.index&&(l.effects|=1<<ce.vibrato),g==n.vibratos.length?(l.vibratoDepth=q(0,n.modulators.dictionary["vibrato depth"].maxRawVol+1,w[e.charCodeAt(t++)])/50,l.vibratoSpeed=q(0,n.modulators.dictionary["vibrato speed"].maxRawVol+1,w[e.charCodeAt(t++)]),l.vibratoDelay=q(0,n.modulators.dictionary["vibrato delay"].maxRawVol+1,w[e.charCodeAt(t++)])/2,l.vibratoType=q(0,n.vibratoTypes.length,w[e.charCodeAt(t++)]),l.effects|=1<<ce.vibrato):(l.vibratoDepth=n.vibratos[l.vibrato].amplitude,l.vibratoSpeed=10,l.vibratoDelay=n.vibratos[l.vibrato].delayTicks/2,l.vibratoType=n.vibratos[l.vibrato].type)}break;case O.arpeggioSpeed:if(c&&s){const l=this.channels[S].instruments[v];l.arpeggioSpeed=q(0,n.modulators.dictionary["arp speed"].maxRawVol+1,w[e.charCodeAt(t++)]),l.fastTwoNoteArp=!!w[e.charCodeAt(t++)]}break;case O.unison:if(f&&i){const l=w[e.charCodeAt(t++)];this.channels[l].instruments[0].unison=q(0,n.unisons.length,w[e.charCodeAt(t++)])}else if(k&&i)for(let l=0;l<this.getChannelCount();l++)for(const g of this.channels[l].instruments){const F=w[e.charCodeAt(t++)];let M=q(0,n.unisons.length,F);F==8&&(M=2,g.chord=3),g.unison=M}else if(u&&i){const l=w[e.charCodeAt(t++)];let g=q(0,n.unisons.length,l);l==8&&(g=2,this.channels[S].instruments[v].chord=3),this.channels[S].instruments[v].unison=g}else this.channels[S].instruments[v].unison=q(0,n.unisons.length,w[e.charCodeAt(t++)]);break;case O.chord:if(m&&i||s&&c){const l=this.channels[S].instruments[v];l.chord=q(0,n.chords.length,w[e.charCodeAt(t++)]),l.chord!=n.chords.dictionary.simultaneous.index&&(l.effects|=1<<ce.chord)}break;case O.effects:{const l=this.channels[S].instruments[v];if(m&&i||s&&c){l.effects=w[e.charCodeAt(t++)]&(1<<ce.length)-1,C==0&&!(c&&s)?l.effects&=~(1<<ce.reverb):Le(l.effects)&&(l.reverb=C),l.effects|=1<<ce.panning,l.vibrato!=n.vibratos.dictionary.none.index&&(l.effects|=1<<ce.vibrato),l.detune!=n.detuneCenter&&(l.effects|=1<<ce.detune),l.aliases?l.effects|=1<<ce.distortion:l.effects&=~(1<<ce.distortion);const g=P[S][v];l.convertLegacySettings(g,y)}else{if(ce.length>12)throw new Error;if(l.effects=w[e.charCodeAt(t++)]<<6|w[e.charCodeAt(t++)],ot(l.effects)){let g=w[e.charCodeAt(t++)];if(i||g==0){l.noteFilterType=!1,c&&(g=w[e.charCodeAt(t++)]),l.noteFilter.controlPointCount=q(0,n.filterMaxPoints+1,g);for(let F=l.noteFilter.controlPoints.length;F<l.noteFilter.controlPointCount;F++)l.noteFilter.controlPoints[F]=new Fe;for(let F=0;F<l.noteFilter.controlPointCount;F++){const M=l.noteFilter.controlPoints[F];M.type=q(0,Pe.length,w[e.charCodeAt(t++)]),M.freq=q(0,n.filterFreqRange,w[e.charCodeAt(t++)]),M.gain=q(0,n.filterGainRange,w[e.charCodeAt(t++)])}for(let F=l.noteFilter.controlPointCount;F<g;F++)t+=3;if(l.noteSubFilters[0]=l.noteFilter,c&&!s){let F=w[e.charCodeAt(t++)]<<6|w[e.charCodeAt(t++)];for(let M=0;M<n.filterMorphCount-1;M++)if(F&1<<M){const I=w[e.charCodeAt(t++)];l.noteSubFilters[M+1]==null&&(l.noteSubFilters[M+1]=new Me),l.noteSubFilters[M+1].controlPointCount=q(0,n.filterMaxPoints+1,I);for(let A=l.noteSubFilters[M+1].controlPoints.length;A<l.noteSubFilters[M+1].controlPointCount;A++)l.noteSubFilters[M+1].controlPoints[A]=new Fe;for(let A=0;A<l.noteSubFilters[M+1].controlPointCount;A++){const V=l.noteSubFilters[M+1].controlPoints[A];V.type=q(0,Pe.length,w[e.charCodeAt(t++)]),V.freq=q(0,n.filterFreqRange,w[e.charCodeAt(t++)]),V.gain=q(0,n.filterGainRange,w[e.charCodeAt(t++)])}for(let A=l.noteSubFilters[M+1].controlPointCount;A<I;A++)t+=3}}}else l.noteFilterType=!0,l.noteFilter.reset(),l.noteFilterSimpleCut=q(0,n.filterSimpleCutRange,w[e.charCodeAt(t++)]),l.noteFilterSimplePeak=q(0,n.filterSimplePeakRange,w[e.charCodeAt(t++)])}gt(l.effects)&&(l.transition=q(0,n.transitions.length,w[e.charCodeAt(t++)])),vt(l.effects)&&(l.chord=q(0,n.chords.length,w[e.charCodeAt(t++)]),l.chord==n.chords.dictionary.arpeggio.index&&c&&(l.arpeggioSpeed=w[e.charCodeAt(t++)],l.fastTwoNoteArp=!!w[e.charCodeAt(t++)])),bt(l.effects)&&(l.pitchShift=q(0,n.pitchShiftRange,w[e.charCodeAt(t++)])),St(l.effects)&&(i?(l.detune=q(n.detuneMin,n.detuneMax+1,w[e.charCodeAt(t++)]),l.detune=Math.round((l.detune-9)*(Math.abs(l.detune-9)+1)/2+n.detuneCenter)):l.detune=q(n.detuneMin,n.detuneMax+1,(w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)])),Ft(l.effects)&&(l.vibrato=q(0,n.vibratos.length+1,w[e.charCodeAt(t++)]),l.vibrato==n.vibratos.length&&c?(l.vibratoDepth=q(0,n.modulators.dictionary["vibrato depth"].maxRawVol+1,w[e.charCodeAt(t++)])/25,l.vibratoSpeed=q(0,n.modulators.dictionary["vibrato speed"].maxRawVol+1,w[e.charCodeAt(t++)]),l.vibratoDelay=q(0,n.modulators.dictionary["vibrato delay"].maxRawVol+1,w[e.charCodeAt(t++)]),l.vibratoType=q(0,n.vibratoTypes.length,w[e.charCodeAt(t++)])):(l.vibratoDepth=n.vibratos[l.vibrato].amplitude,l.vibratoSpeed=10,l.vibratoDelay=n.vibratos[l.vibrato].delayTicks/2,l.vibratoType=n.vibratos[l.vibrato].type)),Ze(l.effects)&&(l.distortion=q(0,n.distortionRange,w[e.charCodeAt(t++)]),c&&!s&&(l.aliases=!!w[e.charCodeAt(t++)])),st(l.effects)&&(l.bitcrusherFreq=q(0,n.bitcrusherFreqRange,w[e.charCodeAt(t++)]),l.bitcrusherQuantization=q(0,n.bitcrusherQuantizationRange,w[e.charCodeAt(t++)])),Xe(l.effects)&&(i?l.pan=q(0,n.panMax+1,Math.round(w[e.charCodeAt(t++)]*(n.panMax/8))):l.pan=q(0,n.panMax+1,(w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)]),c&&!d&&(l.panDelay=w[e.charCodeAt(t++)])),je(l.effects)&&(i?l.chorus=q(0,n.chorusRange/2+1,w[e.charCodeAt(t++)])*2:l.chorus=q(0,n.chorusRange,w[e.charCodeAt(t++)])),_e(l.effects)&&(l.echoSustain=q(0,n.echoSustainRange,w[e.charCodeAt(t++)]),l.echoDelay=q(0,n.echoDelayRange,w[e.charCodeAt(t++)])),Le(l.effects)&&(i?l.reverb=q(0,n.reverbRange,Math.round(w[e.charCodeAt(t++)]*n.reverbRange/3)):l.reverb=q(0,n.reverbRange,w[e.charCodeAt(t++)]))}l.effects&=(1<<ce.length)-1}break;case O.volume:if(f&&i){const l=w[e.charCodeAt(t++)],g=this.channels[l].instruments[0];g.volume=Math.round(q(-n.volumeRange/2,1,-w[e.charCodeAt(t++)]*5))}else if(k&&i)for(let l=0;l<this.getChannelCount();l++)for(const g of this.channels[l].instruments)g.volume=Math.round(q(-n.volumeRange/2,1,-w[e.charCodeAt(t++)]*5));else if(u&&i){const l=this.channels[S].instruments[v];l.volume=Math.round(q(-n.volumeRange/2,1,-w[e.charCodeAt(t++)]*5))}else if(i){const l=this.channels[S].instruments[v];l.volume=Math.round(q(-n.volumeRange/2,1,-w[e.charCodeAt(t++)]*25/7))}else{const l=this.channels[S].instruments[v];l.volume=Math.round(q(-n.volumeRange/2,n.volumeRange/2+1,(w[e.charCodeAt(t++)]<<6|w[e.charCodeAt(t++)])-n.volumeRange/2))}break;case O.pan:if(m&&i){const l=this.channels[S].instruments[v];l.pan=q(0,n.panMax+1,w[e.charCodeAt(t++)]*(n.panMax/8))}else if(s&&c){const l=this.channels[S].instruments[v];l.pan=q(0,n.panMax+1,(w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)]),c&&!f&&(l.panDelay=w[e.charCodeAt(t++)])}break;case O.detune:{const l=this.channels[S].instruments[v];c&&s&&(l.detune=q(n.detuneMin,n.detuneMax+1,((w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)])*4),l.effects|=1<<ce.detune)}break;case O.customChipWave:{let l=this.channels[S].instruments[v];for(let A=0;A<64;A++)l.customChipWave[A]=q(-24,25,w[e.charCodeAt(t++)]-24);let g=0;for(let A=0;A<l.customChipWave.length;A++)g+=l.customChipWave[A];const F=g/l.customChipWave.length;let M=0,I=0;for(let A=0;A<l.customChipWave.length;A++)M+=I,I=l.customChipWave[A]-F,l.customChipWaveIntegral[A]=M;l.customChipWaveIntegral[64]=0}break;case O.limiterSettings:{let l=w[e.charCodeAt(t++)];l==63?this.restoreLimiterDefaults():(this.compressionRatio=l<10?l/10:1+(l-10)/60,l=w[e.charCodeAt(t++)],this.limitRatio=l<10?l/10:l-9,this.limitDecay=w[e.charCodeAt(t++)],this.limitRise=w[e.charCodeAt(t++)]*250+2e3,this.compressionThreshold=w[e.charCodeAt(t++)]/20,this.limitThreshold=w[e.charCodeAt(t++)]/20,this.masterGain=((w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)])/50)}break;case O.channelNames:for(let l=0;l<this.getChannelCount();l++){var E;x?E=w[e.charCodeAt(t++)]:E=(w[e.charCodeAt(t++)]<<6)+w[e.charCodeAt(t++)],this.channels[l].name=decodeURIComponent(e.substring(t,t+E)),t+=E}break;case O.algorithm:{const l=this.channels[S].instruments[v];if(l.algorithm=q(0,n.algorithms.length,w[e.charCodeAt(t++)]),m&&i||s&&c){const g=P[S][v];l.convertLegacySettings(g,y)}}break;case O.feedbackType:this.channels[S].instruments[v].feedbackType=q(0,n.feedbacks.length,w[e.charCodeAt(t++)]);break;case O.feedbackAmplitude:this.channels[S].instruments[v].feedbackAmplitude=q(0,n.operatorAmplitudeMax+1,w[e.charCodeAt(t++)]);break;case O.feedbackEnvelope:if(m&&i||s&&c){const l=this.channels[S].instruments[v],g=P[S][v];g.feedbackEnvelope=ve._envelopeFromLegacyIndex(w[e.charCodeAt(t++)]),l.convertLegacySettings(g,y)}break;case O.operatorFrequencies:for(let l=0;l<n.operatorCount;l++)this.channels[S].instruments[v].operators[l].frequency=q(0,n.operatorFrequencies.length,w[e.charCodeAt(t++)]);break;case O.operatorAmplitudes:for(let l=0;l<n.operatorCount;l++)this.channels[S].instruments[v].operators[l].amplitude=q(0,n.operatorAmplitudeMax+1,w[e.charCodeAt(t++)]);break;case O.envelopes:{const l=this.channels[S].instruments[v];if(m&&i||s&&c){const g=P[S][v];g.operatorEnvelopes=[];for(let F=0;F<n.operatorCount;F++)g.operatorEnvelopes[F]=ve._envelopeFromLegacyIndex(w[e.charCodeAt(t++)]);l.convertLegacySettings(g,y)}else{const g=q(0,n.maxEnvelopeCount+1,w[e.charCodeAt(t++)]);for(let F=0;F<g;F++){const M=q(0,n.instrumentAutomationTargets.length,w[e.charCodeAt(t++)]);let I=0;const A=n.instrumentAutomationTargets[M].maxCount;A>1&&(I=q(0,A,w[e.charCodeAt(t++)]));const V=q(0,n.envelopes.length,w[e.charCodeAt(t++)]);l.addEnvelope(M,I,V)}}}break;case O.operatorWaves:{const l=this.channels[S].instruments[v];for(let g=0;g<n.operatorCount;g++)l.operators[g].waveform=q(0,n.operatorWaves.length,w[e.charCodeAt(t++)]),l.operators[g].waveform==3&&(l.operators[g].pulseWidth=q(0,n.pwmOperatorWaves.length,w[e.charCodeAt(t++)]))}break;case O.spectrum:{const l=this.channels[S].instruments[v];if(l.type==T.spectrum){const g=Math.ceil(n.spectrumControlPoints*n.spectrumControlPointBits/6),F=new ze(e,t,t+g);for(let M=0;M<n.spectrumControlPoints;M++)l.spectrumWave.spectrum[M]=F.read(n.spectrumControlPointBits);l.spectrumWave.markCustomWaveDirty(),t+=g}else if(l.type==T.drumset){const g=Math.ceil(n.drumCount*n.spectrumControlPoints*n.spectrumControlPointBits/6),F=new ze(e,t,t+g);for(let M=0;M<n.drumCount;M++){for(let I=0;I<n.spectrumControlPoints;I++)l.drumsetSpectrumWaves[M].spectrum[I]=F.read(n.spectrumControlPointBits);l.drumsetSpectrumWaves[M].markCustomWaveDirty()}t+=g}else throw new Error("Unhandled instrument type for spectrum song tag code.")}break;case O.harmonics:{const l=this.channels[S].instruments[v],g=Math.ceil(n.harmonicsControlPoints*n.harmonicsControlPointBits/6),F=new ze(e,t,t+g);for(let M=0;M<n.harmonicsControlPoints;M++)l.harmonicsWave.harmonics[M]=F.read(n.harmonicsControlPointBits);l.harmonicsWave.markCustomWaveDirty(),t+=g}break;case O.aliases:if(c&&s){const l=this.channels[S].instruments[v];l.aliases=!!w[e.charCodeAt(t++)],l.aliases&&(l.distortion=0,l.effects|=1<<ce.distortion)}break;case O.bars:{let l;if(f&&i){const g=w[e.charCodeAt(t++)],F=w[e.charCodeAt(t++)];l=Math.ceil(F*.5);const M=new ze(e,t,t+l);for(let I=0;I<F;I++)this.channels[g].bars[I]=M.read(3)+1}else if(s&&i){let g=0;for(;1<<g<this.patternsPerChannel;)g++;l=Math.ceil(this.getChannelCount()*this.barCount*g/6);const F=new ze(e,t,t+l);for(let M=0;M<this.getChannelCount();M++)for(let I=0;I<this.barCount;I++)this.channels[M].bars[I]=F.read(g)+1}else{let g=0;for(;1<<g<this.patternsPerChannel+1;)g++;l=Math.ceil(this.getChannelCount()*this.barCount*g/6);const F=new ze(e,t,t+l);for(let M=0;M<this.getChannelCount();M++)for(let I=0;I<this.barCount;I++)this.channels[M].bars[I]=F.read(g)}t+=l}break;case O.patterns:{let l=0,g,F=!(x&&c||i),M=F?4:3,I=F?16:8;if(f&&i)g=w[e.charCodeAt(t++)],t++,l=w[e.charCodeAt(t++)],l=l<<6,l+=w[e.charCodeAt(t++)];else{g=0;let W=Ce(1,4,w[e.charCodeAt(t++)]);for(;W>0;)l=l<<6,l+=w[e.charCodeAt(t++)],W--}const A=new ze(e,t,t+l);t+=l;const V=ve.getNeededBits(n.noteSizeMax);let Y=-1,Q=-1,G=-1;for(;;){const W=this.channels[g],ae=this.getChannelIsNoise(g),$=this.getChannelIsMod(g),pe=this.getMaxInstrumentsPerPattern(g),J=ve.getNeededBits(pe-n.instrumentCountMin),ee=ve.getNeededBits(W.instruments.length-1);if($){const Z=s?ee:ve.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let re=0;re<W.instruments.length;re++){let _=W.instruments[re];for(let K=0;K<n.modCount;K++){let ue=A.read(2);switch(ue){case 0:_.modChannels[K]=q(0,this.pitchChannelCount+this.noiseChannelCount+1,A.read(8)),_.modInstruments[K]=q(0,this.channels[_.modChannels[K]].instruments.length+2,A.read(Z));break;case 1:_.modChannels[K]=this.pitchChannelCount+q(0,this.noiseChannelCount+1,A.read(8)),_.modInstruments[K]=q(0,this.channels[_.modChannels[K]].instruments.length+2,A.read(ee));break;case 2:_.modChannels[K]=-1;break;case 3:_.modChannels[K]=-2;break}if(ue!=3&&(_.modulators[K]=A.read(6)),!s&&(n.modulators[_.modulators[K]].name=="eq filter"||n.modulators[_.modulators[K]].name=="note filter")&&(_.modFilterTypes[K]=A.read(6)),s&&_.modChannels[K]>=0){let me=ot(this.channels[_.modChannels[K]].instruments[_.modInstruments[K]].effects);_.modulators[K]==7?(me?_.modulators[K]=n.modulators.dictionary["note filt cut"].index:_.modulators[K]=n.modulators.dictionary["eq filt cut"].index,_.modFilterTypes[K]=1):_.modulators[K]==8&&(me?_.modulators[K]=n.modulators.dictionary["note filt peak"].index:_.modulators[K]=n.modulators.dictionary["eq filt peak"].index,_.modFilterTypes[K]=2)}else s&&_.modulators[K]==n.modulators.dictionary["song reverb"].index&&(Y=g,Q=re,G=K);s&&n.modulators[_.modulators[K]].associatedEffect!=ce.length&&(this.channels[_.modChannels[K]].instruments[_.modInstruments[K]].effects|=1<<n.modulators[_.modulators[K]].associatedEffect)}}}const le=[];for(let Z=0;Z<W.instruments.length;Z++){le[Z]=[];for(let re=0;re<n.modCount;re++)le[Z][n.modCount-1-re]=1+3*+(s&&c&&$&&W.instruments[Z].modulators[re]==n.modulators.dictionary.detune.index)}const xe=ae||$?0:W.octave*12;let H=ae||$?4:xe;const j=$?[0,1,2,3,4,5]:ae?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],ne=[];for(let Z=0;Z<j.length;Z++)j[Z]+=xe;for(let Z=0;Z<this.patternsPerChannel;Z++){const re=W.patterns[Z];if(m&&i||s&&c)re.instruments[0]=Ce(0,W.instruments.length-1,A.read(ee)),re.instruments.length=1;else if(this.patternInstruments){const me=Ce(n.instrumentCountMin,pe,A.read(J)+n.instrumentCountMin);for(let Se=0;Se<me;Se++)re.instruments[Se]=Ce(0,W.instruments.length-1+ +$*2,A.read(ee));re.instruments.length=me}else re.instruments[0]=0,re.instruments.length=n.instrumentCountMin;if(!(i&&f)&&A.read(1)==0){re.notes.length=0;continue}let _=0;const K=re.notes;let ue=0;for(;_<this.beatsPerBar*n.partsPerBeat+ +$;){const me=A.read(1)==1;let Se=!1,se=0;if(me?se=Ce(0,ne.length-1,A.readLongTail(0,0)):Se=A.read(1)==1,!me&&!Se)if($){const te=A.read(1)==1,oe=A.readPartDuration();te?_-=oe:_+=oe}else{const te=u&&i?A.readLegacyPartDuration()*n.partsPerBeat/n.rhythms[this.rhythm].stepsPerBeat:A.readPartDuration();_+=te}else{let te;if(me)te=ne[se],ne.splice(se,1);else{if(te={},F)A.read(1)==1?te.pitchCount=A.read(3)+2:te.pitchCount=1;else for(te.pitchCount=1;te.pitchCount<4&&A.read(1)==1;)te.pitchCount++;te.pinCount=A.readPinCount(),i?te.initialSize=A.read(2)*2:$?te.initialSize=A.read(9):te.initialSize=A.read(V),te.pins=[],te.length=0,te.bendCount=0;for(let be=0;be<te.pinCount;be++){let ge={};ge.pitchBend=A.read(1)==1,ge.pitchBend&&te.bendCount++,te.length+=u&&i?A.readLegacyPartDuration()*n.partsPerBeat/n.rhythms[this.rhythm].stepsPerBeat:A.readPartDuration(),ge.time=te.length,i?ge.size=A.read(2)*2:$?ge.size=A.read(9):ge.size=A.read(V),te.pins.push(ge)}}ne.unshift(te),ne.length>10&&ne.pop();let oe;K.length<=ue?(oe=new Ke(0,_,_+te.length,te.initialSize),K[ue++]=oe):(oe=K[ue++],oe.start=_,oe.end=_+te.length,oe.pins[0].size=te.initialSize);let ie,ye=0;const De=[];for(let be=0;be<te.pitchCount+te.bendCount;be++){if(A.read(1)==1){const Ae=Ce(0,j.length-1,A.read(M));ie=j[Ae],j.splice(Ae,1)}else{const Ae=A.readPitchInterval();ie=H;let Ee=Ae;for(;Ee>0;){for(ie++;j.indexOf(ie)!=-1;)ie++;Ee--}for(;Ee<0;){for(ie--;j.indexOf(ie)!=-1;)ie--;Ee++}}j.unshift(ie),j.length>I&&j.pop(),be<te.pitchCount?oe.pitches[ye++]=ie:De.push(ie),be==te.pitchCount-1?H=oe.pitches[0]:H=ie}oe.pitches.length=ye,De.unshift(oe.pitches[0]),$&&(oe.pins[0].size*=le[re.instruments[0]][oe.pitches[0]]);let we=1;for(const be of te.pins){be.pitchBend&&De.shift();const ge=De[0]-oe.pitches[0];if(oe.pins.length<=we)$?oe.pins[we++]=Ye(ge,be.time,be.size*le[re.instruments[0]][oe.pitches[0]]):oe.pins[we++]=Ye(ge,be.time,be.size);else{const Ae=oe.pins[we++];Ae.interval=ge,Ae.time=be.time,$?Ae.size=be.size*le[re.instruments[0]][oe.pitches[0]]:Ae.size=be.size}}oe.pins.length=we,oe.start==0&&(m&&i||s&&c?x||i?oe.continuesLastPattern=!1:oe.continuesLastPattern=W.instruments[re.instruments[0]].legacyTieOver:oe.continuesLastPattern=A.read(1)==1),_=Ce(0,this.beatsPerBar*n.partsPerBeat,oe.end)}}K.length=ue}if(f&&i)break;if(g++,g>=this.getChannelCount())break}if(c&&s&&G>=0)for(let W=0;W<this.channels.length;W++)for(let ae=0;ae<this.channels[W].instruments.length;ae++){const $=this.channels[W].instruments[ae];if(Le($.effects)&&($.reverb=n.reverbRange-1),Y==W&&Q==ae){const pe=this.channels[W].bars[0];if(pe>0){const J=this.channels[W].patterns[pe-1];let ee=6;for(const le of J.notes)le.pitches[0]==n.modCount-1-G&&(ee=Math.min(ee,le.start));ee>0&&J.notes.push(new Ke(n.modCount-1-G,0,ee,C))}else if(this.channels[W].patterns.length<n.barCountMax){const J=new it;if(this.channels[W].patterns.push(J),this.channels[W].bars[0]=this.channels[W].patterns.length,this.channels[W].patterns.length>this.patternsPerChannel){for(let ee=0;ee<this.channels.length;ee++)this.channels[ee].patterns.length<=this.patternsPerChannel&&this.channels[ee].patterns.push(new it);this.patternsPerChannel++}J.instruments.length=1,J.instruments[0]=Q,J.notes.length=0,J.notes.push(new Ke(n.modCount-1-G,0,6,C))}}}}break;default:throw new Error("Unrecognized song tag code "+String.fromCharCode(D)+" at index "+(t-1))}}toJsonObject(e=!0,t=1,o=!0){const i=[];for(let c=0;c<this.getChannelCount();c++){const p=this.channels[c],d=[],f=this.getChannelIsNoise(c),x=this.getChannelIsMod(c);for(const h of p.instruments)d.push(h.toJsonObject());const s=[];for(const h of p.patterns)s.push(h.toJsonObject(this,p,x));const k=[];if(e)for(let h=0;h<this.loopStart;h++)k.push(p.bars[h]);for(let h=0;h<t;h++)for(let m=this.loopStart;m<this.loopStart+this.loopLength;m++)k.push(p.bars[m]);if(o)for(let h=this.loopStart+this.loopLength;h<this.barCount;h++)k.push(p.bars[h]);const u={type:x?"mod":f?"drum":"pitch",name:p.name,instruments:d,patterns:s,sequence:k};f||(u.octaveScrollBar=p.octave-1),i.push(u)}return{name:this.title,format:ve._format,version:ve._latestJummBoxVersion,scale:n.scales[this.scale].name,key:n.keys[this.key].name,introBars:this.loopStart,loopBars:this.loopLength,beatsPerBar:this.beatsPerBar,ticksPerBeat:n.rhythms[this.rhythm].stepsPerBeat,beatsPerMinute:this.tempo,reverb:this.reverb,masterGain:this.masterGain,compressionThreshold:this.compressionThreshold,limitThreshold:this.limitThreshold,limitDecay:this.limitDecay,limitRise:this.limitRise,limitRatio:this.limitRatio,compressionRatio:this.compressionRatio,layeredInstruments:this.layeredInstruments,patternInstruments:this.patternInstruments,channels:i}}fromJsonObject(e){if(this.initToDefault(!0),!e)return;if(e.name!=null&&(this.title=e.name),this.scale=0,e.scale!=null){const s={"romani :)":"dbl harmonic :)","romani :(":"dbl harmonic :(",enigma:"strange"},k=s[e.scale]!=null?s[e.scale]:e.scale,u=n.scales.findIndex(h=>h.name==k);u!=-1&&(this.scale=u)}if(e.key!=null){if(typeof e.key=="number")this.key=(e.key+1200>>>0)%n.keys.length;else if(typeof e.key=="string"){const s=e.key,k=s.charAt(0).toUpperCase(),u=s.charAt(1).toLowerCase(),h={C:0,D:2,E:4,F:5,G:7,A:9,B:11},m={"#":1,"♯":1,b:-1,"♭":-1};let y=h[k];const P=m[u];y!=null&&(P!=null&&(y+=P),y<0&&(y+=12),y=y%12,this.key=y)}}e.beatsPerMinute!=null&&(this.tempo=q(n.tempoMin,n.tempoMax+1,e.beatsPerMinute|0));let t=0;e.reverb!=null&&(t=q(0,32,e.reverb|0)),e.beatsPerBar!=null&&(this.beatsPerBar=Math.max(n.beatsPerBarMin,Math.min(n.beatsPerBarMax,e.beatsPerBar|0)));let o=4;e.ticksPerBeat!=null&&(o=e.ticksPerBeat|0||4,this.rhythm=n.rhythms.findIndex(s=>s.stepsPerBeat==o),this.rhythm==-1&&(this.rhythm=1)),e.masterGain!=null?this.masterGain=Math.max(0,Math.min(5,e.masterGain||0)):this.masterGain=1,e.limitThreshold!=null?this.limitThreshold=Math.max(0,Math.min(2,e.limitThreshold||0)):this.limitThreshold=1,e.compressionThreshold!=null?this.compressionThreshold=Math.max(0,Math.min(1.1,e.compressionThreshold||0)):this.compressionThreshold=1,e.limitRise!=null?this.limitRise=Math.max(2e3,Math.min(1e4,e.limitRise||0)):this.limitRise=4e3,e.limitDecay!=null?this.limitDecay=Math.max(1,Math.min(30,e.limitDecay||0)):this.limitDecay=4,e.limitRatio!=null?this.limitRatio=Math.max(0,Math.min(11,e.limitRatio||0)):this.limitRatio=1,e.compressionRatio!=null?this.compressionRatio=Math.max(0,Math.min(1.168,e.compressionRatio||0)):this.compressionRatio=1;let i=1,c=1,p=1;if(e.channels!=null)for(const s of e.channels)s.instruments&&(i=Math.max(i,s.instruments.length|0)),s.patterns&&(c=Math.max(c,s.patterns.length|0)),s.sequence&&(p=Math.max(p,s.sequence.length|0));e.layeredInstruments!=null?this.layeredInstruments=!!e.layeredInstruments:this.layeredInstruments=!1,e.patternInstruments!=null?this.patternInstruments=!!e.patternInstruments:this.patternInstruments=i>1,this.patternsPerChannel=Math.min(c,n.barCountMax),this.barCount=Math.min(p,n.barCountMax),e.introBars!=null&&(this.loopStart=q(0,this.barCount,e.introBars|0)),e.loopBars!=null&&(this.loopLength=q(1,this.barCount-this.loopStart+1,e.loopBars|0));const d=[],f=[],x=[];if(e.channels!=null)for(let s=0;s<e.channels.length;s++){let k=e.channels[s];const u=new Dt;let h=!1,m=!1;if(k.type!=null?(h=k.type=="drum",m=k.type=="mod"):h=s>=3,h?f.push(u):m?x.push(u):d.push(u),k.octaveScrollBar!=null&&(u.octave=q(0,n.pitchOctaves,(k.octaveScrollBar|0)+1),h&&(u.octave=0)),k.name!=null?u.name=k.name:u.name="",Array.isArray(k.instruments)){const y=k.instruments;for(let P=0;P<y.length&&!(P>=this.getMaxInstrumentsPerChannel());P++){const C=new Re(h,m);u.instruments[P]=C,C.fromJsonObject(y[P],h,m,!1,!1,t)}}for(let y=0;y<this.patternsPerChannel;y++){const P=new it;u.patterns[y]=P;let C;k.patterns&&(C=k.patterns[y]),C!=null&&P.fromJsonObject(C,this,u,o,h,m)}u.patterns.length=this.patternsPerChannel;for(let y=0;y<this.barCount;y++)u.bars[y]=k.sequence!=null?Math.min(this.patternsPerChannel,k.sequence[y]>>>0):0;u.bars.length=this.barCount}d.length>n.pitchChannelCountMax&&(d.length=n.pitchChannelCountMax),f.length>n.noiseChannelCountMax&&(f.length=n.noiseChannelCountMax),x.length>n.modChannelCountMax&&(x.length=n.modChannelCountMax),this.pitchChannelCount=d.length,this.noiseChannelCount=f.length,this.modChannelCount=x.length,this.channels.length=0,Array.prototype.push.apply(this.channels,d),Array.prototype.push.apply(this.channels,f),Array.prototype.push.apply(this.channels,x)}getPattern(e,t){if(t<0||t>=this.barCount)return null;const o=this.channels[e].bars[t];return o==0?null:this.channels[e].patterns[o-1]}getBeatsPerMinute(){return this.tempo}static getNeededBits(e){return 32-Math.clz32(Math.ceil(e+1)-1)}restoreLimiterDefaults(){this.compressionRatio=1,this.limitRatio=1,this.limitRise=4e3,this.limitDecay=4,this.limitThreshold=1,this.compressionThreshold=1,this.masterGain=1}};a(ve,"_format","BeepBox"),a(ve,"_oldestBeepboxVersion",2),a(ve,"_latestBeepboxVersion",9),a(ve,"_oldestJummBoxVersion",1),a(ve,"_latestJummBoxVersion",5),a(ve,"_variant",106);let kt=ve;class yn{constructor(){a(this,"delayLine",null);a(this,"delayIndex",0);a(this,"allPassSample",0);a(this,"allPassPrevInput",0);a(this,"shelfSample",0);a(this,"shelfPrevInput",0);a(this,"fractionalDelaySample",0);a(this,"prevDelayLength",0);a(this,"delayLengthDelta",0);a(this,"delayResetOffset",0);a(this,"allPassG",0);a(this,"allPassGDelta",0);a(this,"shelfA1",0);a(this,"shelfA1Delta",0);a(this,"shelfB0",0);a(this,"shelfB0Delta",0);a(this,"shelfB1",0);a(this,"shelfB1Delta",0);this.reset()}reset(){this.delayIndex=-1,this.allPassSample=0,this.allPassPrevInput=0,this.shelfSample=0,this.shelfPrevInput=0,this.fractionalDelaySample=0,this.prevDelayLength=-1,this.delayResetOffset=0}update(e,t,o,i,c,p,d){const f=2*Math.PI*n.pickedStringDispersionCenterFreq/e.samplesPerSecond,x=2*Math.PI*n.pickedStringShelfHz/e.samplesPerSecond,s=(Math.pow(100,p)-1)/99,k=(Math.pow(100,d)-1)/99,u=this.prevDelayLength,h=o.phaseDeltas[i],m=o.phaseDeltaScales[i],y=h*Math.pow(m,c),P=Math.PI*2*h,C=Math.PI*2*y,S=P*2,v=C*2,D=Math.min(Math.PI,P*n.pickedStringDispersionFreqMult*Math.pow(f/P,n.pickedStringDispersionFreqScale)),N=Math.min(Math.PI,C*n.pickedStringDispersionFreqMult*Math.pow(f/C,n.pickedStringDispersionFreqScale)),L=Math.pow(.5,s*x/P),z=Math.pow(.5,k*x/C),E=Math.pow(L,n.stringDecayRate),l=Math.pow(z,n.stringDecayRate),g=Math.pow(L,.002),F=Math.pow(z,.002);X.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(D),e.tempFrequencyResponse.analyze(X.tempFilterStartCoefficients,S);const M=X.tempFilterStartCoefficients.b[0],I=-e.tempFrequencyResponse.angle()/S;X.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(N),e.tempFrequencyResponse.analyze(X.tempFilterEndCoefficients,v);const A=X.tempFilterEndCoefficients.b[0],V=-e.tempFrequencyResponse.angle()/v;X.tempFilterStartCoefficients.highShelf1stOrder(x,E),e.tempFrequencyResponse.analyze(X.tempFilterStartCoefficients,S);const Y=X.tempFilterStartCoefficients.a[1],Q=X.tempFilterStartCoefficients.b[0]*g,G=X.tempFilterStartCoefficients.b[1]*g,W=-e.tempFrequencyResponse.angle()/S;X.tempFilterEndCoefficients.highShelf1stOrder(x,l),e.tempFrequencyResponse.analyze(X.tempFilterEndCoefficients,v);const ae=X.tempFilterEndCoefficients.a[1],$=X.tempFilterEndCoefficients.b[0]*F,pe=X.tempFilterEndCoefficients.b[1]*F,J=-e.tempFrequencyResponse.angle()/v,ee=1/h,le=1/y,xe=Math.ceil(Math.max(ee,le)*2),H=ee-I-W,j=le-V-J;this.prevDelayLength=H,this.delayLengthDelta=(j-H)/c,this.allPassG=M,this.shelfA1=Y,this.shelfB0=Q,this.shelfB1=G,this.allPassGDelta=(A-M)/c,this.shelfA1Delta=(ae-Y)/c,this.shelfB0Delta=($-Q)/c,this.shelfB1Delta=(pe-G)/c;const ne=Math.abs(Math.log2(H/u))>.01,Z=this.delayIndex==-1||ne;if(this.delayLine==null||this.delayLine.length<=xe){const K=Math.ceil(2*e.samplesPerSecond/Re.frequencyFromPitch(12)),ue=new Float32Array(X.fittingPowerOfTwo(Math.max(K,xe)));if(!Z&&this.delayLine!=null){const me=this.delayLine.length-1>>0,Se=this.delayIndex+this.delayResetOffset;this.delayIndex=this.delayLine.length-this.delayResetOffset;for(let se=0;se<this.delayLine.length;se++)ue[se]=this.delayLine[Se+se&me]}this.delayLine=ue}const re=this.delayLine,_=re.length-1>>0;if(Z){this.delayIndex=0,this.allPassSample=0,this.allPassPrevInput=0,this.shelfSample=0,this.shelfPrevInput=0,this.fractionalDelaySample=0;const K=-H,ue=Math.floor(K-ee/2),me=Math.ceil(ue+ee*2);this.delayResetOffset=me;for(let ge=ue;ge<=me;ge++)re[ge&_]=0;const Se=t.wave,se=Se.length-1,te=se/ee,oe=Math.min(ee*.2,e.samplesPerSecond*.003),ie=Math.ceil(K),ye=K+ee+oe,De=ye;let we=(ie-K)*te,be=0;for(let ge=ie;ge<=De;ge++){const Ae=we|0,Ee=Ae%se;let Ne=Se[Ee];const ct=we-Ae;Ne+=(Se[Ee+1]-Ne)*ct;const ht=(Ne-be)/te,pt=Math.min(1,(ge-K)/oe),dt=Math.min(1,(ye-ge)/oe),Ve=pt*dt,Oe=Ve*Ve*(3-2*Ve);re[ge&_]+=ht*Oe,be=Ne,we+=te}}}}class gn{constructor(){a(this,"instrumentIndex",0);a(this,"pitches",Array(n.maxChordSize).fill(0));a(this,"pitchCount",0);a(this,"chordSize",0);a(this,"drumsetPitch",null);a(this,"note",null);a(this,"prevNote",null);a(this,"nextNote",null);a(this,"prevNotePitchIndex",0);a(this,"nextNotePitchIndex",0);a(this,"freshlyAllocated",!0);a(this,"atNoteStart",!1);a(this,"isOnLastTick",!1);a(this,"passedEndOfNote",!1);a(this,"forceContinueAtStart",!1);a(this,"forceContinueAtEnd",!1);a(this,"noteStartPart",0);a(this,"noteEndPart",0);a(this,"ticksSinceReleased",0);a(this,"liveInputSamplesHeld",0);a(this,"lastInterval",0);a(this,"noiseSample",0);a(this,"stringSustainStart",0);a(this,"stringSustainEnd",0);a(this,"phases",[]);a(this,"operatorWaves",[]);a(this,"phaseDeltas",[]);a(this,"phaseDeltaScales",[]);a(this,"expression",0);a(this,"expressionDelta",0);a(this,"operatorExpressions",[]);a(this,"operatorExpressionDeltas",[]);a(this,"prevPitchExpressions",Array(n.maxPitchOrOperatorCount).fill(null));a(this,"prevVibrato",null);a(this,"prevStringDecay",null);a(this,"pulseWidth",0);a(this,"pulseWidthDelta",0);a(this,"pickedStrings",[]);a(this,"noteFilters",[]);a(this,"noteFilterCount",0);a(this,"initialNoteFilterInput1",0);a(this,"initialNoteFilterInput2",0);a(this,"specialIntervalExpressionMult",1);a(this,"feedbackOutputs",[]);a(this,"feedbackMult",0);a(this,"feedbackDelta",0);a(this,"stereoVolumeLStart",0);a(this,"stereoVolumeRStart",0);a(this,"stereoVolumeLDelta",0);a(this,"stereoVolumeRDelta",0);a(this,"stereoDelayStart",0);a(this,"stereoDelayEnd",0);a(this,"stereoDelayDelta",0);a(this,"customVolumeStart",0);a(this,"customVolumeEnd",0);a(this,"filterResonanceStart",0);a(this,"filterResonanceDelta",0);a(this,"isFirstOrder",!1);a(this,"envelopeComputer",new Ie);this.reset()}reset(){this.noiseSample=0;for(let e=0;e<n.maxPitchOrOperatorCount;e++)this.phases[e]=0,this.operatorWaves[e]=n.operatorWaves[0],this.feedbackOutputs[e]=0,this.prevPitchExpressions[e]=null;for(let e=0;e<this.noteFilterCount;e++)this.noteFilters[e].resetOutput();this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.liveInputSamplesHeld=0;for(const e of this.pickedStrings)e.reset();this.envelopeComputer.reset(),this.prevVibrato=null,this.prevStringDecay=null,this.drumsetPitch=null}}window.beepbox=window.beepbox||{};window.beepbox.Config=window.beepbox.Config||n;const ft=1e-24;function q(r,e,t){return e=e-1,t<=e?t>=r?t:r:e}function Ce(r,e,t){if(r<=t&&t<=e)return t;throw new Error(`Value ${t} not in range [${r}, ${e}]`)}class vn{constructor(e){a(this,"frequency",0);a(this,"amplitude",0);a(this,"waveform",0);a(this,"pulseWidth",.5);this.reset(e)}reset(e){this.frequency=0,this.amplitude=e<=1?n.operatorAmplitudeMax:0,this.waveform=0,this.pulseWidth=5}copy(e){this.frequency=e.frequency,this.amplitude=e.amplitude,this.waveform=e.waveform,this.pulseWidth=e.pulseWidth}}class Dt{constructor(){a(this,"octave",0);a(this,"instruments",[]);a(this,"patterns",[]);a(this,"bars",[]);a(this,"muted",!1);a(this,"name","")}}class bn{constructor(){a(this,"instruments",[]);a(this,"muted",!1);a(this,"singleSeamlessInstrument",null)}}const U=class U{constructor(e=null){a(this,"samplesPerSecond",44100);a(this,"panningDelayBufferSize",0);a(this,"panningDelayBufferMask",0);a(this,"chorusDelayBufferSize",0);a(this,"chorusDelayBufferMask",0);a(this,"song",null);a(this,"preferLowerLatency",!1);a(this,"anticipatePoorPerformance",!1);a(this,"liveInputDuration",0);a(this,"liveInputStarted",!1);a(this,"liveInputPitches",[]);a(this,"liveInputChannel",0);a(this,"liveInputInstruments",[]);a(this,"loopRepeatCount",-1);a(this,"volume",1);a(this,"enableMetronome",!1);a(this,"countInMetronome",!1);a(this,"renderingSong",!1);a(this,"wantToSkip",!1);a(this,"playheadInternal",0);a(this,"bar",0);a(this,"prevBar",null);a(this,"nextBar",null);a(this,"beat",0);a(this,"part",0);a(this,"tick",0);a(this,"isAtStartOfTick",!0);a(this,"isAtEndOfTick",!0);a(this,"tickSampleCountdown",0);a(this,"modValues",[]);a(this,"modInsValues",[]);a(this,"nextModValues",[]);a(this,"nextModInsValues",[]);a(this,"isPlayingSong",!1);a(this,"isRecording",!1);a(this,"liveInputEndTime",0);a(this,"browserAutomaticallyClearsAudioBuffer",!0);a(this,"tempDrumSetControlPoint",new Fe);a(this,"tempFrequencyResponse",new rt);a(this,"channels",[]);a(this,"tonePool",new at);a(this,"tempMatchedPitchTones",Array(n.maxChordSize).fill(null));a(this,"startedMetronome",!1);a(this,"metronomeSamplesRemaining",-1);a(this,"metronomeAmplitude",0);a(this,"metronomePrevAmplitude",0);a(this,"metronomeFilter",0);a(this,"limit",0);a(this,"tempMonoInstrumentSampleBuffer",null);a(this,"audioCtx",null);a(this,"scriptNode",null);a(this,"audioProcessCallback",e=>{const t=e.outputBuffer,o=t.getChannelData(0),i=t.getChannelData(1);if(this.browserAutomaticallyClearsAudioBuffer&&(o[0]!=0||i[0]!=0||o[t.length-1]!=0||i[t.length-1]!=0)&&(this.browserAutomaticallyClearsAudioBuffer=!1),!this.browserAutomaticallyClearsAudioBuffer){const c=t.length;for(let p=0;p<c;p++)o[p]=0,i[p]=0}!this.isPlayingSong&&performance.now()>=this.liveInputEndTime?this.deactivateAudio():this.synthesize(o,i,t.length,this.isPlayingSong)});this.computeDelayBufferSizes(),e!=null&&this.setSong(e)}syncSongState(){const e=this.song.getChannelCount();for(let t=this.channels.length;t<e;t++)this.channels[t]=new bn;this.channels.length=e;for(let t=0;t<e;t++){const o=this.song.channels[t],i=this.channels[t];for(let c=i.instruments.length;c<o.instruments.length;c++)i.instruments[c]=new lt;if(i.instruments.length=o.instruments.length,i.muted!=o.muted&&(i.muted=o.muted,i.muted))for(const c of i.instruments)c.resetAllEffects()}}warmUpSynthesizer(e){if(e!=null){this.syncSongState();const o=this.getSamplesPerTick();for(let i=0;i<e.getChannelCount();i++)for(let c=0;c<e.channels[i].instruments.length;c++){const p=e.channels[i].instruments[c],d=this.channels[i].instruments[c];U.getInstrumentSynthFunction(p),p.LFOtime=0,p.nextLFOtime=0,p.arpTime=0,p.tmpEqFilterStart=p.eqFilter,p.tmpEqFilterEnd=null,p.tmpNoteFilterStart=p.noteFilter,p.tmpNoteFilterEnd=null,d.updateWaves(p,this.samplesPerSecond),d.allocateNecessaryBuffers(this,p,o)}}var t=new Float32Array(1);this.isPlayingSong=!0,this.synthesize(t,t,1,!0),this.isPlayingSong=!1}computeLatestModValues(){if(this.song!=null&&this.song.modChannelCount>0){let e=[],t=[];this.modValues=[],this.nextModValues=[],this.modInsValues=[],this.nextModInsValues=[];for(let i=0;i<this.song.pitchChannelCount+this.song.noiseChannelCount;i++){t[i]=[],this.modInsValues[i]=[],this.nextModInsValues[i]=[];for(let c=0;c<this.song.channels[i].instruments.length;c++)this.modInsValues[i][c]=[],this.nextModInsValues[i][c]=[],t[i][c]=[]}let o=this.beat*n.partsPerBeat+this.part;for(let i=this.song.pitchChannelCount+this.song.noiseChannelCount;i<this.song.getChannelCount();i++)if(!this.song.channels[i].muted){let c;for(let p=this.bar;p>=0;p--)if(c=this.song.getPattern(i,p),c!=null){let d=c.instruments[0],f=this.song.channels[i].instruments[d],x=[],s=[],k=p==this.bar?o:this.findPartsInBar(p);for(const u of c.notes)if(u.start<k&&(x[n.modCount-1-u.pitches[0]]==null||u.end>x[n.modCount-1-u.pitches[0]]))if(u.end<=k)x[n.modCount-1-u.pitches[0]]=u.end,s[n.modCount-1-u.pitches[0]]=u.pins[u.pins.length-1].size;else{x[n.modCount-1-u.pitches[0]]=k;for(let h=0;h<u.pins.length;h++)if(u.pins[h].time+u.start>k){const m=u.pins[h].time-u.pins[h-1].time,y=k-u.start-u.pins[h-1].time,P=u.pins[h].size-u.pins[h-1].size;s[n.modCount-1-u.pitches[0]]=Math.round(u.pins[h-1].size+P*y/m),h=u.pins.length}}for(let u=0;u<n.modCount;u++)if(x[u]!=null)if(n.modulators[f.modulators[u]].forSong)(e[f.modulators[u]]==null||p*n.partsPerBeat*this.song.beatsPerBar+x[u]>e[f.modulators[u]])&&(this.setModValue(s[u],s[u],u,f.modChannels[u],f.modInstruments[u],f.modulators[u]),e[f.modulators[u]]=p*n.partsPerBeat*this.song.beatsPerBar+x[u]);else{let h=[];if(f.modInstruments[u]==this.song.channels[f.modChannels[u]].instruments.length)for(let m=0;m<this.song.channels[f.modChannels[u]].instruments.length;m++)h.push(m);else if(f.modInstruments[u]>this.song.channels[f.modChannels[u]].instruments.length){const m=this.song.getPattern(f.modChannels[u],p);m!=null&&(h=m.instruments)}else h.push(f.modInstruments[u]);for(let m=0;m<h.length;m++){const y=f.modulators[u]==n.modulators.dictionary["eq filter"].index,P=f.modulators[u]==n.modulators.dictionary["note filter"].index;let C=f.modulators[u];if(y?C=n.modulators.length+f.modFilterTypes[u]:P&&(C=n.modulators.length+1+2*n.filterMaxPoints+f.modFilterTypes[u]),t[f.modChannels[u]][h[m]][C]==null||p*n.partsPerBeat*this.song.beatsPerBar+x[u]>t[f.modChannels[u]][h[m]][C]){if(y){let S=this.song.channels[f.modChannels[u]].instruments[h[m]];if(f.modFilterTypes[u]==0)S.tmpEqFilterStart=S.eqSubFilters[s[u]];else{for(let v=0;v<n.filterMorphCount;v++)S.tmpEqFilterStart==S.eqSubFilters[v]&&(S.tmpEqFilterStart=new Me,S.tmpEqFilterStart.fromJsonObject(S.eqSubFilters[v].toJsonObject()),v=n.filterMorphCount);Math.floor((f.modFilterTypes[u]-1)/2)<S.tmpEqFilterStart.controlPointCount&&(f.modFilterTypes[u]%2?S.tmpEqFilterStart.controlPoints[Math.floor((f.modFilterTypes[u]-1)/2)].freq=s[u]:S.tmpEqFilterStart.controlPoints[Math.floor((f.modFilterTypes[u]-1)/2)].gain=s[u])}S.tmpEqFilterEnd=S.tmpEqFilterStart}else if(P){let S=this.song.channels[f.modChannels[u]].instruments[h[m]];if(f.modFilterTypes[u]==0)S.tmpNoteFilterStart=S.noteSubFilters[s[u]];else{for(let v=0;v<n.filterMorphCount;v++)S.tmpNoteFilterStart==S.noteSubFilters[v]&&(S.tmpNoteFilterStart=new Me,S.tmpNoteFilterStart.fromJsonObject(S.noteSubFilters[v].toJsonObject()),v=n.filterMorphCount);Math.floor((f.modFilterTypes[u]-1)/2)<S.tmpNoteFilterStart.controlPointCount&&(f.modFilterTypes[u]%2?S.tmpNoteFilterStart.controlPoints[Math.floor((f.modFilterTypes[u]-1)/2)].freq=s[u]:S.tmpNoteFilterStart.controlPoints[Math.floor((f.modFilterTypes[u]-1)/2)].gain=s[u])}S.tmpNoteFilterEnd=S.tmpNoteFilterStart}else this.setModValue(s[u],s[u],u,f.modChannels[u],h[m],C);t[f.modChannels[u]][h[m]][C]=p*n.partsPerBeat*this.song.beatsPerBar+x[u]}}}}}}}determineInvalidModulators(e){if(this.song!=null)for(let t=0;t<n.modCount;t++){if(e.invalidModulators[t]=!0,e.modChannels[t]==-1){e.modulators[t]!=0&&(e.invalidModulators[t]=!1);continue}const o=this.song.channels[e.modChannels[t]];if(o==null)continue;let i=[];e.modInstruments[t]>=o.instruments.length?i=o.instruments:i=[o.instruments[e.modInstruments[t]]];for(let c=0;c<i.length;c++){const p=i[c];if(p==null)continue;const d=n.modulators[e.modulators[t]].name;n.modulators[e.modulators[t]].associatedEffect!=ce.length&&!(p.effects&1<<n.modulators[e.modulators[t]].associatedEffect)||p.type!=T.fm&&(d=="fm slider 1"||d=="fm slider 2"||d=="fm slider 3"||d=="fm slider 4"||d=="fm feedback")||p.type!=T.pwm&&d=="pulse width"||!p.getChord().arpeggiates&&(d=="arp speed"||d=="reset arp")||p.eqFilterType&&d=="eq filter"||!p.eqFilterType&&(d=="eq filt cut"||d=="eq filt peak")||d=="eq filter"&&Math.floor((e.modFilterTypes[t]+1)/2)>p.eqFilter.controlPointCount||p.noteFilterType&&d=="note filter"||!p.noteFilterType&&(d=="note filt cut"||d=="note filt peak")||d=="note filter"&&Math.floor((e.modFilterTypes[t]+1)/2)>p.noteFilter.controlPointCount||(e.invalidModulators[t]=!1,c=i.length)}}}static operatorAmplitudeCurve(e){return(Math.pow(16,e/15)-1)/15}get playing(){return this.isPlayingSong}get recording(){return this.isRecording}get playhead(){return this.playheadInternal}set playhead(e){if(this.song!=null){this.playheadInternal=Math.max(0,Math.min(this.song.barCount,e));let t=this.playheadInternal;this.bar=Math.floor(t),t=this.song.beatsPerBar*(t-this.bar),this.beat=Math.floor(t),t=n.partsPerBeat*(t-this.beat),this.part=Math.floor(t),t=n.ticksPerPart*(t-this.part),this.tick=Math.floor(t),this.tickSampleCountdown=0,this.isAtStartOfTick=!0,this.prevBar=null}}getSamplesPerBar(){if(this.song==null)throw new Error;return this.getSamplesPerTick()*n.ticksPerPart*n.partsPerBeat*this.song.beatsPerBar}getTicksIntoBar(){return(this.beat*n.partsPerBeat+this.part)*n.ticksPerPart+this.tick}getCurrentPart(){return this.beat*n.partsPerBeat+this.part}findPartsInBar(e){if(this.song==null)return 0;let t=n.partsPerBeat*this.song.beatsPerBar;for(let o=this.song.pitchChannelCount+this.song.noiseChannelCount;o<this.song.getChannelCount();o++){let i=this.song.getPattern(o,e);if(i!=null){let c=this.song.channels[o].instruments[i.instruments[0]];for(let p=0;p<n.modCount;p++)if(c.modulators[p]==n.modulators.dictionary["next bar"].index)for(const d of i.notes)d.pitches[0]==n.modCount-1-p&&t>d.start&&(t=d.start)}}return t}getTotalSamples(e,t,o){if(this.song==null)return-1;let i=e?0:this.song.loopStart,c=t?this.song.barCount:this.song.loopStart+this.song.loopLength,p=!1,d=!1,f=this.song.tempo;for(let x=this.song.pitchChannelCount+this.song.noiseChannelCount;x<this.song.getChannelCount();x++)for(let s=i;s<c;s++){let k=this.song.getPattern(x,s);if(k!=null){let u=this.song.channels[x].instruments[k.instruments[0]];for(let h=0;h<n.modCount;h++)u.modulators[h]==n.modulators.dictionary.tempo.index&&(p=!0),u.modulators[h]==n.modulators.dictionary["next bar"].index&&(d=!0)}}if(i>0){let x=null,s=0;for(let k=i-1;k>=0;k--){for(let u=this.song.pitchChannelCount+this.song.noiseChannelCount;u<this.song.getChannelCount();u++){let h=this.song.getPattern(u,k);if(h!=null){let m=h.instruments[0],y=this.song.channels[u].instruments[m],P=this.findPartsInBar(k);for(const C of h.notes)if(y.modulators[n.modCount-1-C.pitches[0]]==n.modulators.dictionary.tempo.index&&C.start<P&&(x==null||C.end>x))if(C.end<=P)x=C.end,s=C.pins[C.pins.length-1].size;else{x=P;for(let S=0;S<C.pins.length;S++)if(C.pins[S].time+C.start>P){const v=C.pins[S].time-C.pins[S-1].time,D=P-C.start-C.pins[S-1].time,N=C.pins[S].size-C.pins[S-1].size;s=Math.round(C.pins[S-1].size+N*D/v),S=C.pins.length}}}}x!=null&&(f=s+n.modulators.dictionary.tempo.convertRealFactor,k=-1)}}if(p||d){let x=i,s=!1,k=0;for(;!s;){let u=n.partsPerBeat*this.song.beatsPerBar,h=0;if(d&&(u=this.findPartsInBar(x)),p){let m=!1;for(let y=this.song.pitchChannelCount+this.song.noiseChannelCount;y<this.song.getChannelCount();y++)if(m==!1){let P=this.song.getPattern(y,x);if(P!=null){let C=this.song.channels[y].instruments[P.instruments[0]];for(let S=0;S<n.modCount;S++)if(m==!1&&C.modulators[S]==n.modulators.dictionary.tempo.index&&P.notes.find(v=>v.pitches[0]==n.modCount-1-S)){m=!0,P.notes.sort(function(v,D){return v.start==D.start?v.pitches[0]-D.pitches[0]:v.start-D.start});for(const v of P.notes)if(v.pitches[0]==n.modCount-1-S&&(k+=Math.min(u-h,v.start-h)*n.ticksPerPart*this.getSamplesPerTickSpecificBPM(f),v.start<u))for(let D=1;D<v.pins.length;D++){if(v.pins[D-1].time+v.start<=u){const N=n.ticksPerPart*Math.min(u-(v.start+v.pins[D-1].time),v.pins[D].time-v.pins[D-1].time),L=v.pins[D-1].size+n.modulators.dictionary.tempo.convertRealFactor;let z=v.pins[D].size+n.modulators.dictionary.tempo.convertRealFactor;v.pins[D].time+v.start>u&&(z=v.pins[D-1].size+(v.pins[D].size-v.pins[D-1].size)*(u-(v.start+v.pins[D-1].time))/(v.pins[D].time-v.pins[D-1].time)+n.modulators.dictionary.tempo.convertRealFactor);let E=n.partsPerBeat*n.ticksPerPart/60;z!=L?k+=-this.samplesPerSecond*N*(Math.log(E*z*N)-Math.log(E*L*N))/(E*(L-z)):k+=N*this.getSamplesPerTickSpecificBPM(z),f=z}h=Math.min(v.start+v.pins[D].time,u)}}}}}k+=(u-h)*n.ticksPerPart*this.getSamplesPerTickSpecificBPM(f),x++,o!=0&&x==this.song.loopStart+this.song.loopLength&&(x=this.song.loopStart,o>0&&o--),x>=c&&(s=!0)}return Math.ceil(k)}else return this.getSamplesPerBar()*this.getTotalBars(e,t,o)}getTotalBars(e,t,o=this.loopRepeatCount){if(this.song==null)throw new Error;let i=this.song.loopLength*(o+1);return e&&(i+=this.song.loopStart),t&&(i+=this.song.barCount-(this.song.loopStart+this.song.loopLength)),i}setSong(e){typeof e=="string"?this.song=new kt(e):e instanceof kt&&(this.song=e),this.prevBar=null}computeDelayBufferSizes(){this.panningDelayBufferSize=U.fittingPowerOfTwo(this.samplesPerSecond*n.panDelaySecondsMax),this.panningDelayBufferMask=this.panningDelayBufferSize-1,this.chorusDelayBufferSize=U.fittingPowerOfTwo(this.samplesPerSecond*n.chorusMaxDelay),this.chorusDelayBufferMask=this.chorusDelayBufferSize-1}activateAudio(){const e=this.anticipatePoorPerformance?this.preferLowerLatency?2048:4096:this.preferLowerLatency?512:2048;if(this.audioCtx==null||this.scriptNode==null||this.scriptNode.bufferSize!=e){this.scriptNode!=null&&this.deactivateAudio();const t=this.anticipatePoorPerformance?this.preferLowerLatency?"balanced":"playback":this.preferLowerLatency?"interactive":"balanced";this.audioCtx=this.audioCtx||new(window.AudioContext||window.webkitAudioContext)({latencyHint:t}),this.samplesPerSecond=this.audioCtx.sampleRate,this.scriptNode=this.audioCtx.createScriptProcessor?this.audioCtx.createScriptProcessor(e,0,2):this.audioCtx.createJavaScriptNode(e,0,2),this.scriptNode.onaudioprocess=this.audioProcessCallback,this.scriptNode.channelCountMode="explicit",this.scriptNode.channelInterpretation="speakers",this.scriptNode.connect(this.audioCtx.destination),this.computeDelayBufferSizes()}this.audioCtx.resume()}deactivateAudio(){this.audioCtx!=null&&this.scriptNode!=null&&(this.scriptNode.disconnect(this.audioCtx.destination),this.scriptNode=null,this.audioCtx.close&&this.audioCtx.close(),this.audioCtx=null)}maintainLiveInput(){this.activateAudio(),this.liveInputEndTime=performance.now()+1e4}play(){this.isPlayingSong||(this.computeLatestModValues(),this.warmUpSynthesizer(this.song),this.isPlayingSong=!0,this.activateAudio())}pause(){if(this.isPlayingSong&&(this.isPlayingSong=!1,this.isRecording=!1,this.modValues=[],this.nextModValues=[],this.song!=null)){this.song.inVolumeCap=0,this.song.outVolumeCap=0;for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)this.modInsValues[e]=[],this.nextModInsValues[e]=[]}}startRecording(){this.preferLowerLatency=!0,this.isRecording=!0,this.play()}resetEffects(){if(this.limit=0,this.freeAllTones(),this.song!=null)for(const e of this.channels)for(const t of e.instruments)t.resetAllEffects()}setModValue(e,t,o,i,c,p){let d=e+n.modulators[p].convertRealFactor,f=t+n.modulators[p].convertRealFactor;return n.modulators[p].forSong?(this.modValues[p]==null||this.modValues[p]!=d||this.nextModValues[p]!=f)&&(this.modValues[p]=d,this.nextModValues[p]=f):(this.modInsValues[i][c][p]==null||this.modInsValues[i][c][p]!=d||this.nextModInsValues[i][c][p]!=f)&&(this.modInsValues[i][c][p]=d,this.nextModInsValues[i][c][p]=f),d}getModValue(e,t,o,i){if(n.modulators[e].forSong){if(this.modValues[e]!=null&&this.nextModValues[e]!=null)return i?this.nextModValues[e]:this.modValues[e]}else if(t!=null&&o!=null&&this.modInsValues[t][o][e]!=null&&this.nextModInsValues[t][o][e]!=null)return i?this.nextModInsValues[t][o][e]:this.modInsValues[t][o][e];return-1}isAnyModActive(e,t){for(let o=0;o<n.modulators.length;o++)if(this.modValues!=null&&this.modValues[o]!=null||this.modInsValues!=null&&this.modInsValues[e]!=null&&this.modInsValues[e][t]!=null&&this.modInsValues[e][t][o]!=null)return!0;return!1}unsetMod(e,t,o){(this.isModActive(e)||t!=null&&o!=null&&this.isModActive(e,t,o))&&(this.modValues[e]=null,this.nextModValues[e]=null,t!=null&&o!=null&&(this.modInsValues[t][o][e]=null,this.nextModInsValues[t][o][e]=null))}isFilterModActive(e,t,o){const i=this.song.channels[t].instruments[o];if(e){if(i.noteFilterType)return!1;if(i.tmpNoteFilterEnd!=null)return!0}else{if(i.eqFilterType)return!1;if(i.tmpEqFilterEnd!=null)return!0}return!1}isModActive(e,t,o){return n.modulators[e].forSong?this.modValues!=null&&this.modValues[e]!=null:t!=null&&o!=null&&this.modInsValues!=null&&this.modInsValues[t]!=null&&this.modInsValues[t][o]!=null?this.modInsValues[t][o][e]!=null:!1}snapToStart(){this.bar=0,this.resetEffects(),this.snapToBar()}goToBar(e){this.bar=e,this.resetEffects(),this.playheadInternal=this.bar}snapToBar(){this.playheadInternal=this.bar,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=0}jumpIntoLoop(){if(this.song&&(this.bar<this.song.loopStart||this.bar>=this.song.loopStart+this.song.loopLength)){const e=this.bar;this.bar=this.song.loopStart,this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}}goToNextBar(){if(!this.song)return;this.prevBar=this.bar;const e=this.bar;this.bar++,this.bar>=this.song.barCount&&(this.bar=0),this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}goToPrevBar(){if(!this.song)return;this.prevBar=null;const e=this.bar;this.bar--,(this.bar<0||this.bar>=this.song.barCount)&&(this.bar=this.song.barCount-1),this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}getNextBar(){let e=this.bar+1;return this.isRecording?e>=this.song.barCount&&(e=this.song.barCount-1):this.loopRepeatCount!=0&&e==this.song.loopStart+this.song.loopLength&&(e=this.song.loopStart),e}skipBar(){if(!this.song)return;const e=this.getSamplesPerTick();this.bar++,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=e,this.isAtStartOfTick=!0,this.loopRepeatCount!=0&&this.bar==this.song.loopStart+this.song.loopLength&&(this.bar=this.song.loopStart,this.loopRepeatCount>0&&this.loopRepeatCount--)}synthesize(e,t,o,i=!0){if(this.song==null){for(let y=0;y<o;y++)e[y]=0,t[y]=0;this.deactivateAudio();return}const c=this.song;this.song.inVolumeCap=0,this.song.outVolumeCap=0;let p=this.getSamplesPerTick(),d=!1;(this.tickSampleCountdown<=0||this.tickSampleCountdown>p)&&(this.tickSampleCountdown=p,this.isAtStartOfTick=!0),i&&(this.beat>=c.beatsPerBar&&(this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=p,this.isAtStartOfTick=!0,this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--),this.bar>=c.barCount&&(this.bar=0,this.loopRepeatCount!=-1&&(d=!0,this.pause()))),this.syncSongState(),(this.tempMonoInstrumentSampleBuffer==null||this.tempMonoInstrumentSampleBuffer.length<o)&&(this.tempMonoInstrumentSampleBuffer=new Float32Array(o));const f=+this.volume,x=1-Math.pow(.5,4/this.samplesPerSecond),s=1-Math.pow(.5,4e3/this.samplesPerSecond);let k=+this.limit,u=[],h=-1,m=0;for(;m<o&&!d;){this.nextBar=this.getNextBar(),this.nextBar>=c.barCount&&(this.nextBar=null);const y=o-m,P=Math.ceil(this.tickSampleCountdown),C=Math.min(P,y),S=m+C;if(this.isPlayingSong||this.renderingSong)for(let v=c.pitchChannelCount+c.noiseChannelCount;v<c.getChannelCount();v++){const D=c.channels[v],N=this.channels[v];this.determineCurrentActiveTones(c,v,p,i);for(let L=0;L<D.instruments.length;L++){const z=N.instruments[L];for(let E=0;E<z.activeModTones.count();E++){const l=z.activeModTones.get(E);this.playModTone(c,v,p,m,C,l,!1,!1)}}}if(this.wantToSkip){let v=u.includes(this.bar);if(v&&m==h)return;h==-1&&(h=m),v||u.push(this.bar),this.wantToSkip=!1,this.skipBar();continue}for(let v=0;v<c.pitchChannelCount+c.noiseChannelCount;v++){const D=c.channels[v],N=this.channels[v];this.isAtStartOfTick&&(this.determineCurrentActiveTones(c,v,p,i&&!this.countInMetronome),this.determineLiveInputTones(c,v,p));for(let L=0;L<D.instruments.length;L++){const z=D.instruments[L],E=N.instruments[L];if(this.isAtStartOfTick){let G=E.activeTones.count()+E.liveInputTones.count();for(let W=0;W<E.releasedTones.count();W++){const ae=E.releasedTones.get(W);if(ae.ticksSinceReleased>=Math.abs(z.getFadeOutTicks())){this.freeReleasedTone(E,W),W--;continue}const $=G>=n.maximumTonesPerChannel;this.computeTone(c,v,p,ae,!0,$),G++}E.awake&&(E.computed||E.compute(this,z,p,Math.ceil(p),null,v,L),E.computed=!1)}for(let G=0;G<E.activeTones.count();G++){const W=E.activeTones.get(G);this.playTone(v,m,C,W)}for(let G=0;G<E.liveInputTones.count();G++){const W=E.liveInputTones.get(G);this.playTone(v,m,C,W)}for(let G=0;G<E.releasedTones.count();G++){const W=E.releasedTones.get(G);this.playTone(v,m,C,W)}E.awake&&U.effectsSynth(this,e,t,m,C,E);const l=this.tickSampleCountdown,g=1-l/p,F=1-(l-C)/p,M=(this.beat*n.partsPerBeat+this.part)*n.ticksPerPart+this.tick,I=M/n.ticksPerPart,A=(M+1)/n.ticksPerPart,V=I+(A-I)*g,Y=I+(A-I)*F;let Q=z.vibratoSpeed;z.LFOtime=z.nextLFOtime,this.isModActive(n.modulators.dictionary["vibrato speed"].index,v,L)&&(Q=this.getModValue(n.modulators.dictionary["vibrato speed"].index,v,L)),Q==0?(z.LFOtime=0,z.nextLFOtime=0):z.nextLFOtime+=Q*.1*(Y-V)}}if(this.enableMetronome||this.countInMetronome)if(this.part==0){if(!this.startedMetronome){const v=c.beatsPerBar>4&&c.beatsPerBar%2==0&&this.beat==c.beatsPerBar/2,D=this.beat==0?8:v?6:4,N=this.beat==0?1600:v?1200:800,L=this.beat==0?.06:v?.05:.04,z=this.samplesPerSecond/N,E=Math.PI*2/z;this.metronomeSamplesRemaining=Math.floor(z*D),this.metronomeFilter=2*Math.cos(E),this.metronomeAmplitude=L*Math.sin(E),this.metronomePrevAmplitude=0,this.startedMetronome=!0}if(this.metronomeSamplesRemaining>0){const v=Math.min(S,m+this.metronomeSamplesRemaining);this.metronomeSamplesRemaining-=v-m;for(let D=m;D<v;D++){e[D]+=this.metronomeAmplitude,t[D]+=this.metronomeAmplitude;const N=this.metronomeFilter*this.metronomeAmplitude-this.metronomePrevAmplitude;this.metronomePrevAmplitude=this.metronomeAmplitude,this.metronomeAmplitude=N}}}else this.startedMetronome=!1;for(let v=m;v<S;v++){const D=e[v]*c.masterGain*c.masterGain,N=t[v]*c.masterGain*c.masterGain,L=D<0?-D:D,z=N<0?-N:N,E=L>z?L:z;this.song.inVolumeCap=this.song.inVolumeCap>E?this.song.inVolumeCap:E;const l=+(E>c.compressionThreshold)+ +(E>c.limitThreshold),g=+(l==0)*(((E+1-c.compressionThreshold)*.8+.25)*c.compressionRatio+1.05*(1-c.compressionRatio))+ +(l==1)*1.05+ +(l==2)*(1.05*((E+1-c.limitThreshold)*c.limitRatio+(1-c.limitThreshold)));k+=(g-k)*(k<g?s:x);const F=f/(k>=1?k*1.05:k*.8+.25);e[v]=D*F,t[v]=N*F,this.song.outVolumeCap=this.song.outVolumeCap>E*F?this.song.outVolumeCap:E*F}if(m+=C,this.isAtStartOfTick=!1,this.tickSampleCountdown-=C,this.tickSampleCountdown<=0){this.isAtStartOfTick=!0;for(const v of this.channels)for(const D of v.instruments){for(let N=0;N<D.releasedTones.count();N++){const L=D.releasedTones.get(N);L.isOnLastTick?(this.freeReleasedTone(D,N),N--):L.ticksSinceReleased++}D.deactivateAfterThisTick&&D.deactivate(),D.tonesAddedInThisTick=!1}for(let v=0;v<this.song.pitchChannelCount+this.song.noiseChannelCount;v++)for(let D=0;D<this.song.channels[v].instruments.length;D++){let N=this.song.channels[v].instruments[D],L=N.arpeggioSpeed;this.isModActive(n.modulators.dictionary["arp speed"].index,v,D)?(L=this.getModValue(n.modulators.dictionary["arp speed"].index,v,D,!1),Number.isInteger(L)?N.arpTime+=n.arpSpeedScale[L]:N.arpTime+=(1-L%1)*n.arpSpeedScale[Math.floor(L)]+L%1*n.arpSpeedScale[Math.ceil(L)]):N.arpTime+=n.arpSpeedScale[L]}for(let v=0;v<this.song.pitchChannelCount+this.song.noiseChannelCount;v++)for(let D=0;D<this.song.channels[v].instruments.length;D++){let N=this.song.channels[v].instruments[D];N.tmpEqFilterEnd!=null?N.tmpEqFilterStart=N.tmpEqFilterEnd:N.tmpEqFilterStart=N.eqFilter,N.tmpNoteFilterEnd!=null?N.tmpNoteFilterStart=N.tmpNoteFilterEnd:N.tmpNoteFilterStart=N.noteFilter}this.tick++,this.tickSampleCountdown+=p,this.tick==n.ticksPerPart&&(this.tick=0,this.part++,this.liveInputDuration--,this.part==n.partsPerBeat&&(this.part=0,i&&(this.beat++,this.beat==c.beatsPerBar&&(this.beat=0,this.countInMetronome?this.countInMetronome=!1:(this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--,this.bar>=c.barCount&&(this.bar=0,this.loopRepeatCount!=-1&&(d=!0,this.resetEffects(),this.pause())))))))}for(let v=0;v<n.modulators.length;v++)this.nextModValues!=null&&this.nextModValues[v]!=null&&(this.modValues[v]=this.nextModValues[v]);this.isModActive(n.modulators.dictionary.tempo.index)&&(p=this.getSamplesPerTick(),this.tickSampleCountdown=Math.min(this.tickSampleCountdown,p));for(let v=0;v<this.song.pitchChannelCount;v++)for(let D of this.song.channels[v].instruments)D.nextLFOtime=D.nextLFOtime%(n.vibratoTypes[D.vibratoType].period/(n.ticksPerPart*p/this.samplesPerSecond)),D.arpTime=D.arpTime%(2520*n.ticksPerArpeggio);for(let v=0;v<n.modulators.length;v++)for(let D=0;D<this.song.pitchChannelCount+this.song.noiseChannelCount;D++)for(let N=0;N<this.song.getMaxInstrumentsPerChannel();N++)this.nextModInsValues!=null&&this.nextModInsValues[D]!=null&&this.nextModInsValues[D][N]!=null&&this.nextModInsValues[D][N][v]!=null&&(this.modInsValues[D][N][v]=this.nextModInsValues[D][N][v])}(!Number.isFinite(k)||Math.abs(k)<ft)&&(k=0),this.limit=k,i&&!this.countInMetronome&&(this.playheadInternal=(((this.tick+1-this.tickSampleCountdown/p)/2+this.part)/n.partsPerBeat+this.beat)/c.beatsPerBar+this.bar)}freeTone(e){this.tonePool.pushBack(e)}newTone(){if(this.tonePool.count()>0){const e=this.tonePool.popBack();return e.freshlyAllocated=!0,e}return new gn}releaseTone(e,t){e.releasedTones.pushFront(t),t.atNoteStart=!1,t.passedEndOfNote=!0}freeReleasedTone(e,t){this.freeTone(e.releasedTones.get(t)),e.releasedTones.remove(t)}freeAllTones(){for(const e of this.channels)for(const t of e.instruments){for(;t.activeTones.count()>0;)this.freeTone(t.activeTones.popBack());for(;t.activeModTones.count()>0;)this.freeTone(t.activeModTones.popBack());for(;t.releasedTones.count()>0;)this.freeTone(t.releasedTones.popBack());for(;t.liveInputTones.count()>0;)this.freeTone(t.liveInputTones.popBack())}}determineLiveInputTones(e,t,o){const i=e.channels[t],c=this.channels[t],p=this.liveInputPitches;for(let d=0;d<i.instruments.length;d++){const f=c.instruments[d],x=f.liveInputTones;let s=0;if(this.liveInputDuration>0&&t==this.liveInputChannel&&p.length>0&&this.liveInputInstruments.indexOf(d)!=-1){const k=i.instruments[d];if(k.getChord().singleTone){let u;x.count()<=s?(u=this.newTone(),x.pushBack(u)):!k.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(f,x.get(s)),u=this.newTone(),x.set(s,u)):u=x.get(s),s++;for(let h=0;h<p.length;h++)u.pitches[h]=p[h];u.pitchCount=p.length,u.chordSize=1,u.instrumentIndex=d,u.note=u.prevNote=u.nextNote=null,u.atNoteStart=this.liveInputStarted,u.forceContinueAtStart=!1,u.forceContinueAtEnd=!1,this.computeTone(e,t,o,u,!1,!1)}else{this.moveTonesIntoOrderedTempMatchedList(x,p);for(let u=0;u<p.length;u++){let h;this.tempMatchedPitchTones[s]!=null?(h=this.tempMatchedPitchTones[s],this.tempMatchedPitchTones[s]=null,(h.pitchCount!=1||h.pitches[0]!=p[u])&&(this.releaseTone(f,h),h=this.newTone()),x.pushBack(h)):(h=this.newTone(),x.pushBack(h)),s++,h.pitches[0]=p[u],h.pitchCount=1,h.chordSize=p.length,h.instrumentIndex=d,h.note=h.prevNote=h.nextNote=null,h.atNoteStart=this.liveInputStarted,h.forceContinueAtStart=!1,h.forceContinueAtEnd=!1,this.computeTone(e,t,o,h,!1,!1)}}}for(;x.count()>s;)this.releaseTone(f,x.popBack());this.clearTempMatchedPitchTones(s,f)}this.liveInputStarted=!1}adjacentPatternHasCompatibleInstrumentTransition(e,t,o,i,c,p,d,f,x,s){if(e.patternInstruments&&i.instruments.indexOf(c)==-1){if(o.instruments.length>1||i.instruments.length>1)return null;const k=t.instruments[i.instruments[0]];if(s)return k.getChord();const u=k.getTransition();return p.includeAdjacentPatterns&&u.includeAdjacentPatterns&&u.slides==p.slides?k.getChord():null}else return s||p.includeAdjacentPatterns?d:null}static adjacentNotesHaveMatchingPitches(e,t){if(e.pitches.length!=t.pitches.length)return!1;const o=e.pins[e.pins.length-1].interval;for(const i of e.pitches)if(t.pitches.indexOf(i+o)==-1)return!1;return!0}moveTonesIntoOrderedTempMatchedList(e,t){for(let o=0;o<e.count();o++){const i=e.get(o),c=i.pitches[0]+i.lastInterval;for(let p=0;p<t.length;p++)if(t[p]==c){this.tempMatchedPitchTones[p]=i,e.remove(o),o--;break}}for(;e.count()>0;){const o=e.popFront();for(let i=0;i<this.tempMatchedPitchTones.length;i++)if(this.tempMatchedPitchTones[i]==null){this.tempMatchedPitchTones[i]=o;break}}}determineCurrentActiveTones(e,t,o,i){const c=e.channels[t],p=this.channels[t],d=e.getPattern(t,this.bar),f=this.getCurrentPart(),x=this.tick+n.ticksPerPart*f;if(i&&e.getChannelIsMod(t)){let s=[],k=[],u=[],h=n.modCount;for(;h--;)s.push(null),k.push(null),u.push(null);if(d!=null&&!c.muted)for(let S=0;S<d.notes.length;S++)d.notes[S].end<=f?(k[d.notes[S].pitches[0]]==null||d.notes[S].end>k[d.notes[S].pitches[0]].start)&&(k[d.notes[S].pitches[0]]=d.notes[S]):d.notes[S].start<=f&&d.notes[S].end>f?s[d.notes[S].pitches[0]]=d.notes[S]:d.notes[S].start>f&&(u[d.notes[S].pitches[0]]==null||d.notes[S].start<u[d.notes[S].pitches[0]].start)&&(u[d.notes[S].pitches[0]]=d.notes[S]);let m=0;const y=e.patternInstruments&&d!=null?d.instruments[0]:0,P=p.instruments[y],C=P.activeModTones;for(let S=0;S<n.modCount;S++){if(s[S]!=null&&(k[S]!=null&&k[S].end!=s[S].start&&(k[S]=null),u[S]!=null&&u[S].start!=s[S].end&&(u[S]=null)),p.singleSeamlessInstrument!=null&&p.singleSeamlessInstrument!=y&&p.singleSeamlessInstrument<p.instruments.length){const v=p.instruments[p.singleSeamlessInstrument],D=p.instruments[y];for(;v.activeModTones.count()>0;)D.activeModTones.pushFront(v.activeModTones.popBack())}if(p.singleSeamlessInstrument=y,s[S]!=null){let v=k[S],D=u[S],N=!1,L=!1;const z=n.ticksPerPart*s[S].start==x&&this.isAtStartOfTick;let E;if(C.count()<=m)E=this.newTone(),C.pushBack(E);else if(z&&v==null){const l=C.get(m);l.isOnLastTick?this.freeTone(l):this.releaseTone(P,l),E=this.newTone(),C.set(m,E)}else E=C.get(m);m++;for(let l=0;l<s[S].pitches.length;l++)E.pitches[l]=s[S].pitches[l];E.pitchCount=s[S].pitches.length,E.chordSize=1,E.instrumentIndex=y,E.note=s[S],E.noteStartPart=s[S].start,E.noteEndPart=s[S].end,E.prevNote=v,E.nextNote=D,E.prevNotePitchIndex=0,E.nextNotePitchIndex=0,E.atNoteStart=z,E.passedEndOfNote=!1,E.forceContinueAtStart=N,E.forceContinueAtEnd=L}}for(;C.count()>m;){const S=C.popBack(),v=e.channels[t];if(S.instrumentIndex<v.instruments.length&&!S.isOnLastTick){const D=this.channels[t].instruments[S.instrumentIndex];this.releaseTone(D,S)}else this.freeTone(S)}}else if(!e.getChannelIsMod(t)){let s=null,k=null,u=null;if(i&&d!=null&&!c.muted&&(!this.isRecording||this.liveInputChannel!=t)){for(let h=0;h<d.notes.length;h++)if(d.notes[h].end<=f)k=d.notes[h];else if(d.notes[h].start<=f&&d.notes[h].end>f)s=d.notes[h];else if(d.notes[h].start>f){u=d.notes[h];break}s!=null&&(k!=null&&k.end!=s.start&&(k=null),u!=null&&u.start!=s.end&&(u=null))}if(d!=null&&(!e.layeredInstruments||c.instruments.length==1||e.patternInstruments&&d.instruments.length==1)){const h=e.patternInstruments?d.instruments[0]:0;if(p.singleSeamlessInstrument!=null&&p.singleSeamlessInstrument!=h&&p.singleSeamlessInstrument<p.instruments.length){const m=p.instruments[p.singleSeamlessInstrument],y=p.instruments[h];for(;m.activeTones.count()>0;)y.activeTones.pushFront(m.activeTones.popBack())}p.singleSeamlessInstrument=h}else p.singleSeamlessInstrument=null;for(let h=0;h<c.instruments.length;h++){const m=p.instruments[h],y=m.activeTones;let P=0;if(s!=null&&(!e.patternInstruments||d.instruments.indexOf(h)!=-1)){const C=c.instruments[h];let S=k,v=u;const D=n.partsPerBeat*e.beatsPerBar,N=C.getTransition(),L=C.getChord();let z=!1,E=!1,l=0,g=0;if(s.start==0){let F=this.prevBar==null?null:e.getPattern(t,this.prevBar);if(F!=null){const M=F.notes.length<=0?null:F.notes[F.notes.length-1];if(M!=null&&M.end==D){const I=s.continuesLastPattern&&U.adjacentNotesHaveMatchingPitches(M,s),A=this.adjacentPatternHasCompatibleInstrumentTransition(e,c,d,F,h,N,L,s,M,I);A!=null&&(S=M,l=A.singleTone?1:S.pitches.length,z=I)}}}else S!=null&&(l=L.singleTone?1:S.pitches.length);if(s.end==D){let F=this.nextBar==null?null:e.getPattern(t,this.nextBar);if(F!=null){const M=F.notes.length<=0?null:F.notes[0];if(M!=null&&M.start==0){const I=M.continuesLastPattern&&U.adjacentNotesHaveMatchingPitches(s,M),A=this.adjacentPatternHasCompatibleInstrumentTransition(e,c,d,F,h,N,L,s,M,I);A!=null&&(v=M,g=A.singleTone?1:v.pitches.length,E=I)}}}else v!=null&&(g=L.singleTone?1:v.pitches.length);if(L.singleTone){const F=n.ticksPerPart*s.start==x;let M;if(y.count()<=P)M=this.newTone(),y.pushBack(M);else if(F&&(!(N.isSeamless||C.clicklessTransition)&&!z||S==null)){const I=y.get(P);I.isOnLastTick?this.freeTone(I):this.releaseTone(m,I),M=this.newTone(),y.set(P,M)}else M=y.get(P);P++;for(let I=0;I<s.pitches.length;I++)M.pitches[I]=s.pitches[I];M.pitchCount=s.pitches.length,M.chordSize=1,M.instrumentIndex=h,M.note=s,M.noteStartPart=s.start,M.noteEndPart=s.end,M.prevNote=S,M.nextNote=v,M.prevNotePitchIndex=0,M.nextNotePitchIndex=0,M.atNoteStart=F,M.passedEndOfNote=!1,M.forceContinueAtStart=z,M.forceContinueAtEnd=E,this.computeTone(e,t,o,M,!1,!1)}else{const F=C.getTransition();(F.isSeamless&&!F.slides&&L.strumParts==0||z)&&n.ticksPerPart*s.start==x&&S!=null&&this.moveTonesIntoOrderedTempMatchedList(y,s.pitches);let M=0;for(let I=0;I<s.pitches.length;I++){let A=l>I?S:null,V=s,Y=g>I?v:null,Q=V.start+M,G=!1;if(Q>f)if(y.count()>I&&(F.isSeamless||z)&&A!=null)Y=V,V=A,A=null,Q=V.start+M,G=!0;else break;let W=V.end;(F.isSeamless||z)&&Y!=null&&(W=Math.min(n.partsPerBeat*this.song.beatsPerBar,W+M)),(!F.continues&&!z||A==null)&&(M+=L.strumParts);const ae=n.ticksPerPart*Q==x;let $;if(this.tempMatchedPitchTones[P]!=null)$=this.tempMatchedPitchTones[P],this.tempMatchedPitchTones[P]=null,y.pushBack($);else if(y.count()<=P)$=this.newTone(),y.pushBack($);else if(ae&&(!F.isSeamless&&!z||A==null)){const pe=y.get(P);pe.isOnLastTick?this.freeTone(pe):this.releaseTone(m,pe),$=this.newTone(),y.set(P,$)}else $=y.get(P);P++,$.pitches[0]=V.pitches[I],$.pitchCount=1,$.chordSize=V.pitches.length,$.instrumentIndex=h,$.note=V,$.noteStartPart=Q,$.noteEndPart=W,$.prevNote=A,$.nextNote=Y,$.prevNotePitchIndex=I,$.nextNotePitchIndex=I,$.atNoteStart=ae,$.passedEndOfNote=G,$.forceContinueAtStart=z&&A!=null,$.forceContinueAtEnd=E&&Y!=null,this.computeTone(e,t,o,$,!1,!1)}}}for(;y.count()>P;){const C=y.popBack(),S=e.channels[t];if(C.instrumentIndex<S.instruments.length&&!C.isOnLastTick){const v=p.instruments[C.instrumentIndex];this.releaseTone(v,C)}else this.freeTone(C)}this.clearTempMatchedPitchTones(P,m)}}}clearTempMatchedPitchTones(e,t){for(let o=e;o<this.tempMatchedPitchTones.length;o++){const i=this.tempMatchedPitchTones[o];i!=null&&(i.isOnLastTick?this.freeTone(i):this.releaseTone(t,i),this.tempMatchedPitchTones[o]=null)}}playTone(e,t,o,i){const p=this.channels[e].instruments[i.instrumentIndex];p.synthesizer!=null&&p.synthesizer(this,t,o,i,p),i.envelopeComputer.clearEnvelopes()}playModTone(e,t,o,i,c,p,d,f){const s=e.channels[t].instruments[p.instrumentIndex];if(p.note!=null){const k=this.getTicksIntoBar(),u=k/n.ticksPerPart,h=(k+1)/n.ticksPerPart,m=this.tickSampleCountdown,y=1-m/o,P=1-(m-c)/o,C=u+(h-u)*y,S=u+(h-u)*P,v=n.ticksPerPart*C,D=n.ticksPerPart*S,N=p.note.getEndPinIndex(this.getCurrentPart()),L=p.note.pins[N-1],z=p.note.pins[N],E=(p.note.start+L.time)*n.ticksPerPart,l=(p.note.start+z.time)*n.ticksPerPart,g=(v-E)/(l-E),F=(D-E)/(l-E);p.expression=L.size+(z.size-L.size)*g,p.expressionDelta=L.size+(z.size-L.size)*F-p.expression,U.modSynth(this,i,c,p,s)}}static computeChordExpression(e){return 1/((e-1)*.25+1)}computeTone(e,t,o,i,c,p){const d=Math.ceil(o),f=e.channels[t],x=this.channels[t],s=f.instruments[i.instrumentIndex],k=x.instruments[i.instrumentIndex];k.awake=!0,k.tonesAddedInThisTick=!0,k.computed||k.compute(this,s,o,d,i,t,i.instrumentIndex);const u=s.getTransition(),h=s.getChord(),m=h.singleTone?1:U.computeChordExpression(i.chordSize),y=e.getChannelIsNoise(t),P=y?n.noiseInterval:1,C=n.ticksPerPart*o/this.samplesPerSecond,S=1/this.samplesPerSecond,v=1/n.partsPerBeat,D=this.getTicksIntoBar(),N=D/n.ticksPerPart,L=(D+1)/n.ticksPerPart,z=this.getCurrentPart();let E=1;i.specialIntervalExpressionMult=1;let l=p,g=0,F=0,M=1,I=1,A=m,V=m,Y=16,Q=n.keys[e.key].basePitch,G=1,W=48;if(s.type==T.spectrum)G=n.spectrumBaseExpression,y&&(Q=n.spectrumBasePitch,G*=2),Y=n.spectrumBasePitch,W=28;else if(s.type==T.drumset)Q=n.spectrumBasePitch,G=n.drumsetBaseExpression,Y=Q;else if(s.type==T.noise)Q=n.chipNoises[s.chipNoise].basePitch,G=n.noiseBaseExpression,Y=Q,W=n.chipNoises[s.chipNoise].isSoft?24:60;else if(s.type==T.fm)G=n.fmBaseExpression;else if(s.type==T.chip||s.type==T.customChipWave)G=n.chipBaseExpression;else if(s.type==T.harmonics)G=n.harmonicsBaseExpression;else if(s.type==T.pwm)G=n.pwmBaseExpression;else if(s.type==T.pickedString)G=n.pickedStringBaseExpression;else if(s.type==T.mod)G=1,Y=0,W=1,Q=0;else throw new Error("Unknown instrument type in computeTone.");(i.atNoteStart&&!u.isSeamless&&!i.forceContinueAtStart||i.freshlyAllocated)&&i.reset(),i.freshlyAllocated=!1;for(let H=0;H<n.maxPitchOrOperatorCount;H++)i.phaseDeltas[H]=0,i.phaseDeltaScales[H]=0,i.operatorExpressions[H]=0,i.operatorExpressionDeltas[H]=0;i.expression=0,i.expressionDelta=0;for(let H=0;H<n.operatorCount;H++)i.operatorWaves[H]=U.getOperatorWave(s.operators[H].waveform,s.operators[H].pulseWidth);if(c){const H=i.ticksSinceReleased,j=i.ticksSinceReleased+1;g=F=i.lastInterval;const ne=Math.abs(s.getFadeOutTicks());M=U.noteSizeToVolumeMult((1-H/ne)*n.noteSizeMax),I=U.noteSizeToVolumeMult((1-j/ne)*n.noteSizeMax),p&&(I=0),i.ticksSinceReleased+1>=ne&&(l=!0)}else if(i.note==null)M=I=1,i.lastInterval=0,i.ticksSinceReleased=0,i.liveInputSamplesHeld+=d;else{const H=i.note,j=i.nextNote,ne=i.noteStartPart,Z=i.noteEndPart,re=H.getEndPinIndex(z),_=H.pins[re-1],K=H.pins[re],ue=ne*n.ticksPerPart,me=Z*n.ticksPerPart,Se=(H.start+_.time)*n.ticksPerPart,se=(H.start+K.time)*n.ticksPerPart;i.ticksSinceReleased=0;const te=z*n.ticksPerPart+this.tick,oe=te+1,ie=te-ue,ye=oe-ue,De=Math.min(1,(te-Se)/(se-Se)),we=Math.min(1,(oe-Se)/(se-Se));if(M=1,I=1,g=_.interval+(K.interval-_.interval)*De,F=_.interval+(K.interval-_.interval)*we,i.lastInterval=F,!u.isSeamless&&!i.forceContinueAtEnd||j==null){const be=-s.getFadeOutTicks();if(be>0){const ge=me-ue;M*=Math.min(1,(ge-ie)/be),I*=Math.min(1,(ge-ye)/be),oe>=ue+ge&&(l=!0)}}}i.isOnLastTick=l;let ae=s.noteFilter,$,pe;if(s.noteFilterType){const H=s.noteFilter;s.noteSubFilters[1]==null&&(s.noteSubFilters[1]=new Me);const j=s.noteSubFilters[1];let ne=s.noteFilterSimpleCut,Z=s.noteFilterSimplePeak,re=s.noteFilterSimpleCut,_=s.noteFilterSimplePeak,K=!1;this.isModActive(n.modulators.dictionary["note filt cut"].index,t,i.instrumentIndex)&&(ne=this.getModValue(n.modulators.dictionary["note filt cut"].index,t,i.instrumentIndex,!1),re=this.getModValue(n.modulators.dictionary["note filt cut"].index,t,i.instrumentIndex,!0),K=!0),this.isModActive(n.modulators.dictionary["note filt peak"].index,t,i.instrumentIndex)&&(Z=this.getModValue(n.modulators.dictionary["note filt peak"].index,t,i.instrumentIndex,!1),_=this.getModValue(n.modulators.dictionary["note filt peak"].index,t,i.instrumentIndex,!0),K=!0),H.convertLegacySettingsForSynth(ne,Z,!K),j.convertLegacySettingsForSynth(re,_,!K),$=H.controlPoints[0],pe=j.controlPoints[0],s.noteFilter=H,s.tmpNoteFilterStart=H}const J=i.envelopeComputer;J.computeEnvelopes(s,z,n.ticksPerPart*N,o/this.samplesPerSecond,i);const ee=i.envelopeComputer.envelopeStarts,le=i.envelopeComputer.envelopeEnds;if(s.noteFilter=ae,i.note!=null&&u.slides){const H=i.prevNote,j=i.nextNote;if(H!=null){const ne=H.pitches[i.prevNotePitchIndex]+H.pins[H.pins.length-1].interval-i.pitches[0];if(J.prevSlideStart&&(g+=ne*J.prevSlideRatioStart),J.prevSlideEnd&&(F+=ne*J.prevSlideRatioEnd),!h.singleTone){const Z=H.pitches.length-i.chordSize;J.prevSlideStart&&(A=U.computeChordExpression(i.chordSize+Z*J.prevSlideRatioStart)),J.prevSlideEnd&&(V=U.computeChordExpression(i.chordSize+Z*J.prevSlideRatioEnd))}}if(j!=null){const ne=j.pitches[i.nextNotePitchIndex]-(i.pitches[0]+i.note.pins[i.note.pins.length-1].interval);if(J.nextSlideStart&&(g+=ne*J.nextSlideRatioStart),J.nextSlideEnd&&(F+=ne*J.nextSlideRatioEnd),!h.singleTone){const Z=j.pitches.length-i.chordSize;J.nextSlideStart&&(A=U.computeChordExpression(i.chordSize+Z*J.nextSlideRatioStart)),J.nextSlideEnd&&(V=U.computeChordExpression(i.chordSize+Z*J.nextSlideRatioEnd))}}}if(bt(s.effects)){let H=n.justIntonationSemitones[s.pitchShift]/P,j=1,ne=1;this.isModActive(n.modulators.dictionary["pitch shift"].index,t,i.instrumentIndex)&&(H=n.justIntonationSemitones[n.justIntonationSemitones.length-1],j=this.getModValue(n.modulators.dictionary["pitch shift"].index,t,i.instrumentIndex,!1)/n.pitchShiftCenter,ne=this.getModValue(n.modulators.dictionary["pitch shift"].index,t,i.instrumentIndex,!0)/n.pitchShiftCenter);const Z=ee[de.pitchShift],re=le[de.pitchShift];g+=H*Z*j,F+=H*re*ne}if(St(s.effects)||this.isModActive(n.modulators.dictionary["song detune"].index,t,i.instrumentIndex)){const H=ee[de.detune],j=le[de.detune];let ne=s.detune,Z=s.detune;this.isModActive(n.modulators.dictionary.detune.index,t,i.instrumentIndex)&&(ne=this.getModValue(n.modulators.dictionary.detune.index,t,i.instrumentIndex,!1)+n.detuneCenter,Z=this.getModValue(n.modulators.dictionary.detune.index,t,i.instrumentIndex,!0)+n.detuneCenter),this.isModActive(n.modulators.dictionary["song detune"].index,t,i.instrumentIndex)&&(ne+=4*this.getModValue(n.modulators.dictionary["song detune"].index,t,i.instrumentIndex,!1),Z+=4*this.getModValue(n.modulators.dictionary["song detune"].index,t,i.instrumentIndex,!0)),g+=U.detuneToCents(ne*H)*n.pitchesPerOctave/(12*100),F+=U.detuneToCents(Z*j)*n.pitchesPerOctave/(12*100)}if(Ft(s.effects)){let H,j,ne;s.vibrato==n.vibratos.length?(H=s.vibratoDelay*2,s.vibratoDelay==n.modulators.dictionary["vibrato delay"].maxRawVol&&(H=Number.POSITIVE_INFINITY),j=s.vibratoDepth,ne=j):(H=n.vibratos[s.vibrato].delayTicks,j=n.vibratos[s.vibrato].amplitude,ne=j),this.isModActive(n.modulators.dictionary["vibrato delay"].index,t,i.instrumentIndex)&&(H=this.getModValue(n.modulators.dictionary["vibrato delay"].index,t,i.instrumentIndex,!1)*2,H==n.modulators.dictionary["vibrato delay"].maxRawVol*2&&(H=Number.POSITIVE_INFINITY)),this.isModActive(n.modulators.dictionary["vibrato depth"].index,t,i.instrumentIndex)&&(j=this.getModValue(n.modulators.dictionary["vibrato depth"].index,t,i.instrumentIndex,!1)/25,ne=this.getModValue(n.modulators.dictionary["vibrato depth"].index,t,i.instrumentIndex,!0)/25);let Z;if(i.prevVibrato!=null)Z=i.prevVibrato;else{let K=U.getLFOAmplitude(s,C*s.LFOtime);const ue=ee[de.vibratoDepth];if(Z=j*K*ue,H>0){const me=H-J.noteTicksStart;Z*=Math.max(0,Math.min(1,1-me/2))}}let re=U.getLFOAmplitude(s,C*s.nextLFOtime);const _=le[de.vibratoDepth];if(s.type!=T.mod){let K=ne*re*_;if(H>0){const ue=H-J.noteTicksEnd;K*=Math.max(0,Math.min(1,1-ue/2))}i.prevVibrato=K,g+=Z,F+=K}}if(!u.isSeamless&&!i.forceContinueAtStart||i.prevNote==null){const H=s.getFadeInSeconds();H>0&&(M*=Math.min(1,J.noteSecondsStart/H),I*=Math.min(1,J.noteSecondsEnd/H))}s.type==T.drumset&&i.drumsetPitch==null&&(i.drumsetPitch=i.pitches[0],i.note!=null&&(i.drumsetPitch+=i.note.pickMainInterval()),i.drumsetPitch=Math.max(0,Math.min(n.drumCount-1,i.drumsetPitch)));let xe=J.lowpassCutoffDecayVolumeCompensation;if(!ot(s.effects))i.noteFilterCount=0;else{const H=ee[de.noteFilterAllFreqs],j=le[de.noteFilterAllFreqs];if(s.noteFilterType){const ne=ee[de.noteFilterFreq0],Z=le[de.noteFilterFreq0],re=ee[de.noteFilterGain0],_=le[de.noteFilterGain0];$.toCoefficients(U.tempFilterStartCoefficients,this.samplesPerSecond,H*ne,re),pe.toCoefficients(U.tempFilterEndCoefficients,this.samplesPerSecond,j*Z,_),i.noteFilters.length<1&&(i.noteFilters[0]=new Qe),i.noteFilters[0].loadCoefficientsWithGradient(U.tempFilterStartCoefficients,U.tempFilterEndCoefficients,1/d,$.type==Pe.lowPass),xe*=$.getVolumeCompensationMult(),i.noteFilterCount=1}else{const ne=s.tmpNoteFilterStart!=null?s.tmpNoteFilterStart:s.noteFilter;for(let Z=0;Z<ne.controlPointCount;Z++){const re=ee[de.noteFilterFreq0+Z],_=le[de.noteFilterFreq0+Z],K=ee[de.noteFilterGain0+Z],ue=le[de.noteFilterGain0+Z];let me=ne.controlPoints[Z];const Se=s.tmpNoteFilterEnd!=null&&s.tmpNoteFilterEnd.controlPoints[Z]!=null?s.tmpNoteFilterEnd.controlPoints[Z]:ne.controlPoints[Z];me.type!=Se.type&&(me=Se),me.toCoefficients(U.tempFilterStartCoefficients,this.samplesPerSecond,H*re,K),Se.toCoefficients(U.tempFilterEndCoefficients,this.samplesPerSecond,j*_,ue),i.noteFilters.length<=Z&&(i.noteFilters[Z]=new Qe),i.noteFilters[Z].loadCoefficientsWithGradient(U.tempFilterStartCoefficients,U.tempFilterEndCoefficients,1/d,me.type==Pe.lowPass),xe*=me.getVolumeCompensationMult()}i.noteFilterCount=ne.controlPointCount}}if(s.type==T.drumset){const H=s.getDrumsetEnvelope(i.drumsetPitch);xe*=Ie.getLowpassCutoffDecayVolumeCompensation(H);let j=Ie.computeEnvelope(H,J.noteSecondsStart,v*N,J.noteSizeStart),ne=Ie.computeEnvelope(H,J.noteSecondsEnd,v*L,J.noteSizeEnd);if(J.prevSlideStart){const re=Ie.computeEnvelope(H,J.prevNoteSecondsStart,v*N,J.prevNoteSize);j+=(re-j)*J.prevSlideRatioStart}if(J.prevSlideEnd){const re=Ie.computeEnvelope(H,J.prevNoteSecondsEnd,v*L,J.prevNoteSize);ne+=(re-ne)*J.prevSlideRatioEnd}if(J.nextSlideStart){const re=Ie.computeEnvelope(H,0,v*N,J.nextNoteSize);j+=(re-j)*J.nextSlideRatioStart}if(J.nextSlideEnd){const re=Ie.computeEnvelope(H,0,v*L,J.nextNoteSize);ne+=(re-ne)*J.nextSlideRatioEnd}const Z=this.tempDrumSetControlPoint;Z.type=Pe.lowPass,Z.gain=Fe.getRoundedSettingValueFromLinearGain(.5),Z.freq=Fe.getRoundedSettingValueFromHz(8e3),Z.toCoefficients(U.tempFilterStartCoefficients,this.samplesPerSecond,j*(1+j),1),Z.toCoefficients(U.tempFilterEndCoefficients,this.samplesPerSecond,ne*(1+ne),1),i.noteFilters.length==i.noteFilterCount&&(i.noteFilters[i.noteFilterCount]=new Qe),i.noteFilters[i.noteFilterCount].loadCoefficientsWithGradient(U.tempFilterStartCoefficients,U.tempFilterEndCoefficients,1/d,!0),i.noteFilterCount++}if(xe=Math.min(3,xe),s.type==T.fm){let H=1,j=0,ne=0;const Z=h.arpeggiates;if(i.pitchCount>1&&Z){const ie=Math.floor(s.arpTime/n.ticksPerArpeggio);ne=i.pitches[xt(i.pitchCount,s.fastTwoNoteArp,ie)]-i.pitches[0]}const re=n.algorithms[s.algorithm].carrierCount;for(let ie=0;ie<n.operatorCount;ie++){const ye=n.algorithms[s.algorithm].associatedCarrier[ie]-1,De=i.pitches[Z?0:ie<i.pitchCount?ie:ye<i.pitchCount?ye:0],we=n.operatorFrequencies[s.operators[ie].frequency].mult,be=n.operatorCarrierInterval[ye]+ne,ge=Q+(De+g)*P+be,Ae=Q+(De+F)*P+be,Ee=Re.frequencyFromPitch(ge),Ne=Re.frequencyFromPitch(Ae),ct=n.operatorFrequencies[s.operators[ie].frequency].hzOffset,ht=we*Ee+ct,pt=we*Ne+ct,dt=ee[de.operatorFrequency0+ie],Ve=le[de.operatorFrequency0+ie];let Oe,Mt;dt!=1||Ve!=1?(Oe=Math.pow(2,Math.log2(ht/Ee)*dt)*Ee,Mt=Math.pow(2,Math.log2(pt/Ne)*Ve)*Ne):(Oe=ht,Mt=pt),i.phaseDeltas[ie]=Oe*S,i.phaseDeltaScales[ie]=Math.pow(Mt/Oe,1/d);let qt=s.operators[ie].amplitude,Rt=s.operators[ie].amplitude;this.isModActive(n.modulators.dictionary["fm slider 1"].index+ie,t,i.instrumentIndex)&&(qt*=this.getModValue(n.modulators.dictionary["fm slider 1"].index+ie,t,i.instrumentIndex,!1)/15,Rt*=this.getModValue(n.modulators.dictionary["fm slider 1"].index+ie,t,i.instrumentIndex,!0)/15);const Yt=U.operatorAmplitudeCurve(qt),Nt=U.operatorAmplitudeCurve(Rt),Zt=Yt*n.operatorFrequencies[s.operators[ie].frequency].amplitudeSign,Xt=Nt*n.operatorFrequencies[s.operators[ie].frequency].amplitudeSign;let He=Zt,et=Xt;if(ie<re){let Be;i.prevPitchExpressions[ie]!=null?Be=i.prevPitchExpressions[ie]:Be=Math.pow(2,-(ge-Y)/W);const We=Math.pow(2,-(Ae-Y)/W);i.prevPitchExpressions[ie]=We,He*=Be,et*=We,j+=Nt}else He*=n.sineWaveLength*1.5,et*=n.sineWaveLength*1.5,H*=1-Math.min(1,s.operators[ie].amplitude/15);if(He*=ee[de.operatorAmplitude0+ie],et*=le[de.operatorAmplitude0+ie],this.isModActive(n.modulators.dictionary["note volume"].index,t,i.instrumentIndex)){const Be=this.getModValue(n.modulators.dictionary["note volume"].index,t,i.instrumentIndex,!1),We=this.getModValue(n.modulators.dictionary["note volume"].index,t,i.instrumentIndex,!0);He*=Be<=0?(Be+n.volumeRange/2)/(n.volumeRange/2):U.instrumentVolumeToVolumeMult(Be),et*=We<=0?(We+n.volumeRange/2)/(n.volumeRange/2):U.instrumentVolumeToVolumeMult(We)}i.operatorExpressions[ie]=He,i.operatorExpressionDeltas[ie]=(et-He)/d}H*=(Math.pow(2,2-1.4*s.feedbackAmplitude/15)-1)/3,H*=1-Math.min(1,Math.max(0,j-1)/2),H=1+H*3;const _=G*H*xe*M*A*ee[de.noteVolume],K=G*H*xe*I*V*le[de.noteVolume];i.expression=_,i.expressionDelta=(K-_)/d;let ue=s.feedbackAmplitude,me=s.feedbackAmplitude;this.isModActive(n.modulators.dictionary["fm feedback"].index,t,i.instrumentIndex)&&(ue*=this.getModValue(n.modulators.dictionary["fm feedback"].index,t,i.instrumentIndex,!1)/15,me*=this.getModValue(n.modulators.dictionary["fm feedback"].index,t,i.instrumentIndex,!0)/15);let Se=n.sineWaveLength*.3*ue/15;const se=n.sineWaveLength*.3*me/15;let te=Se*ee[de.feedbackAmplitude],oe=se*le[de.feedbackAmplitude];i.feedbackMult=te,i.feedbackDelta=(oe-te)/d}else{const H=Math.pow(2,(F-g)*P/12/d);let j=i.pitches[0];if(i.pitchCount>1&&(h.arpeggiates||h.customInterval)){const se=Math.floor(s.arpTime/n.ticksPerArpeggio);if(h.customInterval){const te=i.pitches[1+xt(i.pitchCount-1,s.fastTwoNoteArp,se)]-i.pitches[0];E=Math.pow(2,te/12),i.specialIntervalExpressionMult=Math.pow(2,-te/W)}else j=i.pitches[xt(i.pitchCount,s.fastTwoNoteArp,se)]}const ne=Q+(j+g)*P,Z=Q+(j+F)*P;let re;i.prevPitchExpressions[0]!=null?re=i.prevPitchExpressions[0]:re=Math.pow(2,-(ne-Y)/W);const _=Math.pow(2,-(Z-Y)/W);i.prevPitchExpressions[0]=_;let K=G*xe;if(s.type==T.noise&&(K*=n.chipNoises[s.chipNoise].expression),s.type==T.chip&&(K*=n.chipWaves[s.chipWave].expression),s.type==T.pwm){const se=nn(s.pulseWidth);let te=se,oe=se;this.isModActive(n.modulators.dictionary["pulse width"].index,t,i.instrumentIndex)&&(te=this.getModValue(n.modulators.dictionary["pulse width"].index,t,i.instrumentIndex,!1)/(n.pulseWidthRange*2),oe=this.getModValue(n.modulators.dictionary["pulse width"].index,t,i.instrumentIndex,!0)/(n.pulseWidthRange*2));const ie=te*ee[de.pulseWidth],ye=oe*le[de.pulseWidth];i.pulseWidth=ie,i.pulseWidthDelta=(ye-ie)/d}if(s.type==T.pickedString){let se=s.stringSustain,te=s.stringSustain;this.isModActive(n.modulators.dictionary.sustain.index,t,i.instrumentIndex)&&(se=this.getModValue(n.modulators.dictionary.sustain.index,t,i.instrumentIndex,!1),te=this.getModValue(n.modulators.dictionary.sustain.index,t,i.instrumentIndex,!0)),i.stringSustainStart=se,i.stringSustainEnd=te,K*=Math.pow(2,.7*(1-se/(n.stringSustainRange-1)))}const ue=Re.frequencyFromPitch(ne);if(s.type==T.chip||s.type==T.customChipWave||s.type==T.harmonics||s.type==T.pickedString){const se=n.unisons[s.unison],te=s.type==T.pickedString?1:se.voices/2;K*=se.expression*te;const oe=ee[de.unison],ie=le[de.unison],ye=Math.pow(2,(se.offset+se.spread)*oe/12),De=Math.pow(2,(se.offset+se.spread)*ie/12),we=Math.pow(2,(se.offset-se.spread)*oe/12)*E,be=Math.pow(2,(se.offset-se.spread)*ie/12)*E;i.phaseDeltas[0]=ue*S*ye,i.phaseDeltas[1]=ue*S*we,i.phaseDeltaScales[0]=H*Math.pow(De/ye,1/d),i.phaseDeltaScales[1]=H*Math.pow(be/we,1/d)}else i.phaseDeltas[0]=ue*S,i.phaseDeltaScales[0]=H;let me=K*M*A*re*ee[de.noteVolume],Se=K*I*V*_*le[de.noteVolume];if(this.isModActive(n.modulators.dictionary["note volume"].index,t,i.instrumentIndex)){const se=this.getModValue(n.modulators.dictionary["note volume"].index,t,i.instrumentIndex,!1),te=this.getModValue(n.modulators.dictionary["note volume"].index,t,i.instrumentIndex,!0);me*=se<=0?(se+n.volumeRange/2)/(n.volumeRange/2):U.instrumentVolumeToVolumeMult(se),Se*=te<=0?(te+n.volumeRange/2)/(n.volumeRange/2):U.instrumentVolumeToVolumeMult(te)}if(i.expression=me,i.expressionDelta=(Se-me)/d,s.type==T.pickedString){let se;if(i.prevStringDecay!=null)se=i.prevStringDecay;else{const ye=i.envelopeComputer.envelopeStarts[de.stringSustain];se=1-Math.min(1,ye*i.stringSustainStart/(n.stringSustainRange-1))}const te=i.envelopeComputer.envelopeEnds[de.stringSustain];let oe=1-Math.min(1,te*i.stringSustainEnd/(n.stringSustainRange-1));i.prevStringDecay=oe;const ie=n.unisons[s.unison];for(let ye=i.pickedStrings.length;ye<ie.voices;ye++)i.pickedStrings[ye]=new yn;if(i.atNoteStart&&!u.continues&&!i.forceContinueAtStart)for(const ye of i.pickedStrings)ye.delayIndex=-1;for(let ye=0;ye<ie.voices;ye++)i.pickedStrings[ye].update(this,k,i,ye,d,se,oe)}}}static getLFOAmplitude(e,t){let o=0;for(const i of n.vibratoTypes[e.vibratoType].periodsSeconds)o+=Math.sin(Math.PI*2*t/i);return o}static getInstrumentSynthFunction(e){if(e.type==T.fm){const t=e.algorithm+"_"+e.feedbackType;if(U.fmSynthFunctionCache[t]==null){const o=[];for(const i of U.fmSourceTemplate)if(i.indexOf("// CARRIER OUTPUTS")!=-1){const c=[];for(let p=0;p<n.algorithms[e.algorithm].carrierCount;p++)c.push("operator"+p+"Scaled");o.push(i.replace("/*operator#Scaled*/",c.join(" + ")))}else if(i.indexOf("// INSERT OPERATOR COMPUTATION HERE")!=-1)for(let c=n.operatorCount-1;c>=0;c--)for(const p of U.operatorSourceTemplate)if(p.indexOf("/* + operator@Scaled*/")!=-1){let d="";for(const x of n.algorithms[e.algorithm].modulatedBy[c])d+=" + operator"+(x-1)+"Scaled";const f=n.feedbacks[e.feedbackType].indices[c];if(f.length>0){d+=" + feedbackMult * (";const x=[];for(const s of f)x.push("operator"+(s-1)+"Output");d+=x.join(" + ")+")"}o.push(p.replace(/\#/g,c+"").replace("/* + operator@Scaled*/",d))}else o.push(p.replace(/\#/g,c+""));else if(i.indexOf("#")!=-1)for(let c=0;c<n.operatorCount;c++)o.push(i.replace(/\#/g,c+""));else o.push(i);U.fmSynthFunctionCache[t]=new Function("synth","bufferIndex","roundedSamplesPerTick","tone","instrumentState",o.join(`
`))}return U.fmSynthFunctionCache[t]}else{if(e.type==T.chip)return U.chipSynth;if(e.type==T.customChipWave)return U.chipSynth;if(e.type==T.harmonics)return U.harmonicsSynth;if(e.type==T.pwm)return U.pulseWidthSynth;if(e.type==T.pickedString)return U.pickedStringSynth;if(e.type==T.noise)return U.noiseSynth;if(e.type==T.spectrum)return U.spectrumSynth;if(e.type==T.drumset)return U.drumsetSynth;if(e.type==T.mod)return U.modSynth;throw new Error("Unrecognized instrument type: "+e.type)}}static chipSynth(e,t,o,i,c){const p=Ze(c.effects)&&c.aliases,d=e.tempMonoInstrumentSampleBuffer,f=c.wave,x=c.volumeScale,s=p&&c.type==T.customChipWave?f.length:f.length-1,k=i.specialIntervalExpressionMult*c.unison.sign;c.unison.voices==1&&!c.chord.customInterval&&(i.phases[1]=i.phases[0]);let u=i.phaseDeltas[0]*s,h=i.phaseDeltas[1]*s;const m=+i.phaseDeltaScales[0],y=+i.phaseDeltaScales[1];let P=+i.expression;const C=+i.expressionDelta;let S=i.phases[0]%1*s,v=i.phases[1]%1*s;const D=i.noteFilters,N=i.noteFilterCount|0;let L=+i.initialNoteFilterInput1,z=+i.initialNoteFilterInput2;const E=U.applyFilters;let l=0,g=0;if(!p){const M=S|0,I=v|0,A=M%s,V=I%s,Y=S-M,Q=v-I;l=+f[A],g=+f[V],l+=(f[A+1]-l)*Y,g+=(f[V+1]-g)*Q}const F=t+o;for(let M=t;M<F;M++){S+=u,v+=h;let I,A,V;if(p)I=f[(0|S)%s],A=f[(0|v)%s],V=I+A;else{const G=S|0,W=v|0,ae=G%s,$=W%s;let pe=f[ae],J=f[$];const ee=S-G,le=v-W;pe+=(f[ae+1]-pe)*ee,J+=(f[$+1]-J)*le,I=(pe-l)/u,A=(J-g)/h,l=pe,g=J,V=I+A*k}const Y=E(V*x,L,z,N,D);z=L,L=V*x,u*=m,h*=y;const Q=Y*P;P+=C,d[M]+=Q}i.phases[0]=S/s,i.phases[1]=v/s,i.phaseDeltas[0]=u/s,i.phaseDeltas[1]=h/s,i.expression=P,e.sanitizeFilters(D),i.initialNoteFilterInput1=L,i.initialNoteFilterInput2=z}static harmonicsSynth(e,t,o,i,c){const p=e.tempMonoInstrumentSampleBuffer,d=c.wave,f=d.length-1,x=i.specialIntervalExpressionMult*c.unison.sign;c.unison.voices==1&&!c.chord.customInterval&&(i.phases[1]=i.phases[0]);let s=i.phaseDeltas[0]*f,k=i.phaseDeltas[1]*f;const u=+i.phaseDeltaScales[0],h=+i.phaseDeltaScales[1];let m=+i.expression;const y=+i.expressionDelta;let P=i.phases[0]%1*f,C=i.phases[1]%1*f;const S=i.noteFilters,v=i.noteFilterCount|0;let D=+i.initialNoteFilterInput1,N=+i.initialNoteFilterInput2;const L=U.applyFilters,z=P|0,E=C|0,l=z%f,g=E%f,F=P-z,M=C-E;let I=+d[l],A=+d[g];I+=(d[l+1]-I)*F,A+=(d[g+1]-A)*M;const V=t+o;for(let Y=t;Y<V;Y++){P+=s,C+=k;const Q=P|0,G=C|0,W=Q%f,ae=G%f;let $=d[W],pe=d[ae];const J=P-Q,ee=C-G;$+=(d[W+1]-$)*J,pe+=(d[ae+1]-pe)*ee;const le=($-I)/s,xe=(pe-A)/k;I=$,A=pe;const H=le+xe*x,j=L(H,D,N,v,S);N=D,D=H,s*=u,k*=h;const ne=j*m;m+=y,p[Y]+=ne}i.phases[0]=P/f,i.phases[1]=C/f,i.phaseDeltas[0]=s/f,i.phaseDeltas[1]=k/f,i.expression=m,e.sanitizeFilters(S),i.initialNoteFilterInput1=D,i.initialNoteFilterInput2=N}static pickedStringSynth(e,t,o,i,c){const p=c.unison.voices;let d=U.pickedStringFunctionCache[p];if(d==null){let f="";f+=`
				const Config = beepbox.Config;
				const Synth = beepbox.Synth;
				const data = synth.tempMonoInstrumentSampleBuffer;
				
				let pickedString# = tone.pickedStrings[#];
				let allPassSample# = +pickedString#.allPassSample;
				let allPassPrevInput# = +pickedString#.allPassPrevInput;
				let shelfSample# = +pickedString#.shelfSample;
				let shelfPrevInput# = +pickedString#.shelfPrevInput;
				let fractionalDelaySample# = +pickedString#.fractionalDelaySample;
				const delayLine# = pickedString#.delayLine;
				const delayBufferMask# = (delayLine#.length - 1) >> 0;
				let delayIndex# = pickedString#.delayIndex|0;
				delayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;
				let delayLength# = +pickedString#.prevDelayLength;
				const delayLengthDelta# = +pickedString#.delayLengthDelta;
				let allPassG# = +pickedString#.allPassG;
				let shelfA1# = +pickedString#.shelfA1;
				let shelfB0# = +pickedString#.shelfB0;
				let shelfB1# = +pickedString#.shelfB1;
				const allPassGDelta# = +pickedString#.allPassGDelta;
				const shelfA1Delta# = +pickedString#.shelfA1Delta;
				const shelfB0Delta# = +pickedString#.shelfB0Delta;
				const shelfB1Delta# = +pickedString#.shelfB1Delta;
				
				let expression = +tone.expression;
				const expressionDelta = +tone.expressionDelta;
				
				const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unison.sign;
				const delayResetOffset# = pickedString#.delayResetOffset|0;
				
				const filters = tone.noteFilters;
				const filterCount = tone.noteFilterCount|0;
				let initialFilterInput1 = +tone.initialNoteFilterInput1;
				let initialFilterInput2 = +tone.initialNoteFilterInput2;
				const applyFilters = Synth.applyFilters;
				
				const stopIndex = bufferIndex + runLength;
				for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
					const targetSampleTime# = delayIndex# - delayLength#;
					const lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.
					const upperIndex# = lowerIndex# + 1;
					const fractionalDelay# = upperIndex# - targetSampleTime#;
					const fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
					const prevInput# = delayLine#[lowerIndex# & delayBufferMask#];
					const input# = delayLine#[upperIndex# & delayBufferMask#];
					fractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;
					
					allPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;
					allPassPrevInput# = fractionalDelaySample#;
					
					shelfSample# = shelfB0# * allPassSample# + shelfB1# * shelfPrevInput# - shelfA1# * shelfSample#;
					shelfPrevInput# = allPassSample#;
					
					delayLine#[delayIndex# & delayBufferMask#] += shelfSample#;
					delayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;
					delayIndex#++;
					
					const inputSample = (`;const x=[];for(let s=0;s<p;s++)x.push("fractionalDelaySample"+s+(s==1?" * unisonSign":""));f+=x.join(" + "),f+=`) * expression;
					const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
					initialFilterInput2 = initialFilterInput1;
					initialFilterInput1 = inputSample;
					data[sampleIndex] += sample;
					
					expression += expressionDelta;
					delayLength# += delayLengthDelta#;
					allPassG# += allPassGDelta#;
					shelfA1# += shelfA1Delta#;
					shelfB0# += shelfB0Delta#;
					shelfB1# += shelfB1Delta#;
				}
				
				// Avoid persistent denormal or NaN values in the delay buffers and filter history.
				const epsilon = (1.0e-24);
				if (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;
				if (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;
				if (!Number.isFinite(shelfSample#) || Math.abs(shelfSample#) < epsilon) shelfSample# = 0.0;
				if (!Number.isFinite(shelfPrevInput#) || Math.abs(shelfPrevInput#) < epsilon) shelfPrevInput# = 0.0;
				if (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;
				pickedString#.allPassSample = allPassSample#;
				pickedString#.allPassPrevInput = allPassPrevInput#;
				pickedString#.shelfSample = shelfSample#;
				pickedString#.shelfPrevInput = shelfPrevInput#;
				pickedString#.fractionalDelaySample = fractionalDelaySample#;
				pickedString#.delayIndex = delayIndex#;
				pickedString#.prevDelayLength = delayLength#;
				pickedString#.allPassG = allPassG#;
				pickedString#.shelfA1 = shelfA1#;
				pickedString#.shelfB0 = shelfB0#;
				pickedString#.shelfB1 = shelfB1#;
				
				tone.expression = expression;
				
				synth.sanitizeFilters(filters);
				tone.initialNoteFilterInput1 = initialFilterInput1;
				tone.initialNoteFilterInput2 = initialFilterInput2;`,f=f.replace(/^.*\#.*$/gm,s=>{const k=[];for(let u=0;u<p;u++)k.push(s.replace(/\#/g,String(u)));return k.join(`
`)}),d=new Function("synth","bufferIndex","runLength","tone","instrumentState",f),U.pickedStringFunctionCache[p]=d}d(e,t,o,i,c)}static effectsSynth(e,t,o,i,c,p){const d=Ze(p.effects),f=st(p.effects),x=p.eqFilterCount>0,s=Xe(p.effects),k=je(p.effects),u=_e(p.effects),h=Le(p.effects);let m=0;d&&(m=m|1),m=m<<1,f&&(m=m|1),m=m<<1,x&&(m=m|1),m=m<<1,s&&(m=m|1),m=m<<1,k&&(m=m|1),m=m<<1,u&&(m=m|1),m=m<<1,h&&(m=m|1);let y=U.effectsFunctionCache[m];if(y==null){let P="";const C=k||h||u;P+=`
				const Config = beepbox.Config;
				const tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;
				
				let mixVolume = +instrumentState.mixVolume;
				const mixVolumeDelta = +instrumentState.mixVolumeDelta;`,C&&(P+=`
				
				let delayInputMult = +instrumentState.delayInputMult;
				const delayInputMultDelta = +instrumentState.delayInputMultDelta;`),d&&(P+=`
				
				const distortionBaseVolume = +Config.distortionBaseVolume;
				let distortion = instrumentState.distortion;
				const distortionDelta = instrumentState.distortionDelta;
				let distortionDrive = instrumentState.distortionDrive;
				const distortionDriveDelta = instrumentState.distortionDriveDelta;
				const distortionFractionalResolution = 4.0;
				const distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;
				const distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;
				const distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;
				const distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;
				const distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
				const distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
				const distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
				const distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;
				const distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;
				const distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;
				const distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;
				const distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;
				const distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;
				
				let distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;
				let distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;
				let distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;
				let distortionPrevInput = +instrumentState.distortionPrevInput;
				let distortionNextOutput = +instrumentState.distortionNextOutput;`),f&&(P+=`
				
				let bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;
				let bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;
				let bitcrusherPhase = +instrumentState.bitcrusherPhase;
				let bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;
				const bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;
				let bitcrusherScale = +instrumentState.bitcrusherScale;
				const bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;
				let bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;
				const bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`),x&&(P+=`
				
				let filters = instrumentState.eqFilters;
				const filterCount = instrumentState.eqFilterCount|0;
				let initialFilterInput1 = +instrumentState.initialEqFilterInput1;
				let initialFilterInput2 = +instrumentState.initialEqFilterInput2;
				const applyFilters = beepbox.Synth.applyFilters;`),P+=`
				
				let eqFilterVolume = +instrumentState.eqFilterVolume;
				const eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`,s&&(P+=`
				
				const panningMask = synth.panningDelayBufferMask >>> 0;
				const panningDelayLine = instrumentState.panningDelayLine;
				let panningDelayPos = instrumentState.panningDelayPos & panningMask;
				let   panningVolumeL      = +instrumentState.panningVolumeL;
				let   panningVolumeR      = +instrumentState.panningVolumeR;
				const panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;
				const panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;
				let   panningOffsetL      = +instrumentState.panningOffsetL;
				let   panningOffsetR      = +instrumentState.panningOffsetR;
				const panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;
				const panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`),k&&(P+=`
				
				const chorusMask = synth.chorusDelayBufferMask >>> 0;
				const chorusDelayLineL = instrumentState.chorusDelayLineL;
				const chorusDelayLineR = instrumentState.chorusDelayLineR;
				instrumentState.chorusDelayLineDirty = true;
				let chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;
				
				let chorusVoiceMult = +instrumentState.chorusVoiceMult;
				const chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;
				let chorusCombinedMult = +instrumentState.chorusCombinedMult;
				const chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;
				
				const chorusDuration = +beepbox.Config.chorusPeriodSeconds;
				const chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);
				const chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;
				const chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;
				const chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;
				const chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;
				const chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;
				const chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;
				const chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;
				let chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);
				let chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);
				let chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);
				let chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);
				let chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);
				let chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);
				let chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);
				chorusPhase += chorusAngle * runLength;
				const chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;
				const chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;
				const chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;
				const chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;
				const chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;
				const chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;
				const chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;
				const chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;
				const chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;
				const chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;
				const chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;
				const chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`),u&&(P+=`
				
				let echoMult = +instrumentState.echoMult;
				const echoMultDelta = +instrumentState.echoMultDelta;
				
				const echoDelayLineL = instrumentState.echoDelayLineL;
				const echoDelayLineR = instrumentState.echoDelayLineR;
				const echoMask = (echoDelayLineL.length - 1) >>> 0;
				instrumentState.echoDelayLineDirty = true;
				
				let echoDelayPos = instrumentState.echoDelayPos & echoMask;
				const echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;
				const echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;
				let echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;
				const echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;
				
				const echoShelfA1 = +instrumentState.echoShelfA1;
				const echoShelfB0 = +instrumentState.echoShelfB0;
				const echoShelfB1 = +instrumentState.echoShelfB1;
				let echoShelfSampleL = +instrumentState.echoShelfSampleL;
				let echoShelfSampleR = +instrumentState.echoShelfSampleR;
				let echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;
				let echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`),h&&(P+=`
				
				const reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.
				const reverbDelayLine = instrumentState.reverbDelayLine;
				instrumentState.reverbDelayLineDirty = true;
				let reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;
				
				let reverb = +instrumentState.reverbMult;
				const reverbDelta = +instrumentState.reverbMultDelta;
				
				const reverbShelfA1 = +instrumentState.reverbShelfA1;
				const reverbShelfB0 = +instrumentState.reverbShelfB0;
				const reverbShelfB1 = +instrumentState.reverbShelfB1;
				let reverbShelfSample0 = +instrumentState.reverbShelfSample0;
				let reverbShelfSample1 = +instrumentState.reverbShelfSample1;
				let reverbShelfSample2 = +instrumentState.reverbShelfSample2;
				let reverbShelfSample3 = +instrumentState.reverbShelfSample3;
				let reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;
				let reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;
				let reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;
				let reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`),P+=`
				
				const stopIndex = bufferIndex + runLength;
				for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
					let sample = tempMonoInstrumentSampleBuffer[sampleIndex];
					tempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`,d&&(P+=`
					
					const distortionReverse = 1.0 - distortion;
					const distortionNextInput = sample * distortionDrive;
					sample = distortionNextOutput;
					distortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);
					distortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;
					distortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;
					distortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;
					const distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);
					const distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);
					const distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);
					distortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;
					sample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;
					sample *= distortionOversampleCompensation;
					distortionPrevInput = distortionNextInput;
					distortion += distortionDelta;
					distortionDrive += distortionDriveDelta;`),f&&(P+=`
					
					bitcrusherPhase += bitcrusherPhaseDelta;
					if (bitcrusherPhase < 1.0) {
						bitcrusherPrevInput = sample;
						sample = bitcrusherCurrentOutput;
					} else {
						bitcrusherPhase = bitcrusherPhase % 1.0;
						const ratio = bitcrusherPhase / bitcrusherPhaseDelta;
						
						const lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;
						bitcrusherPrevInput = sample;
						
						const bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;
						const wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;
						const foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);
						const scaledSample = foldedSample / bitcrusherScale;
						const oldValue = bitcrusherCurrentOutput;
						const newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;
						
						sample = oldValue + (newValue - oldValue) * ratio;
						bitcrusherCurrentOutput = newValue;
					}
					bitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;
					bitcrusherScale *= bitcrusherScaleScale;
					bitcrusherFoldLevel *= bitcrusherFoldLevelScale;`),x&&(P+=`
					
					const inputSample = sample;
					sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
					initialFilterInput2 = initialFilterInput1;
					initialFilterInput1 = inputSample;`),P+=`
					
					sample *= eqFilterVolume;
					eqFilterVolume += eqFilterVolumeDelta;`,s?P+=`
					
					panningDelayLine[panningDelayPos] = sample;
					const panningRatioL  = panningOffsetL % 1;
					const panningRatioR  = panningOffsetR % 1;
					const panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];
					const panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];
					const panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];
					const panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];
					const panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;
					const panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;
					let sampleL = panningTapL * panningVolumeL;
					let sampleR = panningTapR * panningVolumeR;
					panningDelayPos = (panningDelayPos + 1) & panningMask;
					panningVolumeL += panningVolumeDeltaL;
					panningVolumeR += panningVolumeDeltaR;
					panningOffsetL += panningOffsetDeltaL;
					panningOffsetR += panningOffsetDeltaR;`:P+=`
					
					let sampleL = sample;
					let sampleR = sample;`,k&&(P+=`
					
					const chorusTap0Ratio = chorusTap0Index % 1;
					const chorusTap1Ratio = chorusTap1Index % 1;
					const chorusTap2Ratio = chorusTap2Index % 1;
					const chorusTap3Ratio = chorusTap3Index % 1;
					const chorusTap4Ratio = chorusTap4Index % 1;
					const chorusTap5Ratio = chorusTap5Index % 1;
					const chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];
					const chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];
					const chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];
					const chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];
					const chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];
					const chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];
					const chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];
					const chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];
					const chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];
					const chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];
					const chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];
					const chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];
					const chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;
					const chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;
					const chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;
					const chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;
					const chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;
					const chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;
					chorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;
					chorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;
					sampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));
					sampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));
					chorusDelayPos = (chorusDelayPos + 1) & chorusMask;
					chorusTap0Index += chorusTap0Delta;
					chorusTap1Index += chorusTap1Delta;
					chorusTap2Index += chorusTap2Delta;
					chorusTap3Index += chorusTap3Delta;
					chorusTap4Index += chorusTap4Delta;
					chorusTap5Index += chorusTap5Delta;
					chorusVoiceMult += chorusVoiceMultDelta;
					chorusCombinedMult += chorusCombinedMultDelta;`),u&&(P+=`
					
					const echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;
					const echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;
					const echoTapStartL = echoDelayLineL[echoTapStartIndex];
					const echoTapEndL   = echoDelayLineL[echoTapEndIndex];
					const echoTapStartR = echoDelayLineR[echoTapStartIndex];
					const echoTapEndR   = echoDelayLineR[echoTapEndIndex];
					const echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;
					const echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;
					
					echoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;
					echoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;
					echoShelfPrevInputL = echoTapL;
					echoShelfPrevInputR = echoTapR;
					sampleL += echoShelfSampleL;
					sampleR += echoShelfSampleR;
					
					echoDelayLineL[echoDelayPos] = sampleL * delayInputMult;
					echoDelayLineR[echoDelayPos] = sampleR * delayInputMult;
					echoDelayPos = (echoDelayPos + 1) & echoMask;
					echoDelayOffsetRatio += echoDelayOffsetRatioDelta;
					echoMult += echoMultDelta;
                    `),h&&(P+=`
					
					// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.
					// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268
					// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14
					// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384
					const reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;
					const reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;
					const reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;
					const reverbSample0 = (reverbDelayLine[reverbDelayPos]);
					const reverbSample1 = reverbDelayLine[reverbDelayPos1];
					const reverbSample2 = reverbDelayLine[reverbDelayPos2];
					const reverbSample3 = reverbDelayLine[reverbDelayPos3];
					const reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;
					const reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;
					const reverbTemp2 = -reverbSample2 + reverbSample3;
					const reverbTemp3 = -reverbSample2 - reverbSample3;
					const reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;
					const reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;
					const reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;
					const reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;
					reverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;
					reverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;
					reverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;
					reverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;
					reverbShelfPrevInput0 = reverbShelfInput0;
					reverbShelfPrevInput1 = reverbShelfInput1;
					reverbShelfPrevInput2 = reverbShelfInput2;
					reverbShelfPrevInput3 = reverbShelfInput3;
					reverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;
					reverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;
					reverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;
					reverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;
					reverbDelayPos = (reverbDelayPos + 1) & reverbMask;
					sampleL += reverbSample1 + reverbSample2 + reverbSample3;
					sampleR += reverbSample0 + reverbSample2 - reverbSample3;
					reverb += reverbDelta;`),P+=`
					
					outputDataL[sampleIndex] += sampleL * mixVolume;
					outputDataR[sampleIndex] += sampleR * mixVolume;
					mixVolume += mixVolumeDelta;`,C&&(P+=`
					
					delayInputMult += delayInputMultDelta;`),P+=`
				}
				
				instrumentState.mixVolume = mixVolume;
				instrumentState.eqFilterVolume = eqFilterVolume;
				
				// Avoid persistent denormal or NaN values in the delay buffers and filter history.
				const epsilon = (1.0e-24);`,C&&(P+=`
				
				instrumentState.delayInputMult = delayInputMult;`),d&&(P+=`
				
				instrumentState.distortion = distortion;
				instrumentState.distortionDrive = distortionDrive;
				
				if (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;
				if (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;
				if (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;
				if (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;
				if (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;
				
				instrumentState.distortionFractionalInput1 = distortionFractionalInput1;
				instrumentState.distortionFractionalInput2 = distortionFractionalInput2;
				instrumentState.distortionFractionalInput3 = distortionFractionalInput3;
				instrumentState.distortionPrevInput = distortionPrevInput;
				instrumentState.distortionNextOutput = distortionNextOutput;`),f&&(P+=`
					
				if (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;
				if (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;
				instrumentState.bitcrusherPrevInput = bitcrusherPrevInput;
				instrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;
				instrumentState.bitcrusherPhase = bitcrusherPhase;
				instrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;
				instrumentState.bitcrusherScale = bitcrusherScale;
				instrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`),x&&(P+=`
					
				synth.sanitizeFilters(filters);
				// The filter input here is downstream from another filter so we
				// better make sure it's safe too.
				if (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {
					initialFilterInput1 = 0.0;
					initialFilterInput2 = 0.0;
				}
				if (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;
				if (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;
				instrumentState.initialEqFilterInput1 = initialFilterInput1;
				instrumentState.initialEqFilterInput2 = initialFilterInput2;`),s&&(P+=`
				
				beepbox.Synth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);
				instrumentState.panningDelayPos = panningDelayPos;
				instrumentState.panningVolumeL = panningVolumeL;
				instrumentState.panningVolumeR = panningVolumeR;
				instrumentState.panningOffsetL = panningOffsetL;
				instrumentState.panningOffsetR = panningOffsetR;`),k&&(P+=`
				
				beepbox.Synth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);
				beepbox.Synth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);
				instrumentState.chorusPhase = chorusPhase;
				instrumentState.chorusDelayPos = chorusDelayPos;
				instrumentState.chorusVoiceMult = chorusVoiceMult;
				instrumentState.chorusCombinedMult = chorusCombinedMult;`),u&&(P+=`
				
				beepbox.Synth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);
				beepbox.Synth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);
				instrumentState.echoDelayPos = echoDelayPos;
				instrumentState.echoMult = echoMult;
				instrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;
				
				if (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;
				if (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;
				if (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;
				if (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;
				instrumentState.echoShelfSampleL = echoShelfSampleL;
				instrumentState.echoShelfSampleR = echoShelfSampleR;
				instrumentState.echoShelfPrevInputL = echoShelfPrevInputL;
				instrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`),h&&(P+=`
				
				beepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);
				beepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);
				beepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);
				beepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);
				instrumentState.reverbDelayPos = reverbDelayPos;
				instrumentState.reverbMult = reverb;
				
				if (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;
				if (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;
				if (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;
				if (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;
				instrumentState.reverbShelfSample0 = reverbShelfSample0;
				instrumentState.reverbShelfSample1 = reverbShelfSample1;
				instrumentState.reverbShelfSample2 = reverbShelfSample2;
				instrumentState.reverbShelfSample3 = reverbShelfSample3;
				instrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;
				instrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;
				instrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;
				instrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`),y=new Function("synth","outputDataL","outputDataR","bufferIndex","runLength","instrumentState",P),U.effectsFunctionCache[m]=y}y(e,t,o,i,c,p)}static pulseWidthSynth(e,t,o,i,c){const p=e.tempMonoInstrumentSampleBuffer;let d=i.phaseDeltas[0];const f=+i.phaseDeltaScales[0];let x=+i.expression;const s=+i.expressionDelta;let k=i.phases[0]%1,u=i.pulseWidth;const h=i.pulseWidthDelta,m=i.noteFilters,y=i.noteFilterCount|0;let P=+i.initialNoteFilterInput1,C=+i.initialNoteFilterInput2;const S=U.applyFilters,v=t+o;for(let N=t;N<v;N++){const L=k%1,z=(k+u)%1;let E=z-L;if(!c.aliases){if(L<d){var D=L/d;E+=(D+D-D*D-1)*.5}else if(L>1-d){var D=(L-1)/d;E+=(D+D+D*D+1)*.5}if(z<d){var D=z/d;E-=(D+D-D*D-1)*.5}else if(z>1-d){var D=(z-1)/d;E-=(D+D+D*D+1)*.5}}const l=E,g=S(l,P,C,y,m);C=P,P=l,k+=d,d*=f,u+=h;const F=g*x;x+=s,p[N]+=F}i.phases[0]=k,i.phaseDeltas[0]=d,i.expression=x,i.pulseWidth=u,e.sanitizeFilters(m),i.initialNoteFilterInput1=P,i.initialNoteFilterInput2=C}static noiseSynth(e,t,o,i,c){const p=e.tempMonoInstrumentSampleBuffer,d=c.wave;let f=+i.phaseDeltas[0];const x=+i.phaseDeltaScales[0];let s=+i.expression;const k=+i.expressionDelta;let u=i.phases[0]%1*n.chipNoiseLength;i.phases[0]==0&&(u=Math.random()*n.chipNoiseLength);const h=n.chipNoiseLength-1;let m=+i.noiseSample;const y=i.noteFilters,P=i.noteFilterCount|0;let C=+i.initialNoteFilterInput1,S=+i.initialNoteFilterInput2;const v=U.applyFilters,D=Math.min(1,f*c.noisePitchFilterMult),N=t+o;for(let L=t;L<N;L++){const z=d[u&h];m+=(z-m)*D;const E=m,l=v(E,C,S,P,y);S=C,C=E,u+=f,f*=x;const g=l*s;s+=k,p[L]+=g}i.phases[0]=u/n.chipNoiseLength,i.phaseDeltas[0]=f,i.expression=s,i.noiseSample=m,e.sanitizeFilters(y),i.initialNoteFilterInput1=C,i.initialNoteFilterInput2=S}static spectrumSynth(e,t,o,i,c){const p=e.tempMonoInstrumentSampleBuffer,d=c.wave,f=128;let x=i.phaseDeltas[0]*f;const s=+i.phaseDeltaScales[0];let k=+i.expression;const u=+i.expressionDelta;let h=+i.noiseSample;const m=i.noteFilters,y=i.noteFilterCount|0;let P=+i.initialNoteFilterInput1,C=+i.initialNoteFilterInput2;const S=U.applyFilters;let v=i.phases[0]%1*n.spectrumNoiseLength;i.phases[0]==0&&(v=U.findRandomZeroCrossing(d,n.spectrumNoiseLength)+x);const D=n.spectrumNoiseLength-1,N=Math.min(1,x),L=t+o;for(let z=t;z<L;z++){const E=v|0,l=E&D;let g=d[l];const F=v-E;g+=(d[l+1]-g)*F,h+=(g-h)*N;const M=h,I=S(M,P,C,y,m);C=P,P=M,v+=x,x*=s;const A=I*k;k+=u,p[z]+=A}i.phases[0]=v/n.spectrumNoiseLength,i.phaseDeltas[0]=x/f,i.expression=k,i.noiseSample=h,e.sanitizeFilters(m),i.initialNoteFilterInput1=P,i.initialNoteFilterInput2=C}static drumsetSynth(e,t,o,i,c){const p=e.tempMonoInstrumentSampleBuffer;let d=c.getDrumsetWave(i.drumsetPitch);const f=lt.drumsetIndexReferenceDelta(i.drumsetPitch);let x=i.phaseDeltas[0]/f;const s=+i.phaseDeltaScales[0];let k=+i.expression;const u=+i.expressionDelta,h=i.noteFilters,m=i.noteFilterCount|0;let y=+i.initialNoteFilterInput1,P=+i.initialNoteFilterInput2;const C=U.applyFilters;let S=i.phases[0]%1*n.spectrumNoiseLength;i.phases[0]==0&&(S=U.findRandomZeroCrossing(d,n.spectrumNoiseLength)+x);const v=n.spectrumNoiseLength-1,D=t+o;for(let N=t;N<D;N++){const L=S|0,z=L&v;let E=d[z];const l=S-L;E+=(d[z+1]-E)*l;const g=E,F=C(g,y,P,m,h);P=y,y=g,S+=x,x*=s;const M=F*k;k+=u,p[N]+=M}i.phases[0]=S/n.spectrumNoiseLength,i.phaseDeltas[0]=x*f,i.expression=k,e.sanitizeFilters(h),i.initialNoteFilterInput1=y,i.initialNoteFilterInput2=P}static modSynth(e,t,o,i,c){if(!e.song)return;let p=n.modCount-1-i.pitches[0];if(c.invalidModulators[p])return;let d=c.modulators[p],f=[];if(n.modulators[c.modulators[p]].forSong)f.push(0);else if(c.modInstruments[p]==e.song.channels[c.modChannels[p]].instruments.length)for(let x=0;x<e.song.channels[c.modChannels[p]].instruments.length;x++)f.push(x);else c.modInstruments[p]>e.song.channels[c.modChannels[p]].instruments.length?e.song.getPattern(c.modChannels[p],e.bar)!=null&&(f=e.song.getPattern(c.modChannels[p],e.bar).instruments):f.push(c.modInstruments[p]);for(let x=0;x<f.length;x++)if(e.setModValue(i.expression,i.expression+i.expressionDelta,p,c.modChannels[p],f[x],d),d==n.modulators.dictionary["reset arp"].index&&e.tick==0&&i.noteStartPart==e.beat*n.partsPerBeat+e.part)e.song.channels[c.modChannels[p]].instruments[f[x]].arpTime=0;else if(d==n.modulators.dictionary["next bar"].index)e.wantToSkip=!0;else if(d==n.modulators.dictionary["eq filter"].index){const s=e.song.channels[c.modChannels[p]].instruments[f[x]];if(!s.eqFilterType){let k=c.modFilterTypes[p]|0;if(k==0){let u=0;const h=e.getTicksIntoBar()/n.ticksPerPart;for(;i.note.start+i.note.pins[u].time<=h;)u++;let m=(h-i.note.start+o/(e.getSamplesPerTick()*n.ticksPerPart)*n.ticksPerPart-i.note.pins[u-1].time)/(i.note.pins[u].time-i.note.pins[u-1].time);s.eqSubFilters[i.note.pins[u-1].size]!=null||s.eqSubFilters[i.note.pins[u].size]!=null?s.tmpEqFilterEnd=Me.lerpFilters(s.eqSubFilters[i.note.pins[u-1].size],s.eqSubFilters[i.note.pins[u].size],m):s.tmpEqFilterEnd=s.eqFilter}else{for(let u=0;u<n.filterMorphCount;u++)s.tmpEqFilterEnd==s.eqSubFilters[u]&&s.tmpEqFilterEnd!=null&&(s.tmpEqFilterEnd=new Me,s.tmpEqFilterEnd.fromJsonObject(s.eqSubFilters[u].toJsonObject()));s.tmpEqFilterEnd==null&&(s.tmpEqFilterEnd=new Me,s.tmpEqFilterEnd.fromJsonObject(s.eqFilter.toJsonObject())),s.tmpEqFilterEnd.controlPointCount>Math.floor((k-1)/2)&&(k%2?s.tmpEqFilterEnd.controlPoints[Math.floor((k-1)/2)].freq=i.expression+i.expressionDelta:s.tmpEqFilterEnd.controlPoints[Math.floor((k-1)/2)].gain=i.expression+i.expressionDelta)}}}else if(d==n.modulators.dictionary["note filter"].index){const s=e.song.channels[c.modChannels[p]].instruments[f[x]];if(!s.noteFilterType){let k=c.modFilterTypes[p]|0;if(k==0){let u=0;const h=e.getTicksIntoBar()/n.ticksPerPart;for(;i.note.start+i.note.pins[u].time<=h;)u++;let m=(h-i.note.start+o/(e.getSamplesPerTick()*n.ticksPerPart)*n.ticksPerPart-i.note.pins[u-1].time)/(i.note.pins[u].time-i.note.pins[u-1].time);s.noteSubFilters[i.note.pins[u-1].size]!=null||s.noteSubFilters[i.note.pins[u].size]!=null?s.tmpNoteFilterEnd=Me.lerpFilters(s.noteSubFilters[i.note.pins[u-1].size],s.noteSubFilters[i.note.pins[u].size],m):s.tmpNoteFilterEnd=s.noteFilter}else{for(let u=0;u<n.filterMorphCount;u++)s.tmpNoteFilterEnd==s.noteSubFilters[u]&&s.tmpNoteFilterEnd!=null&&(s.tmpNoteFilterEnd=new Me,s.tmpNoteFilterEnd.fromJsonObject(s.noteSubFilters[u].toJsonObject()));s.tmpNoteFilterEnd==null&&(s.tmpNoteFilterEnd=new Me,s.tmpNoteFilterEnd.fromJsonObject(s.noteFilter.toJsonObject())),s.tmpNoteFilterEnd.controlPointCount>Math.floor((k-1)/2)&&(k%2?s.tmpNoteFilterEnd.controlPoints[Math.floor((k-1)/2)].freq=i.expression+i.expressionDelta:s.tmpNoteFilterEnd.controlPoints[Math.floor((k-1)/2)].gain=i.expression+i.expressionDelta)}}}}static findRandomZeroCrossing(e,t){let o=Math.random()*t;const i=t-1;let c=o&i,p=e[c];const d=16;for(let f=128;f>0;f--){const x=c+d&i,s=e[x];if(p*s<=0){for(let k=0;k<d;k++){const u=c+1&i,h=e[u];if(p*h<=0){const m=h-p;o=c,Math.abs(m)>1e-8&&(o+=-p/m),o=Math.max(0,o)%t;break}else c=u,p=h}break}else c=x,p=s}return o}static instrumentVolumeToVolumeMult(e){return e==-n.volumeRange/2?0:Math.pow(2,n.volumeLogScale*e)}static volumeMultToInstrumentVolume(e){return e<=0?-n.volumeRange/2:Math.min(n.volumeRange,Math.log(e)/Math.LN2/n.volumeLogScale)}static noteSizeToVolumeMult(e){return Math.pow(Math.max(0,e)/n.noteSizeMax,1.5)}static volumeMultToNoteSize(e){return Math.pow(Math.max(0,e),1/1.5)*n.noteSizeMax}static fadeInSettingToSeconds(e){return .0125*(.95*e+.05*e*e)}static secondsToFadeInSetting(e){return q(0,n.fadeInRange,Math.round((-.95+Math.sqrt(.9025+.2*e/.0125))/.1))}static fadeOutSettingToTicks(e){return n.fadeOutTicks[e]}static ticksToFadeOutSetting(e){let t=n.fadeOutTicks[0];if(e<=t)return 0;for(let o=1;o<n.fadeOutTicks.length;o++){let i=n.fadeOutTicks[o];if(e<=i)return e<(t+i)/2?o-1:o;t=i}return n.fadeOutTicks.length-1}static detuneToCents(e){return e-n.detuneCenter}static centsToDetune(e){return e+n.detuneCenter}static getOperatorWave(e,t){return e!=3?n.operatorWaves[e]:n.pwmOperatorWaves[t]}getSamplesPerTick(){if(this.song==null)return 0;let e=this.song.getBeatsPerMinute();return this.isModActive(n.modulators.dictionary.tempo.index)&&(e=this.getModValue(n.modulators.dictionary.tempo.index)),this.getSamplesPerTickSpecificBPM(e)}getSamplesPerTickSpecificBPM(e){const t=e/60,o=n.partsPerBeat*t,i=n.ticksPerPart*o;return this.samplesPerSecond/i}static fittingPowerOfTwo(e){return 1<<32-Math.clz32(Math.ceil(e)-1)}sanitizeFilters(e){let t=!1;for(const o of e){const i=Math.abs(o.output1),c=Math.abs(o.output2);if(!(i<100)||!(c<100)){t=!0;break}i<ft&&(o.output1=0),c<ft&&(o.output2=0)}if(t)for(const o of e)o.output1=0,o.output2=0}static sanitizeDelayLine(e,t,o){for(;;){t--;const i=t&o,c=Math.abs(e[i]);if(Number.isFinite(c)&&(c==0||c>=ft))break;e[i]=0}}static applyFilters(e,t,o,i,c){for(let p=0;p<i;p++){const d=c[p],f=d.output1,x=d.output2,s=d.a1,k=d.a2,u=d.b0,h=d.b1,m=d.b2;e=u*e+h*t+m*o-s*f-k*x,d.a1=s+d.a1Delta,d.a2=k+d.a2Delta,d.useMultiplicativeInputCoefficients?(d.b0=u*d.b0Delta,d.b1=h*d.b1Delta,d.b2=m*d.b2Delta):(d.b0=u+d.b0Delta,d.b1=h+d.b1Delta,d.b2=m+d.b2Delta),d.output2=f,d.output1=e,o=x,t=f}return e}};a(U,"tempFilterStartCoefficients",new Ue),a(U,"tempFilterEndCoefficients",new Ue),a(U,"fmSynthFunctionCache",{}),a(U,"effectsFunctionCache",Array(128).fill(void 0)),a(U,"pickedStringFunctionCache",Array(3).fill(void 0)),a(U,"fmSourceTemplate",(`
		const data = synth.tempMonoInstrumentSampleBuffer;
		const sineWave = beepbox.Config.sineWave;
			
		// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.
		let operator#Phase       = +((tone.phases[#] % 1) + 1000) * `+n.sineWaveLength+`;
		let operator#PhaseDelta  = +tone.phaseDeltas[#] * `+n.sineWaveLength+`;
		let operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];
		let operator#OutputMult  = +tone.operatorExpressions[#];
		const operator#OutputDelta = +tone.operatorExpressionDeltas[#];
		let operator#Output      = +tone.feedbackOutputs[#];
        const operator#Wave      = tone.operatorWaves[#].samples;
		let feedbackMult         = +tone.feedbackMult;
		const feedbackDelta        = +tone.feedbackDelta;
        let expression = +tone.expression;
		const expressionDelta = +tone.expressionDelta;
		
		const filters = tone.noteFilters;
		const filterCount = tone.noteFilterCount|0;
		let initialFilterInput1 = +tone.initialNoteFilterInput1;
		let initialFilterInput2 = +tone.initialNoteFilterInput2;
		const applyFilters = beepbox.Synth.applyFilters;
		
		const stopIndex = bufferIndex + roundedSamplesPerTick;
		for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
				// INSERT OPERATOR COMPUTATION HERE
				const fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS
				
			const inputSample = fmOutput;
			const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
			initialFilterInput2 = initialFilterInput1;
			initialFilterInput1 = inputSample;
				
				feedbackMult += feedbackDelta;
				operator#OutputMult += operator#OutputDelta;
				operator#Phase += operator#PhaseDelta;
			operator#PhaseDelta *= operator#PhaseDeltaScale;
			
			const output = sample * expression;
			expression += expressionDelta;

			data[sampleIndex] += output;
			}
			
			tone.phases[#] = operator#Phase / `+n.sineWaveLength+`;
			tone.phaseDeltas[#] = operator#PhaseDelta / `+n.sineWaveLength+`;
			tone.operatorExpressions[#] = operator#OutputMult;
		    tone.feedbackOutputs[#] = operator#Output;
		    tone.feedbackMult = feedbackMult;
		    tone.expression = expression;
			
		synth.sanitizeFilters(filters);
		tone.initialNoteFilterInput1 = initialFilterInput1;
		tone.initialNoteFilterInput2 = initialFilterInput2;
		`).split(`
`)),a(U,"operatorSourceTemplate",(`
				const operator#PhaseMix = operator#Phase/* + operator@Scaled*/;
				const operator#PhaseInt = operator#PhaseMix|0;
				const operator#Index    = operator#PhaseInt & `+n.sineWaveMask+`;
                const operator#Sample   = operator#Wave[operator#Index];
                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);
				const operator#Scaled   = operator#OutputMult * operator#Output;
		`).split(`
`));let X=U;export{Le as A,Ht as C,en as D,Pt as E,Fe as F,Jt as H,T as I,Ke as N,it as P,Ot as S,n as a,ce as b,Pe as c,Re as d,Ze as e,X as f,Dt as g,Me as h,Ue as i,rt as j,xt as k,q as l,Ye as m,kt as n,Fn as o,Pn as p,gt as q,vt as r,bt as s,St as t,Ft as u,ot as v,st as w,Xe as x,je as y,_e as z};
